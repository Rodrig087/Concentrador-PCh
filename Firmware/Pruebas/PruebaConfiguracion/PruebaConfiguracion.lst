;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 1/9/2021 23:16:41
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF003EF41  	GOTO        1666
_interrupt:
;PruebaConfiguracion.c,204 :: 		void interrupt(void){
0x0008	0xF017C000  	MOVFF       R0, 23
0x000C	0xF016C001  	MOVFF       R1, 22
0x0010	0xF015C00D  	MOVFF       R13, 21
;PruebaConfiguracion.c,220 :: 		if (SSP1IF_bit==1){
0x0014	0xA69E      	BTFSS       SSP1IF_bit, BitPos(SSP1IF_bit+0) 
0x0016	0xD0E4      	BRA         L_interrupt23
;PruebaConfiguracion.c,222 :: 		SSP1IF_bit = 0;                                                          //Limpia la bandera de interrupcion por SPI
0x0018	0x969E      	BCF         SSP1IF_bit, BitPos(SSP1IF_bit+0) 
;PruebaConfiguracion.c,223 :: 		bufferSPI = SSP1BUF;                                                     //Guarda el contenido del bufeer (lectura)
0x001A	0xF034CFC9  	MOVFF       SSP1BUF, _bufferSPI
;PruebaConfiguracion.c,224 :: 		TEST = ~TEST;
0x001E	0x7481      	BTG         RB2_bit, BitPos(RB2_bit+0) 
;PruebaConfiguracion.c,228 :: 		if ((banSPI0==0)&&(bufferSPI==0xA0)) {
0x0020	0x5036      	MOVF        _banSPI0, 0 
0x0022	0x0A00      	XORLW       0
0x0024	0xE10E      	BNZ         L_interrupt26
0x0026	0x5034      	MOVF        _bufferSPI, 0 
0x0028	0x0AA0      	XORLW       160
0x002A	0xE10B      	BNZ         L_interrupt26
L__interrupt78:
;PruebaConfiguracion.c,229 :: 		SSP1BUF = tramaRespuestaSPI[0];                                       //Carga en el buffer el primer elemento de la cabecera (id)
0x002C	0xFFC9C037  	MOVFF       _tramaRespuestaSPI, SSP1BUF
;PruebaConfiguracion.c,230 :: 		i = 1;
0x0030	0x0E01      	MOVLW       1
0x0032	0x6E30      	MOVWF       _i 
0x0034	0x0E00      	MOVLW       0
0x0036	0x6E31      	MOVWF       _i+1 
;PruebaConfiguracion.c,231 :: 		CambiarEstadoBandera(0,1);                                            //Activa la bandera
0x0038	0x0100      	MOVLB       0
0x003A	0x6B9B      	CLRF        FARG_CambiarEstadoBandera_bandera, 1
0x003C	0x0E01      	MOVLW       1
0x003E	0x6F9C      	MOVWF       FARG_CambiarEstadoBandera_estado, 1
0x0040	0xDB05      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,232 :: 		}
L_interrupt26:
;PruebaConfiguracion.c,233 :: 		if ((banSPI0==1)&&(bufferSPI!=0xA0)&&(bufferSPI!=0xF0)){
0x0042	0x5036      	MOVF        _banSPI0, 0 
0x0044	0x0A01      	XORLW       1
0x0046	0xE110      	BNZ         L_interrupt29
0x0048	0x5034      	MOVF        _bufferSPI, 0 
0x004A	0x0AA0      	XORLW       160
0x004C	0xE00D      	BZ          L_interrupt29
0x004E	0x5034      	MOVF        _bufferSPI, 0 
0x0050	0x0AF0      	XORLW       240
0x0052	0xE00A      	BZ          L_interrupt29
L__interrupt77:
;PruebaConfiguracion.c,234 :: 		SSP1BUF = tramaRespuestaSPI[i];                                       //Se envia la trama de respuesta
0x0054	0x0E37      	MOVLW       _tramaRespuestaSPI
0x0056	0x2430      	ADDWF       _i, 0 
0x0058	0x6EE9      	MOVWF       FSR0L 
0x005A	0x0E00      	MOVLW       hi_addr(_tramaRespuestaSPI)
0x005C	0x2031      	ADDWFC      _i+1, 0 
0x005E	0x6EEA      	MOVWF       FSR0H 
0x0060	0xFFC9CFEE  	MOVFF       POSTINC0, SSP1BUF
;PruebaConfiguracion.c,235 :: 		i++;
0x0064	0x4A30      	INFSNZ      _i, 1 
0x0066	0x2A31      	INCF        _i+1, 1 
;PruebaConfiguracion.c,237 :: 		}
L_interrupt29:
;PruebaConfiguracion.c,238 :: 		if ((banSPI0==1)&&(bufferSPI==0xF0)){
0x0068	0x5036      	MOVF        _banSPI0, 0 
0x006A	0x0A01      	XORLW       1
0x006C	0xE107      	BNZ         L_interrupt32
0x006E	0x5034      	MOVF        _bufferSPI, 0 
0x0070	0x0AF0      	XORLW       240
0x0072	0xE104      	BNZ         L_interrupt32
L__interrupt76:
0x0074	0x0100      	MOVLB       0
;PruebaConfiguracion.c,239 :: 		CambiarEstadoBandera(0,0);                                            //Limpia las banderas
0x0076	0x6B9B      	CLRF        FARG_CambiarEstadoBandera_bandera, 1
0x0078	0x6B9C      	CLRF        FARG_CambiarEstadoBandera_estado, 1
0x007A	0xDAE8      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,240 :: 		}
L_interrupt32:
;PruebaConfiguracion.c,243 :: 		if ((banSPI1==0)&&(bufferSPI==0xA1)){
0x007C	0x5035      	MOVF        _banSPI1, 0 
0x007E	0x0A00      	XORLW       0
0x0080	0xE10B      	BNZ         L_interrupt35
0x0082	0x5034      	MOVF        _bufferSPI, 0 
0x0084	0x0AA1      	XORLW       161
0x0086	0xE108      	BNZ         L_interrupt35
L__interrupt75:
0x0088	0x0100      	MOVLB       0
;PruebaConfiguracion.c,244 :: 		i = 0;                                                                //Limpia el subindice para guardar la trama SPI
0x008A	0x6A30      	CLRF        _i 
0x008C	0x6A31      	CLRF        _i+1 
;PruebaConfiguracion.c,245 :: 		CambiarEstadoBandera(1,1);                                            //Activa la bandera banSPI1
0x008E	0x0E01      	MOVLW       1
0x0090	0x6F9B      	MOVWF       FARG_CambiarEstadoBandera_bandera, 1
0x0092	0x0E01      	MOVLW       1
0x0094	0x6F9C      	MOVWF       FARG_CambiarEstadoBandera_estado, 1
0x0096	0xDADA      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,246 :: 		}
L_interrupt35:
;PruebaConfiguracion.c,247 :: 		if ((banSPI1==1)&&(bufferSPI!=0xA1)&&(bufferSPI!=0xF1)){
0x0098	0x5035      	MOVF        _banSPI1, 0 
0x009A	0x0A01      	XORLW       1
0x009C	0xE110      	BNZ         L_interrupt38
0x009E	0x5034      	MOVF        _bufferSPI, 0 
0x00A0	0x0AA1      	XORLW       161
0x00A2	0xE00D      	BZ          L_interrupt38
0x00A4	0x5034      	MOVF        _bufferSPI, 0 
0x00A6	0x0AF1      	XORLW       241
0x00A8	0xE00A      	BZ          L_interrupt38
L__interrupt74:
;PruebaConfiguracion.c,248 :: 		tramaSolicitudSPI[i] = bufferSPI;                                     //Recupera la trama de solicitud SPI
0x00AA	0x0E4B      	MOVLW       _tramaSolicitudSPI
0x00AC	0x2430      	ADDWF       _i, 0 
0x00AE	0x6EE1      	MOVWF       FSR1L 
0x00B0	0x0E00      	MOVLW       hi_addr(_tramaSolicitudSPI)
0x00B2	0x2031      	ADDWFC      _i+1, 0 
0x00B4	0x6EE2      	MOVWF       FSR1H 
0x00B6	0xFFE6C034  	MOVFF       _bufferSPI, POSTINC1
;PruebaConfiguracion.c,249 :: 		i++;
0x00BA	0x4A30      	INFSNZ      _i, 1 
0x00BC	0x2A31      	INCF        _i+1, 1 
;PruebaConfiguracion.c,250 :: 		}
L_interrupt38:
;PruebaConfiguracion.c,251 :: 		if ((banSPI1==1)&&(bufferSPI==0xF1)){
0x00BE	0x5035      	MOVF        _banSPI1, 0 
0x00C0	0x0A01      	XORLW       1
0x00C2	0xA4D8      	BTFSS       STATUS, 2 
0x00C4	0xD08D      	BRA         L_interrupt41
0x00C6	0x5034      	MOVF        _bufferSPI, 0 
0x00C8	0x0AF1      	XORLW       241
0x00CA	0xA4D8      	BTFSS       STATUS, 2 
0x00CC	0xD089      	BRA         L_interrupt41
L__interrupt73:
;PruebaConfiguracion.c,253 :: 		for (j=0;j<4;j++){
0x00CE	0x6A32      	CLRF        _j 
0x00D0	0x6A33      	CLRF        _j+1 
L_interrupt42:
0x00D2	0x0E00      	MOVLW       0
0x00D4	0x5C33      	SUBWF       _j+1, 0 
0x00D6	0xE102      	BNZ         L__interrupt87
0x00D8	0x0E04      	MOVLW       4
0x00DA	0x5C32      	SUBWF       _j, 0 
L__interrupt87:
0x00DC	0xE211      	BC          L_interrupt43
;PruebaConfiguracion.c,254 :: 		cabeceraSolicitud[j] = tramaSolicitudSPI[j];
0x00DE	0x0E81      	MOVLW       _cabeceraSolicitud
0x00E0	0x2432      	ADDWF       _j, 0 
0x00E2	0x6EE1      	MOVWF       FSR1L 
0x00E4	0x0E00      	MOVLW       hi_addr(_cabeceraSolicitud)
0x00E6	0x2033      	ADDWFC      _j+1, 0 
0x00E8	0x6EE2      	MOVWF       FSR1H 
0x00EA	0x0E4B      	MOVLW       _tramaSolicitudSPI
0x00EC	0x2432      	ADDWF       _j, 0 
0x00EE	0x6EE9      	MOVWF       FSR0L 
0x00F0	0x0E00      	MOVLW       hi_addr(_tramaSolicitudSPI)
0x00F2	0x2033      	ADDWFC      _j+1, 0 
0x00F4	0x6EEA      	MOVWF       FSR0H 
0x00F6	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;PruebaConfiguracion.c,253 :: 		for (j=0;j<4;j++){
0x00FA	0x4A32      	INFSNZ      _j, 1 
0x00FC	0x2A33      	INCF        _j+1, 1 
;PruebaConfiguracion.c,255 :: 		}
0x00FE	0xD7E9      	BRA         L_interrupt42
L_interrupt43:
;PruebaConfiguracion.c,257 :: 		for (j=0;j<(cabeceraSolicitud[3]);j++){
0x0100	0x6A32      	CLRF        _j 
0x0102	0x6A33      	CLRF        _j+1 
L_interrupt45:
0x0104	0x0E00      	MOVLW       0
0x0106	0x5C33      	SUBWF       _j+1, 0 
0x0108	0xE103      	BNZ         L__interrupt88
0x010A	0x0100      	MOVLB       0
0x010C	0x5184      	MOVF        _cabeceraSolicitud+3, 0, 1
0x010E	0x5C32      	SUBWF       _j, 0 
L__interrupt88:
0x0110	0xE217      	BC          L_interrupt46
;PruebaConfiguracion.c,258 :: 		payloadSolicitud[j] = tramaSolicitudSPI[4+j];
0x0112	0x0E86      	MOVLW       _payloadSolicitud
0x0114	0x2432      	ADDWF       _j, 0 
0x0116	0x6EE1      	MOVWF       FSR1L 
0x0118	0x0E00      	MOVLW       hi_addr(_payloadSolicitud)
0x011A	0x2033      	ADDWFC      _j+1, 0 
0x011C	0x6EE2      	MOVWF       FSR1H 
0x011E	0x0E04      	MOVLW       4
0x0120	0x2432      	ADDWF       _j, 0 
0x0122	0x6E00      	MOVWF       R0 
0x0124	0x0E00      	MOVLW       0
0x0126	0x2033      	ADDWFC      _j+1, 0 
0x0128	0x6E01      	MOVWF       R1 
0x012A	0x0E4B      	MOVLW       _tramaSolicitudSPI
0x012C	0x2400      	ADDWF       R0, 0 
0x012E	0x6EE9      	MOVWF       FSR0L 
0x0130	0x0E00      	MOVLW       hi_addr(_tramaSolicitudSPI)
0x0132	0x2001      	ADDWFC      R1, 0 
0x0134	0x6EEA      	MOVWF       FSR0H 
0x0136	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;PruebaConfiguracion.c,257 :: 		for (j=0;j<(cabeceraSolicitud[3]);j++){
0x013A	0x4A32      	INFSNZ      _j, 1 
0x013C	0x2A33      	INCF        _j+1, 1 
;PruebaConfiguracion.c,259 :: 		}
0x013E	0xD7E2      	BRA         L_interrupt45
L_interrupt46:
0x0140	0x0100      	MOVLB       0
;PruebaConfiguracion.c,262 :: 		idSolicitud = cabeceraSolicitud[0];
0x0142	0xF025C081  	MOVFF       _cabeceraSolicitud, _idSolicitud
;PruebaConfiguracion.c,263 :: 		funcionSolicitud = cabeceraSolicitud[1];
0x0146	0xF024C082  	MOVFF       _cabeceraSolicitud+1, _funcionSolicitud
;PruebaConfiguracion.c,264 :: 		subFuncionSolicitud = cabeceraSolicitud[2];
0x014A	0xF022C083  	MOVFF       _cabeceraSolicitud+2, _subFuncionSolicitud
;PruebaConfiguracion.c,267 :: 		if (funcionSolicitud!=4){
0x014E	0x5182      	MOVF        _cabeceraSolicitud+1, 0, 1
0x0150	0x0A04      	XORLW       4
0x0152	0xE018      	BZ          L_interrupt48
;PruebaConfiguracion.c,269 :: 		EnviarTramaRS485(1, cabeceraSolicitud, payloadSolicitud);
0x0154	0x0E01      	MOVLW       1
0x0156	0x6F9B      	MOVWF       FARG_EnviarTramaRS485_puertoUART, 1
0x0158	0x0E81      	MOVLW       _cabeceraSolicitud
0x015A	0x6F9C      	MOVWF       FARG_EnviarTramaRS485_cabecera, 1
0x015C	0x0E00      	MOVLW       hi_addr(_cabeceraSolicitud)
0x015E	0x6F9D      	MOVWF       FARG_EnviarTramaRS485_cabecera+1, 1
0x0160	0x0E86      	MOVLW       _payloadSolicitud
0x0162	0x6F9E      	MOVWF       FARG_EnviarTramaRS485_payload, 1
0x0164	0x0E00      	MOVLW       hi_addr(_payloadSolicitud)
0x0166	0x6F9F      	MOVWF       FARG_EnviarTramaRS485_payload+1, 1
0x0168	0xD9E8      	RCALL       _EnviarTramaRS485
;PruebaConfiguracion.c,270 :: 		EnviarTramaRS485(2, cabeceraSolicitud, payloadSolicitud);
0x016A	0x0E02      	MOVLW       2
0x016C	0x0100      	MOVLB       0
0x016E	0x6F9B      	MOVWF       FARG_EnviarTramaRS485_puertoUART, 1
0x0170	0x0E81      	MOVLW       _cabeceraSolicitud
0x0172	0x6F9C      	MOVWF       FARG_EnviarTramaRS485_cabecera, 1
0x0174	0x0E00      	MOVLW       hi_addr(_cabeceraSolicitud)
0x0176	0x6F9D      	MOVWF       FARG_EnviarTramaRS485_cabecera+1, 1
0x0178	0x0E86      	MOVLW       _payloadSolicitud
0x017A	0x6F9E      	MOVWF       FARG_EnviarTramaRS485_payload, 1
0x017C	0x0E00      	MOVLW       hi_addr(_payloadSolicitud)
0x017E	0x6F9F      	MOVWF       FARG_EnviarTramaRS485_payload+1, 1
0x0180	0xD9DC      	RCALL       _EnviarTramaRS485
;PruebaConfiguracion.c,271 :: 		} else {
0x0182	0xD029      	BRA         L_interrupt49
L_interrupt48:
;PruebaConfiguracion.c,272 :: 		if (subfuncionSolicitud==1){
0x0184	0x5022      	MOVF        _subFuncionSolicitud, 0 
0x0186	0x0A01      	XORLW       1
0x0188	0xE10E      	BNZ         L_interrupt50
;PruebaConfiguracion.c,274 :: 		TEST = ~TEST;
0x018A	0x7481      	BTG         RB2_bit, BitPos(RB2_bit+0) 
;PruebaConfiguracion.c,275 :: 		cabeceraSolicitud[3] = 10;                                      //Actualiza el numero de datos para hacer el test
0x018C	0x0E0A      	MOVLW       10
0x018E	0x0100      	MOVLB       0
0x0190	0x6F84      	MOVWF       _cabeceraSolicitud+3, 1
;PruebaConfiguracion.c,276 :: 		ResponderSPI(cabeceraSolicitud, tramaPruebaSPI);
0x0192	0x0E81      	MOVLW       _cabeceraSolicitud
0x0194	0x6F9B      	MOVWF       FARG_ResponderSPI_cabeceraRespuesta, 1
0x0196	0x0E00      	MOVLW       hi_addr(_cabeceraSolicitud)
0x0198	0x6F9C      	MOVWF       FARG_ResponderSPI_cabeceraRespuesta+1, 1
0x019A	0x0E18      	MOVLW       _tramaPruebaSPI
0x019C	0x6F9D      	MOVWF       FARG_ResponderSPI_payloadRespuesta, 1
0x019E	0x0E00      	MOVLW       hi_addr(_tramaPruebaSPI)
0x01A0	0x6F9E      	MOVWF       FARG_ResponderSPI_payloadRespuesta+1, 1
0x01A2	0xD931      	RCALL       _ResponderSPI
;PruebaConfiguracion.c,277 :: 		} else {
0x01A4	0xD018      	BRA         L_interrupt51
L_interrupt50:
0x01A6	0x0100      	MOVLB       0
;PruebaConfiguracion.c,279 :: 		EnviarTramaRS485(1, cabeceraSolicitud, payloadSolicitud);
0x01A8	0x0E01      	MOVLW       1
0x01AA	0x6F9B      	MOVWF       FARG_EnviarTramaRS485_puertoUART, 1
0x01AC	0x0E81      	MOVLW       _cabeceraSolicitud
0x01AE	0x6F9C      	MOVWF       FARG_EnviarTramaRS485_cabecera, 1
0x01B0	0x0E00      	MOVLW       hi_addr(_cabeceraSolicitud)
0x01B2	0x6F9D      	MOVWF       FARG_EnviarTramaRS485_cabecera+1, 1
0x01B4	0x0E86      	MOVLW       _payloadSolicitud
0x01B6	0x6F9E      	MOVWF       FARG_EnviarTramaRS485_payload, 1
0x01B8	0x0E00      	MOVLW       hi_addr(_payloadSolicitud)
0x01BA	0x6F9F      	MOVWF       FARG_EnviarTramaRS485_payload+1, 1
0x01BC	0xD9BE      	RCALL       _EnviarTramaRS485
;PruebaConfiguracion.c,280 :: 		EnviarTramaRS485(2, cabeceraSolicitud, payloadSolicitud);
0x01BE	0x0E02      	MOVLW       2
0x01C0	0x0100      	MOVLB       0
0x01C2	0x6F9B      	MOVWF       FARG_EnviarTramaRS485_puertoUART, 1
0x01C4	0x0E81      	MOVLW       _cabeceraSolicitud
0x01C6	0x6F9C      	MOVWF       FARG_EnviarTramaRS485_cabecera, 1
0x01C8	0x0E00      	MOVLW       hi_addr(_cabeceraSolicitud)
0x01CA	0x6F9D      	MOVWF       FARG_EnviarTramaRS485_cabecera+1, 1
0x01CC	0x0E86      	MOVLW       _payloadSolicitud
0x01CE	0x6F9E      	MOVWF       FARG_EnviarTramaRS485_payload, 1
0x01D0	0x0E00      	MOVLW       hi_addr(_payloadSolicitud)
0x01D2	0x6F9F      	MOVWF       FARG_EnviarTramaRS485_payload+1, 1
0x01D4	0xD9B2      	RCALL       _EnviarTramaRS485
;PruebaConfiguracion.c,281 :: 		}
L_interrupt51:
;PruebaConfiguracion.c,282 :: 		}
L_interrupt49:
;PruebaConfiguracion.c,284 :: 		CambiarEstadoBandera(1,0);                                            //Limpia la bandera
0x01D6	0x0E01      	MOVLW       1
0x01D8	0x0100      	MOVLB       0
0x01DA	0x6F9B      	MOVWF       FARG_CambiarEstadoBandera_bandera, 1
0x01DC	0x6B9C      	CLRF        FARG_CambiarEstadoBandera_estado, 1
0x01DE	0xDA36      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,286 :: 		}
L_interrupt41:
;PruebaConfiguracion.c,288 :: 		}
L_interrupt23:
;PruebaConfiguracion.c,293 :: 		if (RC1IF_bit==1){
0x01E0	0xAA9E      	BTFSS       RC1IF_bit, BitPos(RC1IF_bit+0) 
0x01E2	0xD06A      	BRA         L_interrupt52
;PruebaConfiguracion.c,295 :: 		RC1IF_bit = 0;                                                           //Limpia la bandera de interrupcion
0x01E4	0x9A9E      	BCF         RC1IF_bit, BitPos(RC1IF_bit+0) 
;PruebaConfiguracion.c,296 :: 		byteRS485 = UART1_Read();
0x01E6	0xD95C      	RCALL       _UART1_Read
0x01E8	0xF02BC000  	MOVFF       R0, _byteRS485
;PruebaConfiguracion.c,299 :: 		if (banRSI==2){
0x01EC	0x5023      	MOVF        _banRSI, 0 
0x01EE	0x0A02      	XORLW       2
0x01F0	0xE114      	BNZ         L_interrupt53
;PruebaConfiguracion.c,301 :: 		if (i_rs485<(numDatosRS485)){
0x01F2	0x0E00      	MOVLW       0
0x01F4	0x5C29      	SUBWF       _i_rs485+1, 0 
0x01F6	0xE102      	BNZ         L__interrupt89
0x01F8	0x505F      	MOVF        _numDatosRS485, 0 
0x01FA	0x5C28      	SUBWF       _i_rs485, 0 
L__interrupt89:
0x01FC	0xE20B      	BC          L_interrupt54
;PruebaConfiguracion.c,302 :: 		inputPyloadRS485[i_rs485] = byteRS485;
0x01FE	0x0E6D      	MOVLW       _inputPyloadRS485
0x0200	0x2428      	ADDWF       _i_rs485, 0 
0x0202	0x6EE1      	MOVWF       FSR1L 
0x0204	0x0E00      	MOVLW       hi_addr(_inputPyloadRS485)
0x0206	0x2029      	ADDWFC      _i_rs485+1, 0 
0x0208	0x6EE2      	MOVWF       FSR1H 
0x020A	0xFFE6C02B  	MOVFF       _byteRS485, POSTINC1
;PruebaConfiguracion.c,303 :: 		i_rs485++;
0x020E	0x4A28      	INFSNZ      _i_rs485, 1 
0x0210	0x2A29      	INCF        _i_rs485+1, 1 
;PruebaConfiguracion.c,304 :: 		} else {
0x0212	0xD003      	BRA         L_interrupt55
L_interrupt54:
;PruebaConfiguracion.c,305 :: 		banRSI = 0;                                                        //Limpia la bandera de inicio de trama
0x0214	0x6A23      	CLRF        _banRSI 
;PruebaConfiguracion.c,306 :: 		banRSC = 1;                                                        //Activa la bandera de trama completa
0x0216	0x0E01      	MOVLW       1
0x0218	0x6E2A      	MOVWF       _banRSC 
;PruebaConfiguracion.c,307 :: 		}
L_interrupt55:
;PruebaConfiguracion.c,308 :: 		}
L_interrupt53:
;PruebaConfiguracion.c,311 :: 		if ((banRSI==0)&&(banRSC==0)){
0x021A	0x5023      	MOVF        _banRSI, 0 
0x021C	0x0A00      	XORLW       0
0x021E	0xE10A      	BNZ         L_interrupt58
0x0220	0x502A      	MOVF        _banRSC, 0 
0x0222	0x0A00      	XORLW       0
0x0224	0xE107      	BNZ         L_interrupt58
L__interrupt72:
;PruebaConfiguracion.c,312 :: 		if (byteRS485==0x3A){                                                 //Verifica si el primer byte recibido sea el byte de inicio de trama
0x0226	0x502B      	MOVF        _byteRS485, 0 
0x0228	0x0A3A      	XORLW       58
0x022A	0xE104      	BNZ         L_interrupt59
;PruebaConfiguracion.c,313 :: 		banRSI = 1;
0x022C	0x0E01      	MOVLW       1
0x022E	0x6E23      	MOVWF       _banRSI 
;PruebaConfiguracion.c,314 :: 		i_rs485 = 0;
0x0230	0x6A28      	CLRF        _i_rs485 
0x0232	0x6A29      	CLRF        _i_rs485+1 
;PruebaConfiguracion.c,315 :: 		}
L_interrupt59:
;PruebaConfiguracion.c,316 :: 		}
L_interrupt58:
;PruebaConfiguracion.c,317 :: 		if ((banRSI==1)&&(byteRS485!=0x3A)&&(i_rs485<4)){
0x0234	0x5023      	MOVF        _banRSI, 0 
0x0236	0x0A01      	XORLW       1
0x0238	0xE113      	BNZ         L_interrupt62
0x023A	0x502B      	MOVF        _byteRS485, 0 
0x023C	0x0A3A      	XORLW       58
0x023E	0xE010      	BZ          L_interrupt62
0x0240	0x0E00      	MOVLW       0
0x0242	0x5C29      	SUBWF       _i_rs485+1, 0 
0x0244	0xE102      	BNZ         L__interrupt90
0x0246	0x0E04      	MOVLW       4
0x0248	0x5C28      	SUBWF       _i_rs485, 0 
L__interrupt90:
0x024A	0xE20A      	BC          L_interrupt62
L__interrupt71:
;PruebaConfiguracion.c,318 :: 		tramaCabeceraRS485[i_rs485] = byteRS485;                              //Recupera los datos de cabecera de la trama UART: [Direccion, Funcion, Subfuncion, NumeroDatos]
0x024C	0x0E7C      	MOVLW       _tramaCabeceraRS485
0x024E	0x2428      	ADDWF       _i_rs485, 0 
0x0250	0x6EE1      	MOVWF       FSR1L 
0x0252	0x0E00      	MOVLW       hi_addr(_tramaCabeceraRS485)
0x0254	0x2029      	ADDWFC      _i_rs485+1, 0 
0x0256	0x6EE2      	MOVWF       FSR1H 
0x0258	0xFFE6C02B  	MOVFF       _byteRS485, POSTINC1
;PruebaConfiguracion.c,319 :: 		i_rs485++;
0x025C	0x4A28      	INFSNZ      _i_rs485, 1 
0x025E	0x2A29      	INCF        _i_rs485+1, 1 
;PruebaConfiguracion.c,320 :: 		}
L_interrupt62:
;PruebaConfiguracion.c,321 :: 		if ((banRSI==1)&&(i_rs485==4)){
0x0260	0x5023      	MOVF        _banRSI, 0 
0x0262	0x0A01      	XORLW       1
0x0264	0xE11A      	BNZ         L_interrupt65
0x0266	0x0E00      	MOVLW       0
0x0268	0x1829      	XORWF       _i_rs485+1, 0 
0x026A	0xE102      	BNZ         L__interrupt91
0x026C	0x0E04      	MOVLW       4
0x026E	0x1828      	XORWF       _i_rs485, 0 
L__interrupt91:
0x0270	0xE114      	BNZ         L_interrupt65
L__interrupt70:
;PruebaConfiguracion.c,323 :: 		if (tramaCabeceraRS485[0]==idSolicitud){
0x0272	0x0100      	MOVLB       0
0x0274	0x517C      	MOVF        _tramaCabeceraRS485, 0, 1
0x0276	0x1825      	XORWF       _idSolicitud, 0 
0x0278	0xE10C      	BNZ         L_interrupt66
;PruebaConfiguracion.c,325 :: 		funcionRS485 = tramaCabeceraRS485[1];
0x027A	0xF026C07D  	MOVFF       _tramaCabeceraRS485+1, _funcionRS485
;PruebaConfiguracion.c,326 :: 		subFuncionRS485 = tramaCabeceraRS485[2];
0x027E	0xF027C07E  	MOVFF       _tramaCabeceraRS485+2, _subFuncionRS485
;PruebaConfiguracion.c,327 :: 		numDatosRS485 = tramaCabeceraRS485[3];
0x0282	0xF05FC07F  	MOVFF       _tramaCabeceraRS485+3, _numDatosRS485
;PruebaConfiguracion.c,328 :: 		idSolicitud = 0;                                                   //Encera el idSolicitud
0x0286	0x6A25      	CLRF        _idSolicitud 
;PruebaConfiguracion.c,329 :: 		i_rs485 = 0;                                                       //Encera el subindice para almacenar el payload
0x0288	0x6A28      	CLRF        _i_rs485 
0x028A	0x6A29      	CLRF        _i_rs485+1 
;PruebaConfiguracion.c,330 :: 		banRSI = 2;                                                        //Cambia el valor de la bandera para salir del bucle
0x028C	0x0E02      	MOVLW       2
0x028E	0x6E23      	MOVWF       _banRSI 
;PruebaConfiguracion.c,332 :: 		} else {
0x0290	0xD004      	BRA         L_interrupt67
L_interrupt66:
;PruebaConfiguracion.c,333 :: 		banRSI = 0;
0x0292	0x6A23      	CLRF        _banRSI 
;PruebaConfiguracion.c,334 :: 		banRSC = 0;
0x0294	0x6A2A      	CLRF        _banRSC 
;PruebaConfiguracion.c,335 :: 		i_rs485 = 0;
0x0296	0x6A28      	CLRF        _i_rs485 
0x0298	0x6A29      	CLRF        _i_rs485+1 
;PruebaConfiguracion.c,336 :: 		}
L_interrupt67:
;PruebaConfiguracion.c,337 :: 		}
L_interrupt65:
;PruebaConfiguracion.c,340 :: 		if (banRSC==1){
0x029A	0x502A      	MOVF        _banRSC, 0 
0x029C	0x0A01      	XORLW       1
0x029E	0xE10C      	BNZ         L_interrupt68
;PruebaConfiguracion.c,341 :: 		TEST = ~TEST;
0x02A0	0x0100      	MOVLB       0
0x02A2	0x7481      	BTG         RB2_bit, BitPos(RB2_bit+0) 
;PruebaConfiguracion.c,342 :: 		ResponderSPI(tramaCabeceraRS485, inputPyloadRS485);
0x02A4	0x0E7C      	MOVLW       _tramaCabeceraRS485
0x02A6	0x6F9B      	MOVWF       FARG_ResponderSPI_cabeceraRespuesta, 1
0x02A8	0x0E00      	MOVLW       hi_addr(_tramaCabeceraRS485)
0x02AA	0x6F9C      	MOVWF       FARG_ResponderSPI_cabeceraRespuesta+1, 1
0x02AC	0x0E6D      	MOVLW       _inputPyloadRS485
0x02AE	0x6F9D      	MOVWF       FARG_ResponderSPI_payloadRespuesta, 1
0x02B0	0x0E00      	MOVLW       hi_addr(_inputPyloadRS485)
0x02B2	0x6F9E      	MOVWF       FARG_ResponderSPI_payloadRespuesta+1, 1
0x02B4	0xD8A8      	RCALL       _ResponderSPI
;PruebaConfiguracion.c,344 :: 		banRSC = 0;
0x02B6	0x6A2A      	CLRF        _banRSC 
;PruebaConfiguracion.c,345 :: 		}
L_interrupt68:
;PruebaConfiguracion.c,347 :: 		}
L_interrupt52:
;PruebaConfiguracion.c,352 :: 		if (RC2IF_bit==1){
0x02B8	0xBAA4      	BTFSC       RC2IF_bit, BitPos(RC2IF_bit+0) 
;PruebaConfiguracion.c,354 :: 		RC2IF_bit = 0;                                                           //Limpia la bandera de interrupcion
0x02BA	0x9AA4      	BCF         RC2IF_bit, BitPos(RC2IF_bit+0) 
;PruebaConfiguracion.c,407 :: 		}
L_interrupt69:
;PruebaConfiguracion.c,410 :: 		}
L_end_interrupt:
L__interrupt86:
0x02BC	0xF000C017  	MOVFF       23, R0
0x02C0	0xF001C016  	MOVFF       22, R1
0x02C4	0xF00DC015  	MOVFF       21, R13
0x02C8	0x0011      	RETFIE      1
; end of _interrupt
_UART1_Init:
;__Lib_UART_c67b67.c,20 :: 		
;__Lib_UART_c67b67.c,23 :: 		
0x02CA	0x0EE2      	MOVLW       _UART1_Write
0x02CC	0x0100      	MOVLB       0
0x02CE	0x6F93      	MOVWF       _UART_Wr_Ptr, 1
0x02D0	0x0E03      	MOVLW       hi_addr(_UART1_Write)
0x02D2	0x6F94      	MOVWF       _UART_Wr_Ptr+1, 1
0x02D4	0x0EA5      	MOVLW       FARG_UART1_Write_data_
0x02D6	0x6F95      	MOVWF       _UART_Wr_Ptr+2, 1
0x02D8	0x0E00      	MOVLW       hi_addr(FARG_UART1_Write_data_)
0x02DA	0x6F96      	MOVWF       _UART_Wr_Ptr+3, 1
;__Lib_UART_c67b67.c,24 :: 		
0x02DC	0x0EA0      	MOVLW       _UART1_Read
0x02DE	0x6F65      	MOVWF       _UART_Rd_Ptr, 1
0x02E0	0x0E04      	MOVLW       hi_addr(_UART1_Read)
0x02E2	0x6F66      	MOVWF       _UART_Rd_Ptr+1, 1
0x02E4	0x0E00      	MOVLW       0
0x02E6	0x6F67      	MOVWF       _UART_Rd_Ptr+2, 1
0x02E8	0x0E00      	MOVLW       0
0x02EA	0x6F68      	MOVWF       _UART_Rd_Ptr+3, 1
;__Lib_UART_c67b67.c,25 :: 		
0x02EC	0x0EFF      	MOVLW       _UART1_Data_Ready
0x02EE	0x6F69      	MOVWF       _UART_Rdy_Ptr, 1
0x02F0	0x0EFF      	MOVLW       hi_addr(_UART1_Data_Ready)
0x02F2	0x6F6A      	MOVWF       _UART_Rdy_Ptr+1, 1
0x02F4	0x0E00      	MOVLW       0
0x02F6	0x6F6B      	MOVWF       _UART_Rdy_Ptr+2, 1
0x02F8	0x0E00      	MOVLW       0
0x02FA	0x6F6C      	MOVWF       _UART_Rdy_Ptr+3, 1
;__Lib_UART_c67b67.c,26 :: 		
0x02FC	0x0E7A      	MOVLW       _UART1_Tx_Idle
0x02FE	0x6F61      	MOVWF       _UART_Tx_Idle_Ptr, 1
0x0300	0x0E03      	MOVLW       hi_addr(_UART1_Tx_Idle)
0x0302	0x6F62      	MOVWF       _UART_Tx_Idle_Ptr+1, 1
0x0304	0x0E00      	MOVLW       0
0x0306	0x6F63      	MOVWF       _UART_Tx_Idle_Ptr+2, 1
0x0308	0x0E00      	MOVLW       0
0x030A	0x6F64      	MOVWF       _UART_Tx_Idle_Ptr+3, 1
;__Lib_UART_c67b67.c,28 :: 		
0x030C	0x8AAC      	BSF         TXSTA, 5 
;__Lib_UART_c67b67.c,29 :: 		
0x030E	0x0E90      	MOVLW       144
0x0310	0x6EAB      	MOVWF       RCSTA 
;__Lib_UART_c67b67.c,30 :: 		
0x0312	0x8E94      	BSF         TRISC7_bit, BitPos(TRISC7_bit+0) 
;__Lib_UART_c67b67.c,31 :: 		
0x0314	0x9C94      	BCF         TRISC6_bit, BitPos(TRISC6_bit+0) 
;__Lib_UART_c67b67.c,33 :: 		
L_UART1_Init0:
0x0316	0xAA9E      	BTFSS       PIR1, 5 
0x0318	0xD003      	BRA         L_UART1_Init1
;__Lib_UART_c67b67.c,34 :: 		
0x031A	0xF000CFAE  	MOVFF       RCREG, R0
0x031E	0xD7FB      	BRA         L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67b67.c,35 :: 		
L_end_UART1_Init:
0x0320	0x0012      	RETURN      0
; end of _UART1_Init
_UART2_Init:
;__Lib_UART_c67b67.c,117 :: 		
;__Lib_UART_c67b67.c,120 :: 		
0x0322	0x0EFA      	MOVLW       _UART2_Write
0x0324	0x0100      	MOVLB       0
0x0326	0x6F93      	MOVWF       _UART_Wr_Ptr, 1
0x0328	0x0E03      	MOVLW       hi_addr(_UART2_Write)
0x032A	0x6F94      	MOVWF       _UART_Wr_Ptr+1, 1
0x032C	0x0EA5      	MOVLW       FARG_UART2_Write_data_
0x032E	0x6F95      	MOVWF       _UART_Wr_Ptr+2, 1
0x0330	0x0E00      	MOVLW       hi_addr(FARG_UART2_Write_data_)
0x0332	0x6F96      	MOVWF       _UART_Wr_Ptr+3, 1
;__Lib_UART_c67b67.c,121 :: 		
0x0334	0x0EFF      	MOVLW       _UART2_Read
0x0336	0x6F65      	MOVWF       _UART_Rd_Ptr, 1
0x0338	0x0EFF      	MOVLW       hi_addr(_UART2_Read)
0x033A	0x6F66      	MOVWF       _UART_Rd_Ptr+1, 1
0x033C	0x0E00      	MOVLW       0
0x033E	0x6F67      	MOVWF       _UART_Rd_Ptr+2, 1
0x0340	0x0E00      	MOVLW       0
0x0342	0x6F68      	MOVWF       _UART_Rd_Ptr+3, 1
;__Lib_UART_c67b67.c,122 :: 		
0x0344	0x0EFF      	MOVLW       _UART2_Data_Ready
0x0346	0x6F69      	MOVWF       _UART_Rdy_Ptr, 1
0x0348	0x0EFF      	MOVLW       hi_addr(_UART2_Data_Ready)
0x034A	0x6F6A      	MOVWF       _UART_Rdy_Ptr+1, 1
0x034C	0x0E00      	MOVLW       0
0x034E	0x6F6B      	MOVWF       _UART_Rdy_Ptr+2, 1
0x0350	0x0E00      	MOVLW       0
0x0352	0x6F6C      	MOVWF       _UART_Rdy_Ptr+3, 1
;__Lib_UART_c67b67.c,123 :: 		
0x0354	0x0EF0      	MOVLW       _UART2_Tx_Idle
0x0356	0x6F61      	MOVWF       _UART_Tx_Idle_Ptr, 1
0x0358	0x0E03      	MOVLW       hi_addr(_UART2_Tx_Idle)
0x035A	0x6F62      	MOVWF       _UART_Tx_Idle_Ptr+1, 1
0x035C	0x0E00      	MOVLW       0
0x035E	0x6F63      	MOVWF       _UART_Tx_Idle_Ptr+2, 1
0x0360	0x0E00      	MOVLW       0
0x0362	0x6F64      	MOVWF       _UART_Tx_Idle_Ptr+3, 1
;__Lib_UART_c67b67.c,125 :: 		
0x0364	0x8A72      	BSF         TXSTA2, 5 
;__Lib_UART_c67b67.c,126 :: 		
0x0366	0x0E90      	MOVLW       144
0x0368	0x6E71      	MOVWF       RCSTA2 
;__Lib_UART_c67b67.c,127 :: 		
0x036A	0x8E93      	BSF         TRISB7_bit, BitPos(TRISB7_bit+0) 
;__Lib_UART_c67b67.c,128 :: 		
0x036C	0x9C93      	BCF         TRISB6_bit, BitPos(TRISB6_bit+0) 
;__Lib_UART_c67b67.c,130 :: 		
L_UART2_Init16:
0x036E	0xAAA4      	BTFSS       RC2IF_bit, BitPos(RC2IF_bit+0) 
0x0370	0xD003      	BRA         L_UART2_Init17
;__Lib_UART_c67b67.c,131 :: 		
0x0372	0xF000CF74  	MOVFF       RCREG2, R0
0x0376	0xD7FB      	BRA         L_UART2_Init16
L_UART2_Init17:
;__Lib_UART_c67b67.c,132 :: 		
L_end_UART2_Init:
0x0378	0x0012      	RETURN      0
; end of _UART2_Init
_UART1_Tx_Idle:
;__Lib_UART_c67b67.c,57 :: 		
;__Lib_UART_c67b67.c,58 :: 		
0x037A	0x0E00      	MOVLW       0
0x037C	0xB2AC      	BTFSC       TXSTA, 1 
0x037E	0x0E01      	MOVLW       1
0x0380	0x6E00      	MOVWF       R0 
;__Lib_UART_c67b67.c,59 :: 		
L_end_UART1_Tx_Idle:
0x0382	0x0012      	RETURN      0
; end of _UART1_Tx_Idle
_SPI1_Init_Advanced:
;__Lib_SPI_c345b123.c,43 :: 		
;__Lib_SPI_c345b123.c,44 :: 		
0x0384	0x9AC6      	BCF         SSP1CON1, 5 
;__Lib_SPI_c345b123.c,45 :: 		
0x0386	0x0EFF      	MOVLW       _SPI1_Read
0x0388	0x0100      	MOVLB       0
0x038A	0x6F8B      	MOVWF       _SPI_Rd_Ptr, 1
0x038C	0x0EFF      	MOVLW       hi_addr(_SPI1_Read)
0x038E	0x6F8C      	MOVWF       _SPI_Rd_Ptr+1, 1
0x0390	0x0EFF      	MOVLW       FARG_SPI1_Read_buffer
0x0392	0x6F8D      	MOVWF       _SPI_Rd_Ptr+2, 1
0x0394	0x0EFF      	MOVLW       hi_addr(FARG_SPI1_Read_buffer)
0x0396	0x6F8E      	MOVWF       _SPI_Rd_Ptr+3, 1
;__Lib_SPI_c345b123.c,46 :: 		
0x0398	0x0EFF      	MOVLW       _SPI1_Write
0x039A	0x6F8F      	MOVWF       _SPI_Wr_Ptr, 1
0x039C	0x0EFF      	MOVLW       hi_addr(_SPI1_Write)
0x039E	0x6F90      	MOVWF       _SPI_Wr_Ptr+1, 1
0x03A0	0x0EFF      	MOVLW       FARG_SPI1_Write_data_
0x03A2	0x6F91      	MOVWF       _SPI_Wr_Ptr+2, 1
0x03A4	0x0EFF      	MOVLW       hi_addr(FARG_SPI1_Write_data_)
0x03A6	0x6F92      	MOVWF       _SPI_Wr_Ptr+3, 1
;__Lib_SPI_c345b123.c,48 :: 		
0x03A8	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;__Lib_SPI_c345b123.c,49 :: 		
0x03AA	0x5197      	MOVF        FARG_SPI1_Init_Advanced_master, 0, 1
0x03AC	0x0A04      	XORLW       4
0x03AE	0xE102      	BNZ         L_SPI1_Init_Advanced0
0x03B0	0x8694      	BSF         TRISC3_bit, BitPos(TRISC3_bit+0) 
0x03B2	0xD001      	BRA         L_SPI1_Init_Advanced1
L_SPI1_Init_Advanced0:
;__Lib_SPI_c345b123.c,50 :: 		
0x03B4	0x9694      	BCF         TRISC3_bit, BitPos(TRISC3_bit+0) 
L_SPI1_Init_Advanced1:
;__Lib_SPI_c345b123.c,51 :: 		
0x03B6	0x8894      	BSF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;__Lib_SPI_c345b123.c,53 :: 		
0x03B8	0x6AC6      	CLRF        SSP1CON1 
;__Lib_SPI_c345b123.c,54 :: 		
0x03BA	0x9CC7      	BCF         SSP1STAT, 6 
;__Lib_SPI_c345b123.c,55 :: 		
0x03BC	0x9EC7      	BCF         SSP1STAT, 7 
;__Lib_SPI_c345b123.c,56 :: 		
0x03BE	0x5197      	MOVF        FARG_SPI1_Init_Advanced_master, 0, 1
0x03C0	0x12C6      	IORWF       SSP1CON1, 1 
;__Lib_SPI_c345b123.c,57 :: 		
0x03C2	0x5199      	MOVF        FARG_SPI1_Init_Advanced_clock_idle, 0, 1
0x03C4	0x12C6      	IORWF       SSP1CON1, 1 
;__Lib_SPI_c345b123.c,58 :: 		
0x03C6	0x5198      	MOVF        FARG_SPI1_Init_Advanced_data_sample, 0, 1
0x03C8	0x12C7      	IORWF       SSP1STAT, 1 
;__Lib_SPI_c345b123.c,60 :: 		
0x03CA	0x5399      	MOVF        FARG_SPI1_Init_Advanced_clock_idle, 1, 1
0x03CC	0xE005      	BZ          L_SPI1_Init_Advanced2
;__Lib_SPI_c345b123.c,61 :: 		
0x03CE	0x519A      	MOVF        FARG_SPI1_Init_Advanced_transmit_edge, 0, 1
0x03D0	0x0A00      	XORLW       0
0x03D2	0xB4D8      	BTFSC       STATUS, 2 
;__Lib_SPI_c345b123.c,62 :: 		
0x03D4	0x8CC7      	BSF         SSP1STAT, 6 
L_SPI1_Init_Advanced3:
;__Lib_SPI_c345b123.c,63 :: 		
0x03D6	0xD003      	BRA         L_SPI1_Init_Advanced4
L_SPI1_Init_Advanced2:
;__Lib_SPI_c345b123.c,65 :: 		
0x03D8	0x539A      	MOVF        FARG_SPI1_Init_Advanced_transmit_edge, 1, 1
0x03DA	0xA4D8      	BTFSS       STATUS, 2 
;__Lib_SPI_c345b123.c,66 :: 		
0x03DC	0x8CC7      	BSF         SSP1STAT, 6 
L_SPI1_Init_Advanced5:
;__Lib_SPI_c345b123.c,67 :: 		
L_SPI1_Init_Advanced4:
;__Lib_SPI_c345b123.c,68 :: 		
0x03DE	0x8AC6      	BSF         SSP1CON1, 5 
;__Lib_SPI_c345b123.c,69 :: 		
L_end_SPI1_Init_Advanced:
0x03E0	0x0012      	RETURN      0
; end of _SPI1_Init_Advanced
_UART1_Write:
;__Lib_UART_c67b67.c,63 :: 		
;__Lib_UART_c67b67.c,64 :: 		
L_UART1_Write3:
0x03E2	0xB2AC      	BTFSC       TXSTA, 1 
0x03E4	0xD002      	BRA         L_UART1_Write4
;__Lib_UART_c67b67.c,65 :: 		
0x03E6	0x0000      	NOP
0x03E8	0xD7FC      	BRA         L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67b67.c,66 :: 		
0x03EA	0xFFADC0A5  	MOVFF       FARG_UART1_Write_data_, TXREG
;__Lib_UART_c67b67.c,67 :: 		
L_end_UART1_Write:
0x03EE	0x0012      	RETURN      0
; end of _UART1_Write
_UART2_Tx_Idle:
;__Lib_UART_c67b67.c,154 :: 		
;__Lib_UART_c67b67.c,155 :: 		
0x03F0	0x0E00      	MOVLW       0
0x03F2	0xB272      	BTFSC       TXSTA2, 1 
0x03F4	0x0E01      	MOVLW       1
0x03F6	0x6E00      	MOVWF       R0 
;__Lib_UART_c67b67.c,156 :: 		
L_end_UART2_Tx_Idle:
0x03F8	0x0012      	RETURN      0
; end of _UART2_Tx_Idle
_UART2_Write:
;__Lib_UART_c67b67.c,160 :: 		
;__Lib_UART_c67b67.c,161 :: 		
L_UART2_Write19:
0x03FA	0xB272      	BTFSC       TXSTA2, 1 
0x03FC	0xD001      	BRA         L_UART2_Write20
;__Lib_UART_c67b67.c,162 :: 		
0x03FE	0xD7FD      	BRA         L_UART2_Write19
L_UART2_Write20:
;__Lib_UART_c67b67.c,163 :: 		
0x0400	0xFF73C0A5  	MOVFF       FARG_UART2_Write_data_, TXREG2
;__Lib_UART_c67b67.c,164 :: 		
L_end_UART2_Write:
0x0404	0x0012      	RETURN      0
; end of _UART2_Write
_ResponderSPI:
;PruebaConfiguracion.c,180 :: 		void ResponderSPI(unsigned char *cabeceraRespuesta, unsigned char *payloadRespuesta){
;PruebaConfiguracion.c,183 :: 		tramaRespuestaSPI[0] = cabeceraRespuesta[0];
0x0406	0xFFE9C09B  	MOVFF       FARG_ResponderSPI_cabeceraRespuesta, FSR0L
0x040A	0xFFEAC09C  	MOVFF       FARG_ResponderSPI_cabeceraRespuesta+1, FSR0H
0x040E	0xF037CFEE  	MOVFF       POSTINC0, _tramaRespuestaSPI
;PruebaConfiguracion.c,184 :: 		tramaRespuestaSPI[1] = cabeceraRespuesta[1];
0x0412	0x0E01      	MOVLW       1
0x0414	0x0100      	MOVLB       0
0x0416	0x259B      	ADDWF       FARG_ResponderSPI_cabeceraRespuesta, 0, 1
0x0418	0x6EE9      	MOVWF       FSR0L 
0x041A	0x0E00      	MOVLW       0
0x041C	0x219C      	ADDWFC      FARG_ResponderSPI_cabeceraRespuesta+1, 0, 1
0x041E	0x6EEA      	MOVWF       FSR0H 
0x0420	0xF038CFEE  	MOVFF       POSTINC0, _tramaRespuestaSPI+1
;PruebaConfiguracion.c,185 :: 		tramaRespuestaSPI[2] = cabeceraRespuesta[2];
0x0424	0x0E02      	MOVLW       2
0x0426	0x259B      	ADDWF       FARG_ResponderSPI_cabeceraRespuesta, 0, 1
0x0428	0x6EE9      	MOVWF       FSR0L 
0x042A	0x0E00      	MOVLW       0
0x042C	0x219C      	ADDWFC      FARG_ResponderSPI_cabeceraRespuesta+1, 0, 1
0x042E	0x6EEA      	MOVWF       FSR0H 
0x0430	0xF039CFEE  	MOVFF       POSTINC0, _tramaRespuestaSPI+2
;PruebaConfiguracion.c,186 :: 		tramaRespuestaSPI[3] = cabeceraRespuesta[3];
0x0434	0x0E03      	MOVLW       3
0x0436	0x259B      	ADDWF       FARG_ResponderSPI_cabeceraRespuesta, 0, 1
0x0438	0x6EE9      	MOVWF       FSR0L 
0x043A	0x0E00      	MOVLW       0
0x043C	0x219C      	ADDWFC      FARG_ResponderSPI_cabeceraRespuesta+1, 0, 1
0x043E	0x6EEA      	MOVWF       FSR0H 
0x0440	0xF03ACFEE  	MOVFF       POSTINC0, _tramaRespuestaSPI+3
;PruebaConfiguracion.c,189 :: 		for (j=0;j<(cabeceraRespuesta[3]);j++){
0x0444	0x6A32      	CLRF        _j 
0x0446	0x6A33      	CLRF        _j+1 
L_ResponderSPI19:
0x0448	0x0E03      	MOVLW       3
0x044A	0x259B      	ADDWF       FARG_ResponderSPI_cabeceraRespuesta, 0, 1
0x044C	0x6ED9      	MOVWF       FSR2L 
0x044E	0x0E00      	MOVLW       0
0x0450	0x219C      	ADDWFC      FARG_ResponderSPI_cabeceraRespuesta+1, 0, 1
0x0452	0x6EDA      	MOVWF       FSR2H 
0x0454	0xF001CFDE  	MOVFF       POSTINC2, R1
0x0458	0x0E00      	MOVLW       0
0x045A	0x5C33      	SUBWF       _j+1, 0 
0x045C	0xE102      	BNZ         L__ResponderSPI84
0x045E	0x5001      	MOVF        R1, 0 
0x0460	0x5C32      	SUBWF       _j, 0 
L__ResponderSPI84:
0x0462	0xE217      	BC          L_ResponderSPI20
;PruebaConfiguracion.c,190 :: 		tramaRespuestaSPI[j+4] = payloadRespuesta[j];
0x0464	0x0E04      	MOVLW       4
0x0466	0x2432      	ADDWF       _j, 0 
0x0468	0x6E00      	MOVWF       R0 
0x046A	0x0E00      	MOVLW       0
0x046C	0x2033      	ADDWFC      _j+1, 0 
0x046E	0x6E01      	MOVWF       R1 
0x0470	0x0E37      	MOVLW       _tramaRespuestaSPI
0x0472	0x2400      	ADDWF       R0, 0 
0x0474	0x6EE1      	MOVWF       FSR1L 
0x0476	0x0E00      	MOVLW       hi_addr(_tramaRespuestaSPI)
0x0478	0x2001      	ADDWFC      R1, 0 
0x047A	0x6EE2      	MOVWF       FSR1H 
0x047C	0x5032      	MOVF        _j, 0 
0x047E	0x259D      	ADDWF       FARG_ResponderSPI_payloadRespuesta, 0, 1
0x0480	0x6EE9      	MOVWF       FSR0L 
0x0482	0x5033      	MOVF        _j+1, 0 
0x0484	0x219E      	ADDWFC      FARG_ResponderSPI_payloadRespuesta+1, 0, 1
0x0486	0x6EEA      	MOVWF       FSR0H 
0x0488	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;PruebaConfiguracion.c,189 :: 		for (j=0;j<(cabeceraRespuesta[3]);j++){
0x048C	0x4A32      	INFSNZ      _j, 1 
0x048E	0x2A33      	INCF        _j+1, 1 
;PruebaConfiguracion.c,191 :: 		}
0x0490	0xD7DB      	BRA         L_ResponderSPI19
L_ResponderSPI20:
;PruebaConfiguracion.c,194 :: 		RP0 = 1;
0x0492	0x808B      	BSF         LATC0_bit, BitPos(LATC0_bit+0) 
;PruebaConfiguracion.c,195 :: 		Delay_us(100);
0x0494	0x0E85      	MOVLW       133
0x0496	0x6E0D      	MOVWF       R13, 0
L_ResponderSPI22:
0x0498	0x2E0D      	DECFSZ      R13, 1, 0
0x049A	0xD7FE      	BRA         L_ResponderSPI22
;PruebaConfiguracion.c,196 :: 		RP0 = 0;
0x049C	0x908B      	BCF         LATC0_bit, BitPos(LATC0_bit+0) 
;PruebaConfiguracion.c,198 :: 		}
L_end_ResponderSPI:
0x049E	0x0012      	RETURN      0
; end of _ResponderSPI
_UART1_Read:
;__Lib_UART_c67b67.c,44 :: 		
;__Lib_UART_c67b67.c,47 :: 		
0x04A0	0xF001CFAE  	MOVFF       RCREG, R1
;__Lib_UART_c67b67.c,48 :: 		
0x04A4	0xA2AB      	BTFSS       RCSTA, 1 
0x04A6	0xD002      	BRA         L_UART1_Read2
;__Lib_UART_c67b67.c,49 :: 		
0x04A8	0x98AB      	BCF         RCSTA, 4 
;__Lib_UART_c67b67.c,50 :: 		
0x04AA	0x88AB      	BSF         RCSTA, 4 
;__Lib_UART_c67b67.c,51 :: 		
L_UART1_Read2:
;__Lib_UART_c67b67.c,52 :: 		
0x04AC	0xF000C001  	MOVFF       R1, R0
;__Lib_UART_c67b67.c,53 :: 		
L_end_UART1_Read:
0x04B0	0x0012      	RETURN      0
; end of _UART1_Read
_ConfiguracionPrincipal:
;PruebaConfiguracion.c,105 :: 		void ConfiguracionPrincipal(){
;PruebaConfiguracion.c,108 :: 		OSCCON.IDLEN=1;                                    //Entra en modo IDLE durante la instruccion SLEEP
0x04B2	0x8ED3      	BSF         OSCCON, 7 
;PruebaConfiguracion.c,109 :: 		OSCCON.IRCF2=1;                                    //HFINTOSC=16MHz  IRFC=111
0x04B4	0x8CD3      	BSF         OSCCON, 6 
;PruebaConfiguracion.c,110 :: 		OSCCON.IRCF1=1;
0x04B6	0x8AD3      	BSF         OSCCON, 5 
;PruebaConfiguracion.c,111 :: 		OSCCON.IRCF0=1;
0x04B8	0x88D3      	BSF         OSCCON, 4 
;PruebaConfiguracion.c,112 :: 		OSCCON.SCS1=1;                                     //System Clock Select bit:  1x=Internal oscillator block
0x04BA	0x82D3      	BSF         OSCCON, 1 
;PruebaConfiguracion.c,113 :: 		OSCCON.SCS0=1;
0x04BC	0x80D3      	BSF         OSCCON, 0 
;PruebaConfiguracion.c,116 :: 		ANSELA = 0;                                        //Configura PORTA como digital
0x04BE	0x010F      	MOVLB       15
0x04C0	0x6B38      	CLRF        ANSELA, 1
;PruebaConfiguracion.c,117 :: 		ANSELB = 0;                                        //Configura PORTB como digital
0x04C2	0x6B39      	CLRF        ANSELB, 1
;PruebaConfiguracion.c,118 :: 		ANSELC = 0;                                        //Configura PORTC como digital
0x04C4	0x6B3A      	CLRF        ANSELC, 1
;PruebaConfiguracion.c,120 :: 		TEST_Direction = 0;                                //Configura el pin TEST como salida
0x04C6	0x9493      	BCF         TRISB2_bit, BitPos(TRISB2_bit+0) 
;PruebaConfiguracion.c,121 :: 		RP0_Direction = 0;                                 //Configura el pin RP0 como salida
0x04C8	0x9094      	BCF         TRISC0_bit, BitPos(TRISC0_bit+0) 
;PruebaConfiguracion.c,122 :: 		MS1RS485_Direction = 0;                            //Configura el pin MS1RS485 como salida
0x04CA	0x9693      	BCF         TRISB3_bit, BitPos(TRISB3_bit+0) 
;PruebaConfiguracion.c,123 :: 		MS2RS485_Direction = 0;                            //Configura el pin MS2RS485 como salida
0x04CC	0x9A93      	BCF         TRISB5_bit, BitPos(TRISB5_bit+0) 
;PruebaConfiguracion.c,124 :: 		TRISA5_bit = 1;                                    //SS1 In
0x04CE	0x8A92      	BSF         TRISA5_bit, BitPos(TRISA5_bit+0) 
;PruebaConfiguracion.c,125 :: 		TRISC3_bit = 1;                                    //SCK1 In
0x04D0	0x8694      	BSF         TRISC3_bit, BitPos(TRISC3_bit+0) 
;PruebaConfiguracion.c,126 :: 		TRISC4_bit = 1;                                    //SDI1 In
0x04D2	0x8894      	BSF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;PruebaConfiguracion.c,127 :: 		TRISC5_bit = 0;                                    //SDO1 Out
0x04D4	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;PruebaConfiguracion.c,129 :: 		INTCON.GIE = 1;                                    //Habilita las interrupciones globales
0x04D6	0x8EF2      	BSF         INTCON, 7 
;PruebaConfiguracion.c,130 :: 		INTCON.PEIE = 1;                                   //Habilita las interrupciones perifericas
0x04D8	0x8CF2      	BSF         INTCON, 6 
;PruebaConfiguracion.c,133 :: 		PIE1.SSP1IE = 1;                                   //Activa la interrupcion por SPI
0x04DA	0x869D      	BSF         PIE1, 3 
;PruebaConfiguracion.c,134 :: 		PIR1.SSP1IF = 0;                                   //Limpia la bandera de interrupcion por SPI *
0x04DC	0x969E      	BCF         PIR1, 3 
;PruebaConfiguracion.c,135 :: 		SPI1_Init_Advanced(_SPI_SLAVE_SS_ENABLE, _SPI_DATA_SAMPLE_END, _SPI_CLK_IDLE_HIGH, _SPI_HIGH_2_LOW);
0x04DE	0x0E04      	MOVLW       4
0x04E0	0x0100      	MOVLB       0
0x04E2	0x6F97      	MOVWF       FARG_SPI1_Init_Advanced_master, 1
0x04E4	0x0E80      	MOVLW       128
0x04E6	0x6F98      	MOVWF       FARG_SPI1_Init_Advanced_data_sample, 1
0x04E8	0x0E10      	MOVLW       16
0x04EA	0x6F99      	MOVWF       FARG_SPI1_Init_Advanced_clock_idle, 1
0x04EC	0x6B9A      	CLRF        FARG_SPI1_Init_Advanced_transmit_edge, 1
0x04EE	0xDF4A      	RCALL       _SPI1_Init_Advanced
;PruebaConfiguracion.c,138 :: 		PIE1.RC1IE = 1;                                   //Habilita la interrupcion en UART1 receive
0x04F0	0x8A9D      	BSF         PIE1, 5 
;PruebaConfiguracion.c,139 :: 		PIR1.RC1IF = 0;                                   //Limpia la bandera de interrupcion UART1
0x04F2	0x9A9E      	BCF         PIR1, 5 
;PruebaConfiguracion.c,140 :: 		PIE3.RC2IE = 1;                                   //Habilita la interrupcion en UART2 receive
0x04F4	0x8AA3      	BSF         PIE3, 5 
;PruebaConfiguracion.c,141 :: 		PIR3.RC2IF = 0;                                   //Limpia la bandera de interrupcion
0x04F6	0x9AA4      	BCF         PIR3, 5 
;PruebaConfiguracion.c,142 :: 		UART1_Init(19200);                                //Inicializa el UART1 a 19200 bps
0x04F8	0x86B8      	BSF         BAUDCON, 3, 0
0x04FA	0x6AB0      	CLRF        SPBRGH 
0x04FC	0x0ECF      	MOVLW       207
0x04FE	0x6EAF      	MOVWF       SPBRG 
0x0500	0x84AC      	BSF         TXSTA, 2, 0
0x0502	0xDEE3      	RCALL       _UART1_Init
;PruebaConfiguracion.c,143 :: 		UART2_Init(19200);                                //Inicializa el UART2 a 19200 bps
0x0504	0x8670      	BSF         BAUDCON2, 3, 0
0x0506	0x6A76      	CLRF        SPBRGH2 
0x0508	0x0ECF      	MOVLW       207
0x050A	0x6E75      	MOVWF       SPBRG2 
0x050C	0x8472      	BSF         TXSTA2, 2, 0
0x050E	0xDF09      	RCALL       _UART2_Init
;PruebaConfiguracion.c,152 :: 		Delay_ms(100);                                     //Espera hasta que se estabilicen los cambios
0x0510	0x0E03      	MOVLW       3
0x0512	0x6E0B      	MOVWF       R11, 0
0x0514	0x0E08      	MOVLW       8
0x0516	0x6E0C      	MOVWF       R12, 0
0x0518	0x0E77      	MOVLW       119
0x051A	0x6E0D      	MOVWF       R13, 0
L_ConfiguracionPrincipal12:
0x051C	0x2E0D      	DECFSZ      R13, 1, 0
0x051E	0xD7FE      	BRA         L_ConfiguracionPrincipal12
0x0520	0x2E0C      	DECFSZ      R12, 1, 0
0x0522	0xD7FC      	BRA         L_ConfiguracionPrincipal12
0x0524	0x2E0B      	DECFSZ      R11, 1, 0
0x0526	0xD7FA      	BRA         L_ConfiguracionPrincipal12
;PruebaConfiguracion.c,153 :: 		}
L_end_ConfiguracionPrincipal:
0x0528	0x0012      	RETURN      0
; end of _ConfiguracionPrincipal
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x052A	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x052C	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0530	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0532	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0534	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0536	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0538	0x0012      	RETURN      0
; end of ___CC2DW
_EnviarTramaRS485:
;rs485.c,20 :: 		void EnviarTramaRS485(unsigned short puertoUART, unsigned char *cabecera, unsigned char *payload){
;rs485.c,28 :: 		direccion = cabecera[0];
0x053A	0xFFE9C09C  	MOVFF       FARG_EnviarTramaRS485_cabecera, FSR0L
0x053E	0xFFEAC09D  	MOVFF       FARG_EnviarTramaRS485_cabecera+1, FSR0H
0x0542	0xF0A0CFEE  	MOVFF       POSTINC0, EnviarTramaRS485_direccion_L0
;rs485.c,29 :: 		funcion = cabecera[1];
0x0546	0x0E01      	MOVLW       1
0x0548	0x0100      	MOVLB       0
0x054A	0x259C      	ADDWF       FARG_EnviarTramaRS485_cabecera, 0, 1
0x054C	0x6EE9      	MOVWF       FSR0L 
0x054E	0x0E00      	MOVLW       0
0x0550	0x219D      	ADDWFC      FARG_EnviarTramaRS485_cabecera+1, 0, 1
0x0552	0x6EEA      	MOVWF       FSR0H 
0x0554	0xF0A1CFEE  	MOVFF       POSTINC0, EnviarTramaRS485_funcion_L0
;rs485.c,30 :: 		subfuncion = cabecera[2];
0x0558	0x0E02      	MOVLW       2
0x055A	0x259C      	ADDWF       FARG_EnviarTramaRS485_cabecera, 0, 1
0x055C	0x6EE9      	MOVWF       FSR0L 
0x055E	0x0E00      	MOVLW       0
0x0560	0x219D      	ADDWFC      FARG_EnviarTramaRS485_cabecera+1, 0, 1
0x0562	0x6EEA      	MOVWF       FSR0H 
0x0564	0xF0A2CFEE  	MOVFF       POSTINC0, EnviarTramaRS485_subfuncion_L0
;rs485.c,31 :: 		numDatos = cabecera[3];
0x0568	0x0E03      	MOVLW       3
0x056A	0x259C      	ADDWF       FARG_EnviarTramaRS485_cabecera, 0, 1
0x056C	0x6EE9      	MOVWF       FSR0L 
0x056E	0x0E00      	MOVLW       0
0x0570	0x219D      	ADDWFC      FARG_EnviarTramaRS485_cabecera+1, 0, 1
0x0572	0x6EEA      	MOVWF       FSR0H 
0x0574	0xF0A3CFEE  	MOVFF       POSTINC0, EnviarTramaRS485_numDatos_L0
;rs485.c,33 :: 		if (puertoUART == 1){
0x0578	0x519B      	MOVF        FARG_EnviarTramaRS485_puertoUART, 0, 1
0x057A	0x0A01      	XORLW       1
0x057C	0xE131      	BNZ         L_EnviarTramaRS4850
;rs485.c,34 :: 		MS1RS485 = 1;                                                            //Establece el Max485 en modo escritura
0x057E	0x868A      	BSF         MS1RS485, BitPos(MS1RS485+0) 
;rs485.c,35 :: 		UART1_Write(0x3A);                                                      //Envia la cabecera de la trama
0x0580	0x0E3A      	MOVLW       58
0x0582	0x6FA5      	MOVWF       FARG_UART1_Write_data_, 1
0x0584	0xDF2E      	RCALL       _UART1_Write
;rs485.c,36 :: 		UART1_Write(direccion);                                                 //Envia la direccion del destinatario
0x0586	0xF0A5C0A0  	MOVFF       EnviarTramaRS485_direccion_L0, FARG_UART1_Write_data_
0x058A	0xDF2B      	RCALL       _UART1_Write
;rs485.c,37 :: 		UART1_Write(funcion);                                                   //Envia el codigo de la funcion
0x058C	0xF0A5C0A1  	MOVFF       EnviarTramaRS485_funcion_L0, FARG_UART1_Write_data_
0x0590	0xDF28      	RCALL       _UART1_Write
;rs485.c,38 :: 		UART1_Write(subfuncion);                                                //Envia el codigo de la subfuncion
0x0592	0xF0A5C0A2  	MOVFF       EnviarTramaRS485_subfuncion_L0, FARG_UART1_Write_data_
0x0596	0xDF25      	RCALL       _UART1_Write
;rs485.c,39 :: 		UART1_Write(numDatos);                                                  //Envia el numero de datos
0x0598	0xF0A5C0A3  	MOVFF       EnviarTramaRS485_numDatos_L0, FARG_UART1_Write_data_
0x059C	0xDF22      	RCALL       _UART1_Write
;rs485.c,40 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x059E	0x0100      	MOVLB       0
0x05A0	0x6BA4      	CLRF        EnviarTramaRS485_iDatos_L0, 1
L_EnviarTramaRS4851:
0x05A2	0x51A3      	MOVF        EnviarTramaRS485_numDatos_L0, 0, 1
0x05A4	0x5DA4      	SUBWF       EnviarTramaRS485_iDatos_L0, 0, 1
0x05A6	0xE20C      	BC          L_EnviarTramaRS4852
;rs485.c,41 :: 		UART1_Write(payload[iDatos]);
0x05A8	0x51A4      	MOVF        EnviarTramaRS485_iDatos_L0, 0, 1
0x05AA	0x259E      	ADDWF       FARG_EnviarTramaRS485_payload, 0, 1
0x05AC	0x6EE9      	MOVWF       FSR0L 
0x05AE	0x0E00      	MOVLW       0
0x05B0	0x219F      	ADDWFC      FARG_EnviarTramaRS485_payload+1, 0, 1
0x05B2	0x6EEA      	MOVWF       FSR0H 
0x05B4	0xF0A5CFEE  	MOVFF       POSTINC0, FARG_UART1_Write_data_
0x05B8	0xDF14      	RCALL       _UART1_Write
;rs485.c,40 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x05BA	0x0100      	MOVLB       0
0x05BC	0x2BA4      	INCF        EnviarTramaRS485_iDatos_L0, 1, 1
;rs485.c,42 :: 		}
0x05BE	0xD7F1      	BRA         L_EnviarTramaRS4851
L_EnviarTramaRS4852:
;rs485.c,43 :: 		UART1_Write(0x0D);                                                      //Envia el primer delimitador de final de la trama
0x05C0	0x0E0D      	MOVLW       13
0x05C2	0x6FA5      	MOVWF       FARG_UART1_Write_data_, 1
0x05C4	0xDF0E      	RCALL       _UART1_Write
;rs485.c,44 :: 		UART1_Write(0x0A);                                                      //Envia el segundo delimitador de final de la trama
0x05C6	0x0E0A      	MOVLW       10
0x05C8	0x0100      	MOVLB       0
0x05CA	0x6FA5      	MOVWF       FARG_UART1_Write_data_, 1
0x05CC	0xDF0A      	RCALL       _UART1_Write
;rs485.c,45 :: 		UART1_Write(0x00);                                                      //Envia un byte adicional
0x05CE	0x0100      	MOVLB       0
0x05D0	0x6BA5      	CLRF        FARG_UART1_Write_data_, 1
0x05D2	0xDF07      	RCALL       _UART1_Write
;rs485.c,46 :: 		while(UART1_Tx_Idle()==0);                                              //Espera hasta que se haya terminado de enviar todo el dato por UART antes de continuar
L_EnviarTramaRS4854:
0x05D4	0xDED2      	RCALL       _UART1_Tx_Idle
0x05D6	0x5000      	MOVF        R0, 0 
0x05D8	0x0A00      	XORLW       0
0x05DA	0xE101      	BNZ         L_EnviarTramaRS4855
0x05DC	0xD7FB      	BRA         L_EnviarTramaRS4854
L_EnviarTramaRS4855:
;rs485.c,47 :: 		MS1RS485 = 0;                                                            //Establece el Max485 en modo lectura
0x05DE	0x968A      	BCF         MS1RS485, BitPos(MS1RS485+0) 
;rs485.c,48 :: 		}
L_EnviarTramaRS4850:
;rs485.c,50 :: 		if (puertoUART == 2){
0x05E0	0x0100      	MOVLB       0
0x05E2	0x519B      	MOVF        FARG_EnviarTramaRS485_puertoUART, 0, 1
0x05E4	0x0A02      	XORLW       2
0x05E6	0xE131      	BNZ         L_EnviarTramaRS4856
;rs485.c,51 :: 		MS2RS485 = 1;                                                            //Establece el Max485 en modo escritura
0x05E8	0x8A8A      	BSF         MS2RS485, BitPos(MS2RS485+0) 
;rs485.c,52 :: 		UART2_Write(0x3A);                                                      //Envia la cabecera de la trama
0x05EA	0x0E3A      	MOVLW       58
0x05EC	0x6FA5      	MOVWF       FARG_UART2_Write_data_, 1
0x05EE	0xDF05      	RCALL       _UART2_Write
;rs485.c,53 :: 		UART2_Write(direccion);                                                 //Envia la direccion del destinatario
0x05F0	0xF0A5C0A0  	MOVFF       EnviarTramaRS485_direccion_L0, FARG_UART2_Write_data_
0x05F4	0xDF02      	RCALL       _UART2_Write
;rs485.c,54 :: 		UART2_Write(funcion);                                                   //Envia el codigo de la funcion
0x05F6	0xF0A5C0A1  	MOVFF       EnviarTramaRS485_funcion_L0, FARG_UART2_Write_data_
0x05FA	0xDEFF      	RCALL       _UART2_Write
;rs485.c,55 :: 		UART1_Write(subfuncion);                                                //Envia el codigo de la subfuncion
0x05FC	0xF0A5C0A2  	MOVFF       EnviarTramaRS485_subfuncion_L0, FARG_UART1_Write_data_
0x0600	0xDEF0      	RCALL       _UART1_Write
;rs485.c,56 :: 		UART1_Write(numDatos);                                                  //Envia el numero de datos
0x0602	0xF0A5C0A3  	MOVFF       EnviarTramaRS485_numDatos_L0, FARG_UART1_Write_data_
0x0606	0xDEED      	RCALL       _UART1_Write
;rs485.c,57 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x0608	0x0100      	MOVLB       0
0x060A	0x6BA4      	CLRF        EnviarTramaRS485_iDatos_L0, 1
L_EnviarTramaRS4857:
0x060C	0x51A3      	MOVF        EnviarTramaRS485_numDatos_L0, 0, 1
0x060E	0x5DA4      	SUBWF       EnviarTramaRS485_iDatos_L0, 0, 1
0x0610	0xE20C      	BC          L_EnviarTramaRS4858
;rs485.c,58 :: 		UART2_Write(payload[iDatos]);
0x0612	0x51A4      	MOVF        EnviarTramaRS485_iDatos_L0, 0, 1
0x0614	0x259E      	ADDWF       FARG_EnviarTramaRS485_payload, 0, 1
0x0616	0x6EE9      	MOVWF       FSR0L 
0x0618	0x0E00      	MOVLW       0
0x061A	0x219F      	ADDWFC      FARG_EnviarTramaRS485_payload+1, 0, 1
0x061C	0x6EEA      	MOVWF       FSR0H 
0x061E	0xF0A5CFEE  	MOVFF       POSTINC0, FARG_UART2_Write_data_
0x0622	0xDEEB      	RCALL       _UART2_Write
;rs485.c,57 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x0624	0x0100      	MOVLB       0
0x0626	0x2BA4      	INCF        EnviarTramaRS485_iDatos_L0, 1, 1
;rs485.c,59 :: 		}
0x0628	0xD7F1      	BRA         L_EnviarTramaRS4857
L_EnviarTramaRS4858:
;rs485.c,60 :: 		UART2_Write(0x0D);                                                      //Envia el primer delimitador de final de la trama
0x062A	0x0E0D      	MOVLW       13
0x062C	0x6FA5      	MOVWF       FARG_UART2_Write_data_, 1
0x062E	0xDEE5      	RCALL       _UART2_Write
;rs485.c,61 :: 		UART2_Write(0x0A);                                                      //Envia el segundo delimitador de final de la trama
0x0630	0x0E0A      	MOVLW       10
0x0632	0x0100      	MOVLB       0
0x0634	0x6FA5      	MOVWF       FARG_UART2_Write_data_, 1
0x0636	0xDEE1      	RCALL       _UART2_Write
;rs485.c,62 :: 		UART2_Write(0x00);                                                      //Envia un byte adicional
0x0638	0x0100      	MOVLB       0
0x063A	0x6BA5      	CLRF        FARG_UART2_Write_data_, 1
0x063C	0xDEDE      	RCALL       _UART2_Write
;rs485.c,63 :: 		while(UART2_Tx_Idle()==0);                                              //Espera hasta que se haya terminado de enviar todo el dato por UART antes de continuar
L_EnviarTramaRS48510:
0x063E	0xDED8      	RCALL       _UART2_Tx_Idle
0x0640	0x5000      	MOVF        R0, 0 
0x0642	0x0A00      	XORLW       0
0x0644	0xE101      	BNZ         L_EnviarTramaRS48511
0x0646	0xD7FB      	BRA         L_EnviarTramaRS48510
L_EnviarTramaRS48511:
;rs485.c,64 :: 		MS2RS485 = 0;                                                            //Establece el Max485 en modo lectura
0x0648	0x9A8A      	BCF         MS2RS485, BitPos(MS2RS485+0) 
;rs485.c,65 :: 		}
L_EnviarTramaRS4856:
;rs485.c,67 :: 		}
L_end_EnviarTramaRS485:
0x064A	0x0012      	RETURN      0
; end of _EnviarTramaRS485
_CambiarEstadoBandera:
;PruebaConfiguracion.c,156 :: 		void CambiarEstadoBandera(unsigned short bandera, unsigned short estado){
;PruebaConfiguracion.c,158 :: 		if (estado==1){
0x064C	0x0100      	MOVLB       0
0x064E	0x519C      	MOVF        FARG_CambiarEstadoBandera_estado, 0, 1
0x0650	0x0A01      	XORLW       1
0x0652	0xE111      	BNZ         L_CambiarEstadoBandera13
;PruebaConfiguracion.c,160 :: 		banSPI0 = 3;
0x0654	0x0E03      	MOVLW       3
0x0656	0x6E36      	MOVWF       _banSPI0 
;PruebaConfiguracion.c,161 :: 		banSPI1 = 3;
0x0658	0x0E03      	MOVLW       3
0x065A	0x6E35      	MOVWF       _banSPI1 
;PruebaConfiguracion.c,163 :: 		switch (bandera){
0x065C	0xD006      	BRA         L_CambiarEstadoBandera14
;PruebaConfiguracion.c,164 :: 		case 0:
L_CambiarEstadoBandera16:
;PruebaConfiguracion.c,165 :: 		banSPI0 = 1;
0x065E	0x0E01      	MOVLW       1
0x0660	0x6E36      	MOVWF       _banSPI0 
;PruebaConfiguracion.c,166 :: 		break;
0x0662	0xD009      	BRA         L_CambiarEstadoBandera15
;PruebaConfiguracion.c,167 :: 		case 1:
L_CambiarEstadoBandera17:
;PruebaConfiguracion.c,168 :: 		banSPI1 = 1;
0x0664	0x0E01      	MOVLW       1
0x0666	0x6E35      	MOVWF       _banSPI1 
;PruebaConfiguracion.c,169 :: 		break;
0x0668	0xD006      	BRA         L_CambiarEstadoBandera15
;PruebaConfiguracion.c,170 :: 		}
L_CambiarEstadoBandera14:
0x066A	0x519B      	MOVF        FARG_CambiarEstadoBandera_bandera, 0, 1
0x066C	0x0A00      	XORLW       0
0x066E	0xE0F7      	BZ          L_CambiarEstadoBandera16
0x0670	0x519B      	MOVF        FARG_CambiarEstadoBandera_bandera, 0, 1
0x0672	0x0A01      	XORLW       1
0x0674	0xE0F7      	BZ          L_CambiarEstadoBandera17
L_CambiarEstadoBandera15:
;PruebaConfiguracion.c,171 :: 		}
L_CambiarEstadoBandera13:
;PruebaConfiguracion.c,173 :: 		if (estado==0){
0x0676	0x519C      	MOVF        FARG_CambiarEstadoBandera_estado, 0, 1
0x0678	0x0A00      	XORLW       0
0x067A	0xE102      	BNZ         L_CambiarEstadoBandera18
;PruebaConfiguracion.c,174 :: 		banSPI0 = 0;
0x067C	0x6A36      	CLRF        _banSPI0 
;PruebaConfiguracion.c,175 :: 		banSPI1 = 0;
0x067E	0x6A35      	CLRF        _banSPI1 
;PruebaConfiguracion.c,176 :: 		}
L_CambiarEstadoBandera18:
;PruebaConfiguracion.c,177 :: 		}
L_end_CambiarEstadoBandera:
0x0680	0x0012      	RETURN      0
; end of _CambiarEstadoBandera
_main:
0x0682	0x0EA0      	MOVLW       160
0x0684	0x6E18      	MOVWF       _tramaPruebaSPI 
0x0686	0x0EA1      	MOVLW       161
0x0688	0x6E19      	MOVWF       25 
0x068A	0x0EA2      	MOVLW       162
0x068C	0x6E1A      	MOVWF       26 
0x068E	0x0EA3      	MOVLW       163
0x0690	0x6E1B      	MOVWF       27 
0x0692	0x0EA4      	MOVLW       164
0x0694	0x6E1C      	MOVWF       28 
0x0696	0x0EA5      	MOVLW       165
0x0698	0x6E1D      	MOVWF       29 
0x069A	0x0EA6      	MOVLW       166
0x069C	0x6E1E      	MOVWF       30 
0x069E	0x0EA7      	MOVLW       167
0x06A0	0x6E1F      	MOVWF       31 
0x06A2	0x0EA8      	MOVLW       168
0x06A4	0x6E20      	MOVWF       32 
0x06A6	0x0EA9      	MOVLW       169
0x06A8	0x6E21      	MOVWF       33 
;PruebaConfiguracion.c,63 :: 		void main() {
;PruebaConfiguracion.c,66 :: 		ConfiguracionPrincipal();
0x06AA	0xDF03      	RCALL       _ConfiguracionPrincipal
;PruebaConfiguracion.c,70 :: 		i = 0;
0x06AC	0x6A30      	CLRF        _i 
0x06AE	0x6A31      	CLRF        _i+1 
;PruebaConfiguracion.c,71 :: 		j = 0;
0x06B0	0x6A32      	CLRF        _j 
0x06B2	0x6A33      	CLRF        _j+1 
;PruebaConfiguracion.c,72 :: 		x = 0;
0x06B4	0x6A2E      	CLRF        _x 
0x06B6	0x6A2F      	CLRF        _x+1 
;PruebaConfiguracion.c,73 :: 		y = 0;
0x06B8	0x6A2C      	CLRF        _y 
0x06BA	0x6A2D      	CLRF        _y+1 
;PruebaConfiguracion.c,75 :: 		banSPI0 = 0;
0x06BC	0x6A36      	CLRF        _banSPI0 
;PruebaConfiguracion.c,76 :: 		banSPI1 = 0;
0x06BE	0x6A35      	CLRF        _banSPI1 
;PruebaConfiguracion.c,77 :: 		bufferSPI = 0;
0x06C0	0x6A34      	CLRF        _bufferSPI 
;PruebaConfiguracion.c,78 :: 		idSolicitud = 0;
0x06C2	0x6A25      	CLRF        _idSolicitud 
;PruebaConfiguracion.c,79 :: 		funcionSolicitud = 0;
0x06C4	0x6A24      	CLRF        _funcionSolicitud 
;PruebaConfiguracion.c,80 :: 		subFuncionSolicitud = 0;
0x06C6	0x6A22      	CLRF        _subFuncionSolicitud 
;PruebaConfiguracion.c,82 :: 		banRSI = 0;
0x06C8	0x6A23      	CLRF        _banRSI 
;PruebaConfiguracion.c,83 :: 		banRSC = 0;
0x06CA	0x6A2A      	CLRF        _banRSC 
;PruebaConfiguracion.c,84 :: 		byteRS485 = 0;
0x06CC	0x6A2B      	CLRF        _byteRS485 
;PruebaConfiguracion.c,85 :: 		i_rs485 = 0;
0x06CE	0x6A28      	CLRF        _i_rs485 
0x06D0	0x6A29      	CLRF        _i_rs485+1 
;PruebaConfiguracion.c,86 :: 		funcionRS485 = 0;
0x06D2	0x6A26      	CLRF        _funcionRS485 
;PruebaConfiguracion.c,87 :: 		subFuncionRS485 = 0;
0x06D4	0x6A27      	CLRF        _subFuncionRS485 
;PruebaConfiguracion.c,88 :: 		numDatosRS485 = 0;
0x06D6	0x6A5F      	CLRF        _numDatosRS485 
;PruebaConfiguracion.c,89 :: 		MS1RS485 = 0;
0x06D8	0x968A      	BCF         LATB3_bit, BitPos(LATB3_bit+0) 
;PruebaConfiguracion.c,90 :: 		MS2RS485 = 0;
0x06DA	0x9A8A      	BCF         LATB5_bit, BitPos(LATB5_bit+0) 
;PruebaConfiguracion.c,91 :: 		sumValidacion = 0;
0x06DC	0x6B60      	CLRF        _sumValidacion, 1
;PruebaConfiguracion.c,93 :: 		RP0 = 0;
0x06DE	0x908B      	BCF         LATC0_bit, BitPos(LATC0_bit+0) 
;PruebaConfiguracion.c,94 :: 		TEST = 1;
0x06E0	0x8481      	BSF         RB2_bit, BitPos(RB2_bit+0) 
;PruebaConfiguracion.c,95 :: 		MS1RS485 = 0;
0x06E2	0x968A      	BCF         LATB3_bit, BitPos(LATB3_bit+0) 
;PruebaConfiguracion.c,96 :: 		MS2RS485 = 0;
0x06E4	0x9A8A      	BCF         LATB5_bit, BitPos(LATB5_bit+0) 
;PruebaConfiguracion.c,98 :: 		}
L_end_main:
0x06E6	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [706]    _interrupt
0x02CA      [88]    _UART1_Init
0x0322      [88]    _UART2_Init
0x037A      [10]    _UART1_Tx_Idle
0x0384      [94]    _SPI1_Init_Advanced
0x03E2      [14]    _UART1_Write
0x03F0      [10]    _UART2_Tx_Idle
0x03FA      [12]    _UART2_Write
0x0406     [154]    _ResponderSPI
0x04A0      [18]    _UART1_Read
0x04B2     [120]    _ConfiguracionPrincipal
0x052A      [16]    ___CC2DW
0x053A     [274]    _EnviarTramaRS485
0x064C      [54]    _CambiarEstadoBandera
0x0682     [102]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    UART2_Init_tmp_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    SPI2_Write_tmp_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    R0
0x0001       [1]    R1
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    UART2_Read___tmp_UART2_Read_L0
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0018      [10]    _tramaPruebaSPI
0x0022       [1]    _subFuncionSolicitud
0x0023       [1]    _banRSI
0x0024       [1]    _funcionSolicitud
0x0025       [1]    _idSolicitud
0x0026       [1]    _funcionRS485
0x0027       [1]    _subFuncionRS485
0x0028       [2]    _i_rs485
0x002A       [1]    _banRSC
0x002B       [1]    _byteRS485
0x002C       [2]    _y
0x002E       [2]    _x
0x0030       [2]    _i
0x0032       [2]    _j
0x0034       [1]    _bufferSPI
0x0035       [1]    _banSPI1
0x0036       [1]    _banSPI0
0x0037      [20]    _tramaRespuestaSPI
0x004B      [20]    _tramaSolicitudSPI
0x005F       [1]    _numDatosRS485
0x0060       [1]    _sumValidacion
0x0061       [4]    _UART_Tx_Idle_Ptr
0x0065       [4]    _UART_Rd_Ptr
0x0069       [4]    _UART_Rdy_Ptr
0x006D      [15]    _inputPyloadRS485
0x007C       [5]    _tramaCabeceraRS485
0x0081       [5]    _cabeceraSolicitud
0x0086       [5]    _payloadSolicitud
0x008B       [4]    _SPI_Rd_Ptr
0x008F       [4]    _SPI_Wr_Ptr
0x0093       [4]    _UART_Wr_Ptr
0x0097       [1]    FARG_SPI1_Init_Advanced_master
0x0098       [1]    FARG_SPI1_Init_Advanced_data_sample
0x0099       [1]    FARG_SPI1_Init_Advanced_clock_idle
0x009A       [1]    FARG_SPI1_Init_Advanced_transmit_edge
0x009B       [1]    FARG_CambiarEstadoBandera_bandera
0x009B       [2]    FARG_ResponderSPI_cabeceraRespuesta
0x009B       [1]    FARG_EnviarTramaRS485_puertoUART
0x009C       [1]    FARG_CambiarEstadoBandera_estado
0x009C       [2]    FARG_EnviarTramaRS485_cabecera
0x009D       [2]    FARG_ResponderSPI_payloadRespuesta
0x009E       [2]    FARG_EnviarTramaRS485_payload
0x00A0       [1]    EnviarTramaRS485_direccion_L0
0x00A1       [1]    EnviarTramaRS485_funcion_L0
0x00A2       [1]    EnviarTramaRS485_subfuncion_L0
0x00A3       [1]    EnviarTramaRS485_numDatos_L0
0x00A4       [1]    EnviarTramaRS485_iDatos_L0
0x00A5       [1]    FARG_UART2_Write_data_
0x00A5       [1]    FARG_UART1_Write_data_
0x0F38       [1]    ANSELA
0x0F39       [1]    ANSELB
0x0F3A       [1]    ANSELC
0x0F70       [1]    BAUDCON2
0x0F71       [1]    RCSTA2
0x0F72       [1]    TXSTA2
0x0F73       [1]    TXREG2
0x0F74       [1]    RCREG2
0x0F75       [1]    SPBRG2
0x0F76       [1]    SPBRGH2
0x0F81       [0]    TEST
0x0F81       [0]    RB2_bit
0x0F8A       [0]    LATB3_bit
0x0F8A       [0]    LATB5_bit
0x0F8A       [0]    MS2RS485
0x0F8A       [0]    MS1RS485
0x0F8B       [0]    RP0
0x0F8B       [0]    LATC0_bit
0x0F92       [0]    TRISA5_bit
0x0F93       [0]    TRISB3_bit
0x0F93       [0]    TRISB2_bit
0x0F93       [0]    TRISB6_bit
0x0F93       [0]    TRISB5_bit
0x0F93       [0]    TEST_Direction
0x0F93       [0]    MS1RS485_Direction
0x0F93       [0]    MS2RS485_Direction
0x0F93       [0]    TRISB7_bit
0x0F94       [0]    TRISC3_bit
0x0F94       [0]    TRISC5_bit
0x0F94       [0]    TRISC4_bit
0x0F94       [0]    RP0_Direction
0x0F94       [0]    TRISC0_bit
0x0F94       [0]    TRISC7_bit
0x0F94       [0]    TRISC6_bit
0x0F9D       [1]    PIE1
0x0F9E       [1]    PIR1
0x0F9E       [0]    SSP1IF_bit
0x0F9E       [0]    RC1IF_bit
0x0FA3       [1]    PIE3
0x0FA4       [1]    PIR3
0x0FA4       [0]    RC2IF_bit
0x0FAB       [1]    RCSTA
0x0FAC       [1]    TXSTA
0x0FAD       [1]    TXREG
0x0FAE       [1]    RCREG
0x0FAF       [1]    SPBRG
0x0FB0       [1]    SPBRGH
0x0FB8       [1]    BAUDCON
0x0FC6       [1]    SSP1CON1
0x0FC7       [1]    SSP1STAT
0x0FC9       [1]    SSP1BUF
0x0FD3       [1]    OSCCON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
