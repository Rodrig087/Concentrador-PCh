;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 25/8/2021 0:31:23
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF001EF73  	GOTO        742
_interrupt:
;PruebaConfiguracion.c,175 :: 		void interrupt(void){
0x0008	0xF016C000  	MOVFF       R0, 22
0x000C	0xF015C00D  	MOVFF       R13, 21
;PruebaConfiguracion.c,191 :: 		if (SSP1IF_bit==1){
0x0010	0xA69E      	BTFSS       SSP1IF_bit, BitPos(SSP1IF_bit+0) 
0x0012	0xD0A3      	BRA         L_interrupt11
;PruebaConfiguracion.c,193 :: 		SSP1IF_bit = 0;                                                          //Limpia la bandera de interrupcion por SPI
0x0014	0x969E      	BCF         SSP1IF_bit, BitPos(SSP1IF_bit+0) 
;PruebaConfiguracion.c,194 :: 		bufferSPI = SSP1BUF;                                                     //Guarda el contenido del bufeer (lectura)
0x0016	0xF025CFC9  	MOVFF       SSP1BUF, _bufferSPI
;PruebaConfiguracion.c,197 :: 		if ((banSPI0==0)&&(bufferSPI==0xA0)) {
0x001A	0x501C      	MOVF        _banSPI0, 0 
0x001C	0x0A00      	XORLW       0
0x001E	0xE10E      	BNZ         L_interrupt14
0x0020	0x5025      	MOVF        _bufferSPI, 0 
0x0022	0x0AA0      	XORLW       160
0x0024	0xE10B      	BNZ         L_interrupt14
L__interrupt42:
;PruebaConfiguracion.c,198 :: 		CambiarEstadoBandera(0,1);                                            //Activa la bandera
0x0026	0x0100      	MOVLB       0
0x0028	0x6B6E      	CLRF        FARG_CambiarEstadoBandera_bandera, 1
0x002A	0x0E01      	MOVLW       1
0x002C	0x6F6F      	MOVWF       FARG_CambiarEstadoBandera_estado, 1
0x002E	0xD8C9      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,199 :: 		i = 1;
0x0030	0x0E01      	MOVLW       1
0x0032	0x6E1D      	MOVWF       _i 
0x0034	0x0E00      	MOVLW       0
0x0036	0x6E1E      	MOVWF       _i+1 
;PruebaConfiguracion.c,200 :: 		SSP1BUF = tramaRespuestaSPI[0];                                       //Carga en el buffer el primer elemento de la cabecera (id)
0x0038	0xFFC9C026  	MOVFF       _tramaRespuestaSPI, SSP1BUF
;PruebaConfiguracion.c,201 :: 		}
L_interrupt14:
;PruebaConfiguracion.c,202 :: 		if ((banSPI0==1)&&(bufferSPI!=0xA0)&&(bufferSPI!=0xF0)){
0x003C	0x501C      	MOVF        _banSPI0, 0 
0x003E	0x0A01      	XORLW       1
0x0040	0xE110      	BNZ         L_interrupt17
0x0042	0x5025      	MOVF        _bufferSPI, 0 
0x0044	0x0AA0      	XORLW       160
0x0046	0xE00D      	BZ          L_interrupt17
0x0048	0x5025      	MOVF        _bufferSPI, 0 
0x004A	0x0AF0      	XORLW       240
0x004C	0xE00A      	BZ          L_interrupt17
L__interrupt41:
;PruebaConfiguracion.c,203 :: 		SSP1BUF = tramaRespuestaSPI[i];                                       //Se envia la subfuncion, y el LSB y MSB de la variable numBytesSPI
0x004E	0x0E26      	MOVLW       _tramaRespuestaSPI
0x0050	0x241D      	ADDWF       _i, 0 
0x0052	0x6EE9      	MOVWF       FSR0L 
0x0054	0x0E00      	MOVLW       hi_addr(_tramaRespuestaSPI)
0x0056	0x201E      	ADDWFC      _i+1, 0 
0x0058	0x6EEA      	MOVWF       FSR0H 
0x005A	0xFFC9CFEE  	MOVFF       POSTINC0, SSP1BUF
;PruebaConfiguracion.c,204 :: 		i++;
0x005E	0x4A1D      	INFSNZ      _i, 1 
0x0060	0x2A1E      	INCF        _i+1, 1 
;PruebaConfiguracion.c,205 :: 		}
L_interrupt17:
;PruebaConfiguracion.c,206 :: 		if ((banSPI0==1)&&(bufferSPI==0xF0)){
0x0062	0x501C      	MOVF        _banSPI0, 0 
0x0064	0x0A01      	XORLW       1
0x0066	0xE107      	BNZ         L_interrupt20
0x0068	0x5025      	MOVF        _bufferSPI, 0 
0x006A	0x0AF0      	XORLW       240
0x006C	0xE104      	BNZ         L_interrupt20
L__interrupt40:
0x006E	0x0100      	MOVLB       0
;PruebaConfiguracion.c,207 :: 		CambiarEstadoBandera(0,0);                                            //Limpia las banderas
0x0070	0x6B6E      	CLRF        FARG_CambiarEstadoBandera_bandera, 1
0x0072	0x6B6F      	CLRF        FARG_CambiarEstadoBandera_estado, 1
0x0074	0xD8A6      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,208 :: 		}
L_interrupt20:
;PruebaConfiguracion.c,211 :: 		if ((banSPI1==0)&&(bufferSPI==0xA1)){
0x0076	0x5019      	MOVF        _banSPI1, 0 
0x0078	0x0A00      	XORLW       0
0x007A	0xE10B      	BNZ         L_interrupt23
0x007C	0x5025      	MOVF        _bufferSPI, 0 
0x007E	0x0AA1      	XORLW       161
0x0080	0xE108      	BNZ         L_interrupt23
L__interrupt39:
0x0082	0x0100      	MOVLB       0
;PruebaConfiguracion.c,212 :: 		i = 0;                                                                //Limpia el subindice para guardar la trama SPI
0x0084	0x6A1D      	CLRF        _i 
0x0086	0x6A1E      	CLRF        _i+1 
;PruebaConfiguracion.c,213 :: 		CambiarEstadoBandera(1,1);                                            //Activa la bandera banSPI1
0x0088	0x0E01      	MOVLW       1
0x008A	0x6F6E      	MOVWF       FARG_CambiarEstadoBandera_bandera, 1
0x008C	0x0E01      	MOVLW       1
0x008E	0x6F6F      	MOVWF       FARG_CambiarEstadoBandera_estado, 1
0x0090	0xD898      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,214 :: 		}
L_interrupt23:
;PruebaConfiguracion.c,215 :: 		if ((banSPI1==1)&&(bufferSPI!=0xA1)&&(bufferSPI!=0xF1)){
0x0092	0x5019      	MOVF        _banSPI1, 0 
0x0094	0x0A01      	XORLW       1
0x0096	0xE110      	BNZ         L_interrupt26
0x0098	0x5025      	MOVF        _bufferSPI, 0 
0x009A	0x0AA1      	XORLW       161
0x009C	0xE00D      	BZ          L_interrupt26
0x009E	0x5025      	MOVF        _bufferSPI, 0 
0x00A0	0x0AF1      	XORLW       241
0x00A2	0xE00A      	BZ          L_interrupt26
L__interrupt38:
;PruebaConfiguracion.c,216 :: 		tramaSolicitudSPI[i] = bufferSPI;                                     //Recupera la trama de solicitud SPI
0x00A4	0x0E52      	MOVLW       _tramaSolicitudSPI
0x00A6	0x241D      	ADDWF       _i, 0 
0x00A8	0x6EE1      	MOVWF       FSR1L 
0x00AA	0x0E00      	MOVLW       hi_addr(_tramaSolicitudSPI)
0x00AC	0x201E      	ADDWFC      _i+1, 0 
0x00AE	0x6EE2      	MOVWF       FSR1H 
0x00B0	0xFFE6C025  	MOVFF       _bufferSPI, POSTINC1
;PruebaConfiguracion.c,217 :: 		i++;
0x00B4	0x4A1D      	INFSNZ      _i, 1 
0x00B6	0x2A1E      	INCF        _i+1, 1 
;PruebaConfiguracion.c,218 :: 		}
L_interrupt26:
;PruebaConfiguracion.c,219 :: 		if ((banSPI1==1)&&(bufferSPI==0xF1)){
0x00B8	0x5019      	MOVF        _banSPI1, 0 
0x00BA	0x0A01      	XORLW       1
0x00BC	0xE14E      	BNZ         L_interrupt29
0x00BE	0x5025      	MOVF        _bufferSPI, 0 
0x00C0	0x0AF1      	XORLW       241
0x00C2	0xE14B      	BNZ         L_interrupt29
L__interrupt37:
;PruebaConfiguracion.c,221 :: 		for (j=0;j<4;j++){
0x00C4	0x6A23      	CLRF        _j 
0x00C6	0x6A24      	CLRF        _j+1 
L_interrupt30:
0x00C8	0x0E00      	MOVLW       0
0x00CA	0x5C24      	SUBWF       _j+1, 0 
0x00CC	0xE102      	BNZ         L__interrupt50
0x00CE	0x0E04      	MOVLW       4
0x00D0	0x5C23      	SUBWF       _j, 0 
L__interrupt50:
0x00D2	0xE211      	BC          L_interrupt31
;PruebaConfiguracion.c,222 :: 		cabeceraSolicitud[j] = tramaSolicitudSPI[j];
0x00D4	0x0E4D      	MOVLW       _cabeceraSolicitud
0x00D6	0x2423      	ADDWF       _j, 0 
0x00D8	0x6EE1      	MOVWF       FSR1L 
0x00DA	0x0E00      	MOVLW       hi_addr(_cabeceraSolicitud)
0x00DC	0x2024      	ADDWFC      _j+1, 0 
0x00DE	0x6EE2      	MOVWF       FSR1H 
0x00E0	0x0E52      	MOVLW       _tramaSolicitudSPI
0x00E2	0x2423      	ADDWF       _j, 0 
0x00E4	0x6EE9      	MOVWF       FSR0L 
0x00E6	0x0E00      	MOVLW       hi_addr(_tramaSolicitudSPI)
0x00E8	0x2024      	ADDWFC      _j+1, 0 
0x00EA	0x6EEA      	MOVWF       FSR0H 
0x00EC	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;PruebaConfiguracion.c,221 :: 		for (j=0;j<4;j++){
0x00F0	0x4A23      	INFSNZ      _j, 1 
0x00F2	0x2A24      	INCF        _j+1, 1 
;PruebaConfiguracion.c,223 :: 		}
0x00F4	0xD7E9      	BRA         L_interrupt30
L_interrupt31:
;PruebaConfiguracion.c,225 :: 		for (j=0;j<(cabeceraSolicitud[3]);j++){
0x00F6	0x6A23      	CLRF        _j 
0x00F8	0x6A24      	CLRF        _j+1 
L_interrupt33:
0x00FA	0x0E00      	MOVLW       0
0x00FC	0x5C24      	SUBWF       _j+1, 0 
0x00FE	0xE102      	BNZ         L__interrupt51
0x0100	0x5050      	MOVF        _cabeceraSolicitud+3, 0 
0x0102	0x5C23      	SUBWF       _j, 0 
L__interrupt51:
0x0104	0xE217      	BC          L_interrupt34
;PruebaConfiguracion.c,226 :: 		payloadSolicitud[j] = tramaSolicitudSPI[4+j];
0x0106	0x0E3E      	MOVLW       _payloadSolicitud
0x0108	0x2423      	ADDWF       _j, 0 
0x010A	0x6EE1      	MOVWF       FSR1L 
0x010C	0x0E00      	MOVLW       hi_addr(_payloadSolicitud)
0x010E	0x2024      	ADDWFC      _j+1, 0 
0x0110	0x6EE2      	MOVWF       FSR1H 
0x0112	0x0E04      	MOVLW       4
0x0114	0x2423      	ADDWF       _j, 0 
0x0116	0x6E00      	MOVWF       R0 
0x0118	0x0E00      	MOVLW       0
0x011A	0x2024      	ADDWFC      _j+1, 0 
0x011C	0x6E01      	MOVWF       R1 
0x011E	0x0E52      	MOVLW       _tramaSolicitudSPI
0x0120	0x2400      	ADDWF       R0, 0 
0x0122	0x6EE9      	MOVWF       FSR0L 
0x0124	0x0E00      	MOVLW       hi_addr(_tramaSolicitudSPI)
0x0126	0x2001      	ADDWFC      R1, 0 
0x0128	0x6EEA      	MOVWF       FSR0H 
0x012A	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;PruebaConfiguracion.c,225 :: 		for (j=0;j<(cabeceraSolicitud[3]);j++){
0x012E	0x4A23      	INFSNZ      _j, 1 
0x0130	0x2A24      	INCF        _j+1, 1 
;PruebaConfiguracion.c,227 :: 		}
0x0132	0xD7E3      	BRA         L_interrupt33
L_interrupt34:
;PruebaConfiguracion.c,230 :: 		if ((payloadSolicitud[4])==0xE5){
0x0134	0x5042      	MOVF        _payloadSolicitud+4, 0 
0x0136	0x0AE5      	XORLW       229
0x0138	0xE10B      	BNZ         L_interrupt36
;PruebaConfiguracion.c,231 :: 		TEST = ~TEST;
0x013A	0x0100      	MOVLB       0
0x013C	0x7481      	BTG         RB2_bit, BitPos(RB2_bit+0) 
;PruebaConfiguracion.c,232 :: 		ResponderSPI(cabeceraSolicitud, payloadSolicitud); //Esta parte deberia ir en la interrupcion uart
0x013E	0x0E4D      	MOVLW       _cabeceraSolicitud
0x0140	0x6F6E      	MOVWF       FARG_ResponderSPI_cabeceraRespuesta, 1
0x0142	0x0E00      	MOVLW       hi_addr(_cabeceraSolicitud)
0x0144	0x6F6F      	MOVWF       FARG_ResponderSPI_cabeceraRespuesta+1, 1
0x0146	0x0E3E      	MOVLW       _payloadSolicitud
0x0148	0x6F70      	MOVWF       FARG_ResponderSPI_payloadRespuesta, 1
0x014A	0x0E00      	MOVLW       hi_addr(_payloadSolicitud)
0x014C	0x6F71      	MOVWF       FARG_ResponderSPI_payloadRespuesta+1, 1
0x014E	0xD854      	RCALL       _ResponderSPI
;PruebaConfiguracion.c,233 :: 		}
L_interrupt36:
0x0150	0x0100      	MOVLB       0
;PruebaConfiguracion.c,236 :: 		CambiarEstadoBandera(1,0);                                            //Limpia la bandera
0x0152	0x0E01      	MOVLW       1
0x0154	0x6F6E      	MOVWF       FARG_CambiarEstadoBandera_bandera, 1
0x0156	0x6B6F      	CLRF        FARG_CambiarEstadoBandera_estado, 1
0x0158	0xD834      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,237 :: 		}
L_interrupt29:
;PruebaConfiguracion.c,243 :: 		}
L_interrupt11:
;PruebaConfiguracion.c,245 :: 		}
L_end_interrupt:
L__interrupt49:
0x015A	0xF000C016  	MOVFF       22, R0
0x015E	0xF00DC015  	MOVFF       21, R13
0x0162	0x0011      	RETFIE      1
; end of _interrupt
_SPI1_Init_Advanced:
;__Lib_SPI_c345b123.c,43 :: 		
;__Lib_SPI_c345b123.c,44 :: 		
0x0164	0x9AC6      	BCF         SSP1CON1, 5 
;__Lib_SPI_c345b123.c,45 :: 		
0x0166	0x0EFF      	MOVLW       _SPI1_Read
0x0168	0x0100      	MOVLB       0
0x016A	0x6F66      	MOVWF       _SPI_Rd_Ptr, 1
0x016C	0x0EFF      	MOVLW       hi_addr(_SPI1_Read)
0x016E	0x6F67      	MOVWF       _SPI_Rd_Ptr+1, 1
0x0170	0x0EFF      	MOVLW       FARG_SPI1_Read_buffer
0x0172	0x6F68      	MOVWF       _SPI_Rd_Ptr+2, 1
0x0174	0x0EFF      	MOVLW       hi_addr(FARG_SPI1_Read_buffer)
0x0176	0x6F69      	MOVWF       _SPI_Rd_Ptr+3, 1
;__Lib_SPI_c345b123.c,46 :: 		
0x0178	0x0EFF      	MOVLW       _SPI1_Write
0x017A	0x6E3A      	MOVWF       _SPI_Wr_Ptr 
0x017C	0x0EFF      	MOVLW       hi_addr(_SPI1_Write)
0x017E	0x6E3B      	MOVWF       _SPI_Wr_Ptr+1 
0x0180	0x0EFF      	MOVLW       FARG_SPI1_Write_data_
0x0182	0x6E3C      	MOVWF       _SPI_Wr_Ptr+2 
0x0184	0x0EFF      	MOVLW       hi_addr(FARG_SPI1_Write_data_)
0x0186	0x6E3D      	MOVWF       _SPI_Wr_Ptr+3 
;__Lib_SPI_c345b123.c,48 :: 		
0x0188	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;__Lib_SPI_c345b123.c,49 :: 		
0x018A	0x516A      	MOVF        FARG_SPI1_Init_Advanced_master, 0, 1
0x018C	0x0A04      	XORLW       4
0x018E	0xE102      	BNZ         L_SPI1_Init_Advanced0
0x0190	0x8694      	BSF         TRISC3_bit, BitPos(TRISC3_bit+0) 
0x0192	0xD001      	BRA         L_SPI1_Init_Advanced1
L_SPI1_Init_Advanced0:
;__Lib_SPI_c345b123.c,50 :: 		
0x0194	0x9694      	BCF         TRISC3_bit, BitPos(TRISC3_bit+0) 
L_SPI1_Init_Advanced1:
;__Lib_SPI_c345b123.c,51 :: 		
0x0196	0x8894      	BSF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;__Lib_SPI_c345b123.c,53 :: 		
0x0198	0x6AC6      	CLRF        SSP1CON1 
;__Lib_SPI_c345b123.c,54 :: 		
0x019A	0x9CC7      	BCF         SSP1STAT, 6 
;__Lib_SPI_c345b123.c,55 :: 		
0x019C	0x9EC7      	BCF         SSP1STAT, 7 
;__Lib_SPI_c345b123.c,56 :: 		
0x019E	0x516A      	MOVF        FARG_SPI1_Init_Advanced_master, 0, 1
0x01A0	0x12C6      	IORWF       SSP1CON1, 1 
;__Lib_SPI_c345b123.c,57 :: 		
0x01A2	0x516C      	MOVF        FARG_SPI1_Init_Advanced_clock_idle, 0, 1
0x01A4	0x12C6      	IORWF       SSP1CON1, 1 
;__Lib_SPI_c345b123.c,58 :: 		
0x01A6	0x516B      	MOVF        FARG_SPI1_Init_Advanced_data_sample, 0, 1
0x01A8	0x12C7      	IORWF       SSP1STAT, 1 
;__Lib_SPI_c345b123.c,60 :: 		
0x01AA	0x536C      	MOVF        FARG_SPI1_Init_Advanced_clock_idle, 1, 1
0x01AC	0xE005      	BZ          L_SPI1_Init_Advanced2
;__Lib_SPI_c345b123.c,61 :: 		
0x01AE	0x516D      	MOVF        FARG_SPI1_Init_Advanced_transmit_edge, 0, 1
0x01B0	0x0A00      	XORLW       0
0x01B2	0xB4D8      	BTFSC       STATUS, 2 
;__Lib_SPI_c345b123.c,62 :: 		
0x01B4	0x8CC7      	BSF         SSP1STAT, 6 
L_SPI1_Init_Advanced3:
;__Lib_SPI_c345b123.c,63 :: 		
0x01B6	0xD003      	BRA         L_SPI1_Init_Advanced4
L_SPI1_Init_Advanced2:
;__Lib_SPI_c345b123.c,65 :: 		
0x01B8	0x536D      	MOVF        FARG_SPI1_Init_Advanced_transmit_edge, 1, 1
0x01BA	0xA4D8      	BTFSS       STATUS, 2 
;__Lib_SPI_c345b123.c,66 :: 		
0x01BC	0x8CC7      	BSF         SSP1STAT, 6 
L_SPI1_Init_Advanced5:
;__Lib_SPI_c345b123.c,67 :: 		
L_SPI1_Init_Advanced4:
;__Lib_SPI_c345b123.c,68 :: 		
0x01BE	0x8AC6      	BSF         SSP1CON1, 5 
;__Lib_SPI_c345b123.c,69 :: 		
L_end_SPI1_Init_Advanced:
0x01C0	0x0012      	RETURN      0
; end of _SPI1_Init_Advanced
_CambiarEstadoBandera:
;PruebaConfiguracion.c,119 :: 		void CambiarEstadoBandera(unsigned short bandera, unsigned short estado){
;PruebaConfiguracion.c,121 :: 		if (estado==1){
0x01C2	0x0100      	MOVLB       0
0x01C4	0x516F      	MOVF        FARG_CambiarEstadoBandera_estado, 0, 1
0x01C6	0x0A01      	XORLW       1
0x01C8	0xE111      	BNZ         L_CambiarEstadoBandera1
;PruebaConfiguracion.c,123 :: 		banSPI0 = 3;
0x01CA	0x0E03      	MOVLW       3
0x01CC	0x6E1C      	MOVWF       _banSPI0 
;PruebaConfiguracion.c,124 :: 		banSPI1 = 3;
0x01CE	0x0E03      	MOVLW       3
0x01D0	0x6E19      	MOVWF       _banSPI1 
;PruebaConfiguracion.c,126 :: 		switch (bandera){
0x01D2	0xD006      	BRA         L_CambiarEstadoBandera2
;PruebaConfiguracion.c,127 :: 		case 0:
L_CambiarEstadoBandera4:
;PruebaConfiguracion.c,128 :: 		banSPI0 = 1;
0x01D4	0x0E01      	MOVLW       1
0x01D6	0x6E1C      	MOVWF       _banSPI0 
;PruebaConfiguracion.c,129 :: 		break;
0x01D8	0xD009      	BRA         L_CambiarEstadoBandera3
;PruebaConfiguracion.c,130 :: 		case 1:
L_CambiarEstadoBandera5:
;PruebaConfiguracion.c,131 :: 		banSPI1 = 1;
0x01DA	0x0E01      	MOVLW       1
0x01DC	0x6E19      	MOVWF       _banSPI1 
;PruebaConfiguracion.c,132 :: 		break;
0x01DE	0xD006      	BRA         L_CambiarEstadoBandera3
;PruebaConfiguracion.c,133 :: 		}
L_CambiarEstadoBandera2:
0x01E0	0x516E      	MOVF        FARG_CambiarEstadoBandera_bandera, 0, 1
0x01E2	0x0A00      	XORLW       0
0x01E4	0xE0F7      	BZ          L_CambiarEstadoBandera4
0x01E6	0x516E      	MOVF        FARG_CambiarEstadoBandera_bandera, 0, 1
0x01E8	0x0A01      	XORLW       1
0x01EA	0xE0F7      	BZ          L_CambiarEstadoBandera5
L_CambiarEstadoBandera3:
;PruebaConfiguracion.c,134 :: 		}
L_CambiarEstadoBandera1:
;PruebaConfiguracion.c,136 :: 		if (estado==0){
0x01EC	0x516F      	MOVF        FARG_CambiarEstadoBandera_estado, 0, 1
0x01EE	0x0A00      	XORLW       0
0x01F0	0xE102      	BNZ         L_CambiarEstadoBandera6
;PruebaConfiguracion.c,137 :: 		banSPI0 = 0;
0x01F2	0x6A1C      	CLRF        _banSPI0 
;PruebaConfiguracion.c,138 :: 		banSPI1 = 0;
0x01F4	0x6A19      	CLRF        _banSPI1 
;PruebaConfiguracion.c,139 :: 		}
L_CambiarEstadoBandera6:
;PruebaConfiguracion.c,140 :: 		}
L_end_CambiarEstadoBandera:
0x01F6	0x0012      	RETURN      0
; end of _CambiarEstadoBandera
_ResponderSPI:
;PruebaConfiguracion.c,143 :: 		void ResponderSPI(unsigned char *cabeceraRespuesta, unsigned char *payloadRespuesta){
;PruebaConfiguracion.c,146 :: 		tramaRespuestaSPI[0] = cabeceraRespuesta[0];
0x01F8	0xFFE9C06E  	MOVFF       FARG_ResponderSPI_cabeceraRespuesta, FSR0L
0x01FC	0xFFEAC06F  	MOVFF       FARG_ResponderSPI_cabeceraRespuesta+1, FSR0H
0x0200	0xF026CFEE  	MOVFF       POSTINC0, _tramaRespuestaSPI
;PruebaConfiguracion.c,147 :: 		tramaRespuestaSPI[1] = cabeceraRespuesta[1];
0x0204	0x0E01      	MOVLW       1
0x0206	0x0100      	MOVLB       0
0x0208	0x256E      	ADDWF       FARG_ResponderSPI_cabeceraRespuesta, 0, 1
0x020A	0x6EE9      	MOVWF       FSR0L 
0x020C	0x0E00      	MOVLW       0
0x020E	0x216F      	ADDWFC      FARG_ResponderSPI_cabeceraRespuesta+1, 0, 1
0x0210	0x6EEA      	MOVWF       FSR0H 
0x0212	0xF027CFEE  	MOVFF       POSTINC0, _tramaRespuestaSPI+1
;PruebaConfiguracion.c,148 :: 		tramaRespuestaSPI[2] = cabeceraRespuesta[2];
0x0216	0x0E02      	MOVLW       2
0x0218	0x256E      	ADDWF       FARG_ResponderSPI_cabeceraRespuesta, 0, 1
0x021A	0x6EE9      	MOVWF       FSR0L 
0x021C	0x0E00      	MOVLW       0
0x021E	0x216F      	ADDWFC      FARG_ResponderSPI_cabeceraRespuesta+1, 0, 1
0x0220	0x6EEA      	MOVWF       FSR0H 
0x0222	0xF028CFEE  	MOVFF       POSTINC0, _tramaRespuestaSPI+2
;PruebaConfiguracion.c,149 :: 		tramaRespuestaSPI[3] = cabeceraRespuesta[3];
0x0226	0x0E03      	MOVLW       3
0x0228	0x256E      	ADDWF       FARG_ResponderSPI_cabeceraRespuesta, 0, 1
0x022A	0x6EE9      	MOVWF       FSR0L 
0x022C	0x0E00      	MOVLW       0
0x022E	0x216F      	ADDWFC      FARG_ResponderSPI_cabeceraRespuesta+1, 0, 1
0x0230	0x6EEA      	MOVWF       FSR0H 
0x0232	0xF029CFEE  	MOVFF       POSTINC0, _tramaRespuestaSPI+3
;PruebaConfiguracion.c,152 :: 		for (j=0;j<(cabeceraRespuesta[3]);j++){
0x0236	0x6A23      	CLRF        _j 
0x0238	0x6A24      	CLRF        _j+1 
L_ResponderSPI7:
0x023A	0x0E03      	MOVLW       3
0x023C	0x256E      	ADDWF       FARG_ResponderSPI_cabeceraRespuesta, 0, 1
0x023E	0x6ED9      	MOVWF       FSR2L 
0x0240	0x0E00      	MOVLW       0
0x0242	0x216F      	ADDWFC      FARG_ResponderSPI_cabeceraRespuesta+1, 0, 1
0x0244	0x6EDA      	MOVWF       FSR2H 
0x0246	0xF001CFDE  	MOVFF       POSTINC2, R1
0x024A	0x0E00      	MOVLW       0
0x024C	0x5C24      	SUBWF       _j+1, 0 
0x024E	0xE102      	BNZ         L__ResponderSPI47
0x0250	0x5001      	MOVF        R1, 0 
0x0252	0x5C23      	SUBWF       _j, 0 
L__ResponderSPI47:
0x0254	0xE217      	BC          L_ResponderSPI8
;PruebaConfiguracion.c,153 :: 		tramaRespuestaSPI[j+4] = payloadRespuesta[j];
0x0256	0x0E04      	MOVLW       4
0x0258	0x2423      	ADDWF       _j, 0 
0x025A	0x6E00      	MOVWF       R0 
0x025C	0x0E00      	MOVLW       0
0x025E	0x2024      	ADDWFC      _j+1, 0 
0x0260	0x6E01      	MOVWF       R1 
0x0262	0x0E26      	MOVLW       _tramaRespuestaSPI
0x0264	0x2400      	ADDWF       R0, 0 
0x0266	0x6EE1      	MOVWF       FSR1L 
0x0268	0x0E00      	MOVLW       hi_addr(_tramaRespuestaSPI)
0x026A	0x2001      	ADDWFC      R1, 0 
0x026C	0x6EE2      	MOVWF       FSR1H 
0x026E	0x5023      	MOVF        _j, 0 
0x0270	0x2570      	ADDWF       FARG_ResponderSPI_payloadRespuesta, 0, 1
0x0272	0x6EE9      	MOVWF       FSR0L 
0x0274	0x5024      	MOVF        _j+1, 0 
0x0276	0x2171      	ADDWFC      FARG_ResponderSPI_payloadRespuesta+1, 0, 1
0x0278	0x6EEA      	MOVWF       FSR0H 
0x027A	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;PruebaConfiguracion.c,152 :: 		for (j=0;j<(cabeceraRespuesta[3]);j++){
0x027E	0x4A23      	INFSNZ      _j, 1 
0x0280	0x2A24      	INCF        _j+1, 1 
;PruebaConfiguracion.c,154 :: 		}
0x0282	0xD7DB      	BRA         L_ResponderSPI7
L_ResponderSPI8:
;PruebaConfiguracion.c,165 :: 		RP0 = 1;
0x0284	0x808B      	BSF         LATC0_bit, BitPos(LATC0_bit+0) 
;PruebaConfiguracion.c,166 :: 		Delay_us(100);
0x0286	0x0E85      	MOVLW       133
0x0288	0x6E0D      	MOVWF       R13, 0
L_ResponderSPI10:
0x028A	0x2E0D      	DECFSZ      R13, 1, 0
0x028C	0xD7FE      	BRA         L_ResponderSPI10
;PruebaConfiguracion.c,167 :: 		RP0 = 0;
0x028E	0x908B      	BCF         LATC0_bit, BitPos(LATC0_bit+0) 
;PruebaConfiguracion.c,169 :: 		}
L_end_ResponderSPI:
0x0290	0x0012      	RETURN      0
; end of _ResponderSPI
_ConfiguracionPrincipal:
;PruebaConfiguracion.c,77 :: 		void ConfiguracionPrincipal(){
;PruebaConfiguracion.c,80 :: 		OSCCON.IDLEN=1;                                    //Entra en modo IDLE durante la instruccion SLEEP
0x0292	0x8ED3      	BSF         OSCCON, 7 
;PruebaConfiguracion.c,81 :: 		OSCCON.IRCF2=1;                                    //HFINTOSC=16MHz  IRFC=111
0x0294	0x8CD3      	BSF         OSCCON, 6 
;PruebaConfiguracion.c,82 :: 		OSCCON.IRCF1=1;
0x0296	0x8AD3      	BSF         OSCCON, 5 
;PruebaConfiguracion.c,83 :: 		OSCCON.IRCF0=1;
0x0298	0x88D3      	BSF         OSCCON, 4 
;PruebaConfiguracion.c,84 :: 		OSCCON.SCS1=1;                                     //System Clock Select bit:  1x=Internal oscillator block
0x029A	0x82D3      	BSF         OSCCON, 1 
;PruebaConfiguracion.c,85 :: 		OSCCON.SCS0=1;
0x029C	0x80D3      	BSF         OSCCON, 0 
;PruebaConfiguracion.c,88 :: 		ANSELA = 0;                                        //Configura PORTA como digital
0x029E	0x010F      	MOVLB       15
0x02A0	0x6B38      	CLRF        ANSELA, 1
;PruebaConfiguracion.c,89 :: 		ANSELB = 0;                                        //Configura PORTB como digital
0x02A2	0x6B39      	CLRF        ANSELB, 1
;PruebaConfiguracion.c,90 :: 		ANSELC = 0;                                        //Configura PORTC como digital
0x02A4	0x6B3A      	CLRF        ANSELC, 1
;PruebaConfiguracion.c,92 :: 		TEST_Direction = 0;                                //Configura el pin TEST como salida
0x02A6	0x9493      	BCF         TRISB2_bit, BitPos(TRISB2_bit+0) 
;PruebaConfiguracion.c,93 :: 		RP0_Direction = 0;                                 //Configura el pin RP0 como salida
0x02A8	0x9094      	BCF         TRISC0_bit, BitPos(TRISC0_bit+0) 
;PruebaConfiguracion.c,94 :: 		TRISA5_bit = 1;                                    //SS1 In
0x02AA	0x8A92      	BSF         TRISA5_bit, BitPos(TRISA5_bit+0) 
;PruebaConfiguracion.c,95 :: 		TRISC3_bit = 1;                                    //SCK1 In
0x02AC	0x8694      	BSF         TRISC3_bit, BitPos(TRISC3_bit+0) 
;PruebaConfiguracion.c,96 :: 		TRISC4_bit = 1;                                    //SDI1 In
0x02AE	0x8894      	BSF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;PruebaConfiguracion.c,97 :: 		TRISC5_bit = 0;                                    //SDO1 Out
0x02B0	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;PruebaConfiguracion.c,99 :: 		INTCON.GIE = 1;                                    //Habilita las interrupciones globales
0x02B2	0x8EF2      	BSF         INTCON, 7 
;PruebaConfiguracion.c,100 :: 		INTCON.PEIE = 1;                                   //Habilita las interrupciones perifericas
0x02B4	0x8CF2      	BSF         INTCON, 6 
;PruebaConfiguracion.c,103 :: 		SSP1IE_bit = 1;
0x02B6	0x869D      	BSF         SSP1IE_bit, BitPos(SSP1IE_bit+0) 
;PruebaConfiguracion.c,104 :: 		SPI1_Init_Advanced(_SPI_SLAVE_SS_ENABLE, _SPI_DATA_SAMPLE_END, _SPI_CLK_IDLE_HIGH, _SPI_HIGH_2_LOW);
0x02B8	0x0E04      	MOVLW       4
0x02BA	0x0100      	MOVLB       0
0x02BC	0x6F6A      	MOVWF       FARG_SPI1_Init_Advanced_master, 1
0x02BE	0x0E80      	MOVLW       128
0x02C0	0x6F6B      	MOVWF       FARG_SPI1_Init_Advanced_data_sample, 1
0x02C2	0x0E10      	MOVLW       16
0x02C4	0x6F6C      	MOVWF       FARG_SPI1_Init_Advanced_clock_idle, 1
0x02C6	0x6B6D      	CLRF        FARG_SPI1_Init_Advanced_transmit_edge, 1
0x02C8	0xDF4D      	RCALL       _SPI1_Init_Advanced
;PruebaConfiguracion.c,105 :: 		SSP1IF_bit = 0;                                                            //Limpia la bandera de interrupcion por SPI *
0x02CA	0x969E      	BCF         SSP1IF_bit, BitPos(SSP1IF_bit+0) 
;PruebaConfiguracion.c,115 :: 		Delay_ms(100);                                     //Espera hasta que se estabilicen los cambios
0x02CC	0x0E03      	MOVLW       3
0x02CE	0x6E0B      	MOVWF       R11, 0
0x02D0	0x0E08      	MOVLW       8
0x02D2	0x6E0C      	MOVWF       R12, 0
0x02D4	0x0E77      	MOVLW       119
0x02D6	0x6E0D      	MOVWF       R13, 0
L_ConfiguracionPrincipal0:
0x02D8	0x2E0D      	DECFSZ      R13, 1, 0
0x02DA	0xD7FE      	BRA         L_ConfiguracionPrincipal0
0x02DC	0x2E0C      	DECFSZ      R12, 1, 0
0x02DE	0xD7FC      	BRA         L_ConfiguracionPrincipal0
0x02E0	0x2E0B      	DECFSZ      R11, 1, 0
0x02E2	0xD7FA      	BRA         L_ConfiguracionPrincipal0
;PruebaConfiguracion.c,116 :: 		}
L_end_ConfiguracionPrincipal:
0x02E4	0x0012      	RETURN      0
; end of _ConfiguracionPrincipal
_main:
;PruebaConfiguracion.c,39 :: 		void main() {
;PruebaConfiguracion.c,41 :: 		ConfiguracionPrincipal();
0x02E6	0xDFD5      	RCALL       _ConfiguracionPrincipal
;PruebaConfiguracion.c,45 :: 		i = 0;
0x02E8	0x6A1D      	CLRF        _i 
0x02EA	0x6A1E      	CLRF        _i+1 
;PruebaConfiguracion.c,46 :: 		j = 0;
0x02EC	0x6A23      	CLRF        _j 
0x02EE	0x6A24      	CLRF        _j+1 
;PruebaConfiguracion.c,47 :: 		x = 0;
0x02F0	0x6A21      	CLRF        _x 
0x02F2	0x6A22      	CLRF        _x+1 
;PruebaConfiguracion.c,48 :: 		y = 0;
0x02F4	0x6A1F      	CLRF        _y 
0x02F6	0x6A20      	CLRF        _y+1 
;PruebaConfiguracion.c,50 :: 		banSPI0 = 0;
0x02F8	0x6A1C      	CLRF        _banSPI0 
;PruebaConfiguracion.c,51 :: 		banSPI1 = 0;
0x02FA	0x6A19      	CLRF        _banSPI1 
;PruebaConfiguracion.c,53 :: 		direccionSol = 0;
0x02FC	0x6A18      	CLRF        _direccionSol 
;PruebaConfiguracion.c,54 :: 		funcionSol = 0;
0x02FE	0x6A17      	CLRF        _funcionSol 
;PruebaConfiguracion.c,55 :: 		subFuncionSol = 0;
0x0300	0x6A1B      	CLRF        _subFuncionSol 
;PruebaConfiguracion.c,56 :: 		numDatosSol = 0;
0x0302	0x6A1A      	CLRF        _numDatosSol 
;PruebaConfiguracion.c,58 :: 		RP0 = 0;
0x0304	0x908B      	BCF         LATC0_bit, BitPos(LATC0_bit+0) 
;PruebaConfiguracion.c,59 :: 		TEST = 1;
0x0306	0x8481      	BSF         RB2_bit, BitPos(RB2_bit+0) 
;PruebaConfiguracion.c,70 :: 		}
L_end_main:
0x0308	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [348]    _interrupt
0x0164      [94]    _SPI1_Init_Advanced
0x01C2      [54]    _CambiarEstadoBandera
0x01F8     [154]    _ResponderSPI
0x0292      [84]    _ConfiguracionPrincipal
0x02E6      [36]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    SPI2_Write_tmp_L0
0x0000       [1]    R0
0x0000       [1]    SPI1_Write_tmp_L0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0017       [1]    _funcionSol
0x0018       [1]    _direccionSol
0x0019       [1]    _banSPI1
0x001A       [1]    _numDatosSol
0x001B       [1]    _subFuncionSol
0x001C       [1]    _banSPI0
0x001D       [2]    _i
0x001F       [2]    _y
0x0021       [2]    _x
0x0023       [2]    _j
0x0025       [1]    _bufferSPI
0x0026      [20]    _tramaRespuestaSPI
0x003A       [4]    _SPI_Wr_Ptr
0x003E      [15]    _payloadSolicitud
0x004D       [5]    _cabeceraSolicitud
0x0052      [20]    _tramaSolicitudSPI
0x0066       [4]    _SPI_Rd_Ptr
0x006A       [1]    FARG_SPI1_Init_Advanced_master
0x006B       [1]    FARG_SPI1_Init_Advanced_data_sample
0x006C       [1]    FARG_SPI1_Init_Advanced_clock_idle
0x006D       [1]    FARG_SPI1_Init_Advanced_transmit_edge
0x006E       [2]    FARG_ResponderSPI_cabeceraRespuesta
0x006E       [1]    FARG_CambiarEstadoBandera_bandera
0x006F       [1]    FARG_CambiarEstadoBandera_estado
0x0070       [2]    FARG_ResponderSPI_payloadRespuesta
0x0F38       [1]    ANSELA
0x0F39       [1]    ANSELB
0x0F3A       [1]    ANSELC
0x0F81       [0]    TEST
0x0F81       [0]    RB2_bit
0x0F8B       [0]    RP0
0x0F8B       [0]    LATC0_bit
0x0F92       [0]    TRISA5_bit
0x0F93       [0]    TRISB2_bit
0x0F93       [0]    TEST_Direction
0x0F94       [0]    TRISC3_bit
0x0F94       [0]    RP0_Direction
0x0F94       [0]    TRISC0_bit
0x0F94       [0]    TRISC4_bit
0x0F94       [0]    TRISC5_bit
0x0F9D       [0]    SSP1IE_bit
0x0F9E       [0]    SSP1IF_bit
0x0FC6       [1]    SSP1CON1
0x0FC7       [1]    SSP1STAT
0x0FC9       [1]    SSP1BUF
0x0FD3       [1]    OSCCON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
