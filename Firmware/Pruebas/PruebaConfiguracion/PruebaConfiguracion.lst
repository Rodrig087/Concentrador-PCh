;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 1/9/2021 15:48:28
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF002EF52  	GOTO        1188
_interrupt:
;PruebaConfiguracion.c,211 :: 		void interrupt(void){
0x0008	0xF017C000  	MOVFF       R0, 23
0x000C	0xF016C001  	MOVFF       R1, 22
0x0010	0xF015C00D  	MOVFF       R13, 21
;PruebaConfiguracion.c,227 :: 		if (SSP1IF_bit==1){
0x0014	0xA69E      	BTFSS       SSP1IF_bit, BitPos(SSP1IF_bit+0) 
0x0016	0xD0A0      	BRA         L_interrupt23
;PruebaConfiguracion.c,229 :: 		SSP1IF_bit = 0;                                                          //Limpia la bandera de interrupcion por SPI
0x0018	0x969E      	BCF         SSP1IF_bit, BitPos(SSP1IF_bit+0) 
;PruebaConfiguracion.c,230 :: 		bufferSPI = SSP1BUF;                                                     //Guarda el contenido del bufeer (lectura)
0x001A	0xF030CFC9  	MOVFF       SSP1BUF, _bufferSPI
;PruebaConfiguracion.c,231 :: 		TEST = ~TEST;
0x001E	0x7481      	BTG         RB2_bit, BitPos(RB2_bit+0) 
;PruebaConfiguracion.c,235 :: 		if ((banSPI0==0)&&(bufferSPI==0xA0)) {
0x0020	0x5027      	MOVF        _banSPI0, 0 
0x0022	0x0A00      	XORLW       0
0x0024	0xE10D      	BNZ         L_interrupt26
0x0026	0x5030      	MOVF        _bufferSPI, 0 
0x0028	0x0AA0      	XORLW       160
0x002A	0xE10A      	BNZ         L_interrupt26
L__interrupt74:
;PruebaConfiguracion.c,236 :: 		SSP1BUF = tramaRespuestaSPI[0];                                       //Carga en el buffer el primer elemento de la cabecera (id)
0x002C	0xFFC9C031  	MOVFF       _tramaRespuestaSPI, SSP1BUF
;PruebaConfiguracion.c,237 :: 		i = 1;
0x0030	0x0E01      	MOVLW       1
0x0032	0x6E2A      	MOVWF       _i 
0x0034	0x0E00      	MOVLW       0
0x0036	0x6E2B      	MOVWF       _i+1 
;PruebaConfiguracion.c,238 :: 		CambiarEstadoBandera(0,1);                                            //Activa la bandera
0x0038	0x6A5E      	CLRF        FARG_CambiarEstadoBandera_bandera 
0x003A	0x0E01      	MOVLW       1
0x003C	0x6E5F      	MOVWF       FARG_CambiarEstadoBandera_estado 
0x003E	0xD97E      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,239 :: 		}
L_interrupt26:
;PruebaConfiguracion.c,240 :: 		if ((banSPI0==1)&&(bufferSPI!=0xA0)&&(bufferSPI!=0xF0)){
0x0040	0x5027      	MOVF        _banSPI0, 0 
0x0042	0x0A01      	XORLW       1
0x0044	0xE110      	BNZ         L_interrupt29
0x0046	0x5030      	MOVF        _bufferSPI, 0 
0x0048	0x0AA0      	XORLW       160
0x004A	0xE00D      	BZ          L_interrupt29
0x004C	0x5030      	MOVF        _bufferSPI, 0 
0x004E	0x0AF0      	XORLW       240
0x0050	0xE00A      	BZ          L_interrupt29
L__interrupt73:
;PruebaConfiguracion.c,241 :: 		SSP1BUF = tramaRespuestaSPI[i];                                       //Se envia la trama de respuesta
0x0052	0x0E31      	MOVLW       _tramaRespuestaSPI
0x0054	0x242A      	ADDWF       _i, 0 
0x0056	0x6EE9      	MOVWF       FSR0L 
0x0058	0x0E00      	MOVLW       hi_addr(_tramaRespuestaSPI)
0x005A	0x202B      	ADDWFC      _i+1, 0 
0x005C	0x6EEA      	MOVWF       FSR0H 
0x005E	0xFFC9CFEE  	MOVFF       POSTINC0, SSP1BUF
;PruebaConfiguracion.c,242 :: 		i++;
0x0062	0x4A2A      	INFSNZ      _i, 1 
0x0064	0x2A2B      	INCF        _i+1, 1 
;PruebaConfiguracion.c,244 :: 		}
L_interrupt29:
;PruebaConfiguracion.c,245 :: 		if ((banSPI0==1)&&(bufferSPI==0xF0)){
0x0066	0x5027      	MOVF        _banSPI0, 0 
0x0068	0x0A01      	XORLW       1
0x006A	0xE106      	BNZ         L_interrupt32
0x006C	0x5030      	MOVF        _bufferSPI, 0 
0x006E	0x0AF0      	XORLW       240
0x0070	0xE103      	BNZ         L_interrupt32
L__interrupt72:
;PruebaConfiguracion.c,246 :: 		CambiarEstadoBandera(0,0);                                            //Limpia las banderas
0x0072	0x6A5E      	CLRF        FARG_CambiarEstadoBandera_bandera 
0x0074	0x6A5F      	CLRF        FARG_CambiarEstadoBandera_estado 
0x0076	0xD962      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,247 :: 		}
L_interrupt32:
;PruebaConfiguracion.c,250 :: 		if ((banSPI1==0)&&(bufferSPI==0xA1)){
0x0078	0x502F      	MOVF        _banSPI1, 0 
0x007A	0x0A00      	XORLW       0
0x007C	0xE10A      	BNZ         L_interrupt35
0x007E	0x5030      	MOVF        _bufferSPI, 0 
0x0080	0x0AA1      	XORLW       161
0x0082	0xE107      	BNZ         L_interrupt35
L__interrupt71:
;PruebaConfiguracion.c,251 :: 		i = 0;                                                                //Limpia el subindice para guardar la trama SPI
0x0084	0x6A2A      	CLRF        _i 
0x0086	0x6A2B      	CLRF        _i+1 
;PruebaConfiguracion.c,252 :: 		CambiarEstadoBandera(1,1);                                            //Activa la bandera banSPI1
0x0088	0x0E01      	MOVLW       1
0x008A	0x6E5E      	MOVWF       FARG_CambiarEstadoBandera_bandera 
0x008C	0x0E01      	MOVLW       1
0x008E	0x6E5F      	MOVWF       FARG_CambiarEstadoBandera_estado 
0x0090	0xD955      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,253 :: 		}
L_interrupt35:
;PruebaConfiguracion.c,254 :: 		if ((banSPI1==1)&&(bufferSPI!=0xA1)&&(bufferSPI!=0xF1)){
0x0092	0x502F      	MOVF        _banSPI1, 0 
0x0094	0x0A01      	XORLW       1
0x0096	0xE110      	BNZ         L_interrupt38
0x0098	0x5030      	MOVF        _bufferSPI, 0 
0x009A	0x0AA1      	XORLW       161
0x009C	0xE00D      	BZ          L_interrupt38
0x009E	0x5030      	MOVF        _bufferSPI, 0 
0x00A0	0x0AF1      	XORLW       241
0x00A2	0xE00A      	BZ          L_interrupt38
L__interrupt70:
;PruebaConfiguracion.c,255 :: 		tramaSolicitudSPI[i] = bufferSPI;                                     //Recupera la trama de solicitud SPI
0x00A4	0x0E45      	MOVLW       _tramaSolicitudSPI
0x00A6	0x242A      	ADDWF       _i, 0 
0x00A8	0x6EE1      	MOVWF       FSR1L 
0x00AA	0x0E00      	MOVLW       hi_addr(_tramaSolicitudSPI)
0x00AC	0x202B      	ADDWFC      _i+1, 0 
0x00AE	0x6EE2      	MOVWF       FSR1H 
0x00B0	0xFFE6C030  	MOVFF       _bufferSPI, POSTINC1
;PruebaConfiguracion.c,256 :: 		i++;
0x00B4	0x4A2A      	INFSNZ      _i, 1 
0x00B6	0x2A2B      	INCF        _i+1, 1 
;PruebaConfiguracion.c,257 :: 		}
L_interrupt38:
;PruebaConfiguracion.c,258 :: 		if ((banSPI1==1)&&(bufferSPI==0xF1)){
0x00B8	0x502F      	MOVF        _banSPI1, 0 
0x00BA	0x0A01      	XORLW       1
0x00BC	0xE14D      	BNZ         L_interrupt41
0x00BE	0x5030      	MOVF        _bufferSPI, 0 
0x00C0	0x0AF1      	XORLW       241
0x00C2	0xE14A      	BNZ         L_interrupt41
L__interrupt69:
;PruebaConfiguracion.c,260 :: 		for (j=0;j<4;j++){
0x00C4	0x6A2C      	CLRF        _j 
0x00C6	0x6A2D      	CLRF        _j+1 
L_interrupt42:
0x00C8	0x0E00      	MOVLW       0
0x00CA	0x5C2D      	SUBWF       _j+1, 0 
0x00CC	0xE102      	BNZ         L__interrupt83
0x00CE	0x0E04      	MOVLW       4
0x00D0	0x5C2C      	SUBWF       _j, 0 
L__interrupt83:
0x00D2	0xE211      	BC          L_interrupt43
;PruebaConfiguracion.c,261 :: 		cabeceraSolicitud[j] = tramaSolicitudSPI[j];
0x00D4	0x0E7D      	MOVLW       _cabeceraSolicitud
0x00D6	0x242C      	ADDWF       _j, 0 
0x00D8	0x6EE1      	MOVWF       FSR1L 
0x00DA	0x0E00      	MOVLW       hi_addr(_cabeceraSolicitud)
0x00DC	0x202D      	ADDWFC      _j+1, 0 
0x00DE	0x6EE2      	MOVWF       FSR1H 
0x00E0	0x0E45      	MOVLW       _tramaSolicitudSPI
0x00E2	0x242C      	ADDWF       _j, 0 
0x00E4	0x6EE9      	MOVWF       FSR0L 
0x00E6	0x0E00      	MOVLW       hi_addr(_tramaSolicitudSPI)
0x00E8	0x202D      	ADDWFC      _j+1, 0 
0x00EA	0x6EEA      	MOVWF       FSR0H 
0x00EC	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;PruebaConfiguracion.c,260 :: 		for (j=0;j<4;j++){
0x00F0	0x4A2C      	INFSNZ      _j, 1 
0x00F2	0x2A2D      	INCF        _j+1, 1 
;PruebaConfiguracion.c,262 :: 		}
0x00F4	0xD7E9      	BRA         L_interrupt42
L_interrupt43:
;PruebaConfiguracion.c,264 :: 		for (j=0;j<(cabeceraSolicitud[3]);j++){
0x00F6	0x6A2C      	CLRF        _j 
0x00F8	0x6A2D      	CLRF        _j+1 
L_interrupt45:
0x00FA	0x0E00      	MOVLW       0
0x00FC	0x5C2D      	SUBWF       _j+1, 0 
0x00FE	0xE103      	BNZ         L__interrupt84
0x0100	0x0100      	MOVLB       0
0x0102	0x5180      	MOVF        _cabeceraSolicitud+3, 0, 1
0x0104	0x5C2C      	SUBWF       _j, 0 
L__interrupt84:
0x0106	0xE217      	BC          L_interrupt46
;PruebaConfiguracion.c,265 :: 		payloadSolicitud[j] = tramaSolicitudSPI[4+j];
0x0108	0x0E82      	MOVLW       _payloadSolicitud
0x010A	0x242C      	ADDWF       _j, 0 
0x010C	0x6EE1      	MOVWF       FSR1L 
0x010E	0x0E00      	MOVLW       hi_addr(_payloadSolicitud)
0x0110	0x202D      	ADDWFC      _j+1, 0 
0x0112	0x6EE2      	MOVWF       FSR1H 
0x0114	0x0E04      	MOVLW       4
0x0116	0x242C      	ADDWF       _j, 0 
0x0118	0x6E00      	MOVWF       R0 
0x011A	0x0E00      	MOVLW       0
0x011C	0x202D      	ADDWFC      _j+1, 0 
0x011E	0x6E01      	MOVWF       R1 
0x0120	0x0E45      	MOVLW       _tramaSolicitudSPI
0x0122	0x2400      	ADDWF       R0, 0 
0x0124	0x6EE9      	MOVWF       FSR0L 
0x0126	0x0E00      	MOVLW       hi_addr(_tramaSolicitudSPI)
0x0128	0x2001      	ADDWFC      R1, 0 
0x012A	0x6EEA      	MOVWF       FSR0H 
0x012C	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;PruebaConfiguracion.c,264 :: 		for (j=0;j<(cabeceraSolicitud[3]);j++){
0x0130	0x4A2C      	INFSNZ      _j, 1 
0x0132	0x2A2D      	INCF        _j+1, 1 
;PruebaConfiguracion.c,266 :: 		}
0x0134	0xD7E2      	BRA         L_interrupt45
L_interrupt46:
0x0136	0x0100      	MOVLB       0
;PruebaConfiguracion.c,268 :: 		idSolicitud = cabeceraSolicitud[0];
0x0138	0xF02EC07D  	MOVFF       _cabeceraSolicitud, _idSolicitud
;PruebaConfiguracion.c,274 :: 		TEST = ~TEST;
0x013C	0x7481      	BTG         RB2_bit, BitPos(RB2_bit+0) 
;PruebaConfiguracion.c,275 :: 		ResponderSPI(cabeceraSolicitud, tramaPruebaSPI);
0x013E	0x0E7D      	MOVLW       _cabeceraSolicitud
0x0140	0x6F97      	MOVWF       FARG_ResponderSPI_cabeceraRespuesta, 1
0x0142	0x0E00      	MOVLW       hi_addr(_cabeceraSolicitud)
0x0144	0x6F98      	MOVWF       FARG_ResponderSPI_cabeceraRespuesta+1, 1
0x0146	0x0E18      	MOVLW       _tramaPruebaSPI
0x0148	0x6F99      	MOVWF       FARG_ResponderSPI_payloadRespuesta, 1
0x014A	0x0E00      	MOVLW       hi_addr(_tramaPruebaSPI)
0x014C	0x6F9A      	MOVWF       FARG_ResponderSPI_payloadRespuesta+1, 1
0x014E	0xD910      	RCALL       _ResponderSPI
;PruebaConfiguracion.c,290 :: 		CambiarEstadoBandera(1,0);                                            //Limpia la bandera
0x0150	0x0E01      	MOVLW       1
0x0152	0x6E5E      	MOVWF       FARG_CambiarEstadoBandera_bandera 
0x0154	0x6A5F      	CLRF        FARG_CambiarEstadoBandera_estado 
0x0156	0xD8F2      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,292 :: 		}
L_interrupt41:
;PruebaConfiguracion.c,294 :: 		}
L_interrupt23:
;PruebaConfiguracion.c,299 :: 		if (RC1IF_bit==1){
0x0158	0xAA9E      	BTFSS       RC1IF_bit, BitPos(RC1IF_bit+0) 
0x015A	0xD060      	BRA         L_interrupt48
;PruebaConfiguracion.c,301 :: 		RC1IF_bit = 0;                                                           //Limpia la bandera de interrupcion
0x015C	0x9A9E      	BCF         RC1IF_bit, BitPos(RC1IF_bit+0) 
;PruebaConfiguracion.c,302 :: 		byteRS485 = UART1_Read();
0x015E	0xD955      	RCALL       _UART1_Read
0x0160	0xF01DC000  	MOVFF       R0, _byteRS485
;PruebaConfiguracion.c,305 :: 		if (banRSI==2){
0x0164	0x501F      	MOVF        _banRSI, 0 
0x0166	0x0A02      	XORLW       2
0x0168	0xE114      	BNZ         L_interrupt49
;PruebaConfiguracion.c,307 :: 		if (i_rs485<(numDatosRS485)){
0x016A	0x0E00      	MOVLW       0
0x016C	0x5C23      	SUBWF       _i_rs485+1, 0 
0x016E	0xE102      	BNZ         L__interrupt85
0x0170	0x5020      	MOVF        _numDatosRS485, 0 
0x0172	0x5C22      	SUBWF       _i_rs485, 0 
L__interrupt85:
0x0174	0xE20B      	BC          L_interrupt50
;PruebaConfiguracion.c,308 :: 		inputPyloadRS485[i_rs485] = byteRS485;
0x0176	0x0E69      	MOVLW       _inputPyloadRS485
0x0178	0x2422      	ADDWF       _i_rs485, 0 
0x017A	0x6EE1      	MOVWF       FSR1L 
0x017C	0x0E00      	MOVLW       hi_addr(_inputPyloadRS485)
0x017E	0x2023      	ADDWFC      _i_rs485+1, 0 
0x0180	0x6EE2      	MOVWF       FSR1H 
0x0182	0xFFE6C01D  	MOVFF       _byteRS485, POSTINC1
;PruebaConfiguracion.c,309 :: 		i_rs485++;
0x0186	0x4A22      	INFSNZ      _i_rs485, 1 
0x0188	0x2A23      	INCF        _i_rs485+1, 1 
;PruebaConfiguracion.c,310 :: 		} else {
0x018A	0xD003      	BRA         L_interrupt51
L_interrupt50:
;PruebaConfiguracion.c,311 :: 		banRSI = 0;                                                        //Limpia la bandera de inicio de trama
0x018C	0x6A1F      	CLRF        _banRSI 
;PruebaConfiguracion.c,312 :: 		banRSC = 1;                                                        //Activa la bandera de trama completa
0x018E	0x0E01      	MOVLW       1
0x0190	0x6E1E      	MOVWF       _banRSC 
;PruebaConfiguracion.c,313 :: 		}
L_interrupt51:
;PruebaConfiguracion.c,314 :: 		}
L_interrupt49:
;PruebaConfiguracion.c,317 :: 		if ((banRSI==0)&&(banRSC==0)){
0x0192	0x501F      	MOVF        _banRSI, 0 
0x0194	0x0A00      	XORLW       0
0x0196	0xE10A      	BNZ         L_interrupt54
0x0198	0x501E      	MOVF        _banRSC, 0 
0x019A	0x0A00      	XORLW       0
0x019C	0xE107      	BNZ         L_interrupt54
L__interrupt68:
;PruebaConfiguracion.c,318 :: 		if (byteRS485==0x3A){                                                 //Verifica si el primer byte recibido sea el byte de inicio de trama
0x019E	0x501D      	MOVF        _byteRS485, 0 
0x01A0	0x0A3A      	XORLW       58
0x01A2	0xE104      	BNZ         L_interrupt55
;PruebaConfiguracion.c,319 :: 		banRSI = 1;
0x01A4	0x0E01      	MOVLW       1
0x01A6	0x6E1F      	MOVWF       _banRSI 
;PruebaConfiguracion.c,320 :: 		i_rs485 = 0;
0x01A8	0x6A22      	CLRF        _i_rs485 
0x01AA	0x6A23      	CLRF        _i_rs485+1 
;PruebaConfiguracion.c,321 :: 		}
L_interrupt55:
;PruebaConfiguracion.c,322 :: 		}
L_interrupt54:
;PruebaConfiguracion.c,323 :: 		if ((banRSI==1)&&(byteRS485!=0x3A)&&(i_rs485<4)){
0x01AC	0x501F      	MOVF        _banRSI, 0 
0x01AE	0x0A01      	XORLW       1
0x01B0	0xE113      	BNZ         L_interrupt58
0x01B2	0x501D      	MOVF        _byteRS485, 0 
0x01B4	0x0A3A      	XORLW       58
0x01B6	0xE010      	BZ          L_interrupt58
0x01B8	0x0E00      	MOVLW       0
0x01BA	0x5C23      	SUBWF       _i_rs485+1, 0 
0x01BC	0xE102      	BNZ         L__interrupt86
0x01BE	0x0E04      	MOVLW       4
0x01C0	0x5C22      	SUBWF       _i_rs485, 0 
L__interrupt86:
0x01C2	0xE20A      	BC          L_interrupt58
L__interrupt67:
;PruebaConfiguracion.c,324 :: 		tramaCabeceraRS485[i_rs485] = byteRS485;                              //Recupera los datos de cabecera de la trama UART: [Direccion, Funcion, Subfuncion, NumeroDatos]
0x01C4	0x0E78      	MOVLW       _tramaCabeceraRS485
0x01C6	0x2422      	ADDWF       _i_rs485, 0 
0x01C8	0x6EE1      	MOVWF       FSR1L 
0x01CA	0x0E00      	MOVLW       hi_addr(_tramaCabeceraRS485)
0x01CC	0x2023      	ADDWFC      _i_rs485+1, 0 
0x01CE	0x6EE2      	MOVWF       FSR1H 
0x01D0	0xFFE6C01D  	MOVFF       _byteRS485, POSTINC1
;PruebaConfiguracion.c,325 :: 		i_rs485++;
0x01D4	0x4A22      	INFSNZ      _i_rs485, 1 
0x01D6	0x2A23      	INCF        _i_rs485+1, 1 
;PruebaConfiguracion.c,326 :: 		}
L_interrupt58:
;PruebaConfiguracion.c,327 :: 		if ((banRSI==1)&&(i_rs485==4)){
0x01D8	0x501F      	MOVF        _banRSI, 0 
0x01DA	0x0A01      	XORLW       1
0x01DC	0xE11A      	BNZ         L_interrupt61
0x01DE	0x0E00      	MOVLW       0
0x01E0	0x1823      	XORWF       _i_rs485+1, 0 
0x01E2	0xE102      	BNZ         L__interrupt87
0x01E4	0x0E04      	MOVLW       4
0x01E6	0x1822      	XORWF       _i_rs485, 0 
L__interrupt87:
0x01E8	0xE114      	BNZ         L_interrupt61
L__interrupt66:
;PruebaConfiguracion.c,329 :: 		if (tramaCabeceraRS485[0]==idSolicitud){
0x01EA	0x0100      	MOVLB       0
0x01EC	0x5178      	MOVF        _tramaCabeceraRS485, 0, 1
0x01EE	0x182E      	XORWF       _idSolicitud, 0 
0x01F0	0xE10C      	BNZ         L_interrupt62
;PruebaConfiguracion.c,331 :: 		funcionRS485 = tramaCabeceraRS485[1];
0x01F2	0xF024C079  	MOVFF       _tramaCabeceraRS485+1, _funcionRS485
;PruebaConfiguracion.c,332 :: 		subFuncionRS485 = tramaCabeceraRS485[2];
0x01F6	0xF021C07A  	MOVFF       _tramaCabeceraRS485+2, _subFuncionRS485
;PruebaConfiguracion.c,333 :: 		numDatosRS485 = tramaCabeceraRS485[3];
0x01FA	0xF020C07B  	MOVFF       _tramaCabeceraRS485+3, _numDatosRS485
;PruebaConfiguracion.c,334 :: 		idSolicitud = 0;                                                   //Encera el idSolicitud
0x01FE	0x6A2E      	CLRF        _idSolicitud 
;PruebaConfiguracion.c,335 :: 		i_rs485 = 0;                                                       //Encera el subindice para almacenar el payload
0x0200	0x6A22      	CLRF        _i_rs485 
0x0202	0x6A23      	CLRF        _i_rs485+1 
;PruebaConfiguracion.c,336 :: 		banRSI = 2;                                                        //Cambia el valor de la bandera para salir del bucle
0x0204	0x0E02      	MOVLW       2
0x0206	0x6E1F      	MOVWF       _banRSI 
;PruebaConfiguracion.c,338 :: 		} else {
0x0208	0xD004      	BRA         L_interrupt63
L_interrupt62:
;PruebaConfiguracion.c,339 :: 		banRSI = 0;
0x020A	0x6A1F      	CLRF        _banRSI 
;PruebaConfiguracion.c,340 :: 		banRSC = 0;
0x020C	0x6A1E      	CLRF        _banRSC 
;PruebaConfiguracion.c,341 :: 		i_rs485 = 0;
0x020E	0x6A22      	CLRF        _i_rs485 
0x0210	0x6A23      	CLRF        _i_rs485+1 
;PruebaConfiguracion.c,342 :: 		}
L_interrupt63:
;PruebaConfiguracion.c,343 :: 		}
L_interrupt61:
;PruebaConfiguracion.c,346 :: 		if (banRSC==1){
0x0212	0x501E      	MOVF        _banRSC, 0 
0x0214	0x0A01      	XORLW       1
0x0216	0xE102      	BNZ         L_interrupt64
;PruebaConfiguracion.c,347 :: 		TEST = ~TEST;
0x0218	0x7481      	BTG         RB2_bit, BitPos(RB2_bit+0) 
;PruebaConfiguracion.c,360 :: 		banRSC = 0;
0x021A	0x6A1E      	CLRF        _banRSC 
;PruebaConfiguracion.c,361 :: 		}
L_interrupt64:
;PruebaConfiguracion.c,363 :: 		}
L_interrupt48:
;PruebaConfiguracion.c,368 :: 		if (RC2IF_bit==1){
0x021C	0xBAA4      	BTFSC       RC2IF_bit, BitPos(RC2IF_bit+0) 
;PruebaConfiguracion.c,370 :: 		RC2IF_bit = 0;                                                           //Limpia la bandera de interrupcion
0x021E	0x9AA4      	BCF         RC2IF_bit, BitPos(RC2IF_bit+0) 
;PruebaConfiguracion.c,373 :: 		}
L_interrupt65:
;PruebaConfiguracion.c,376 :: 		}
L_end_interrupt:
L__interrupt82:
0x0220	0xF000C017  	MOVFF       23, R0
0x0224	0xF001C016  	MOVFF       22, R1
0x0228	0xF00DC015  	MOVFF       21, R13
0x022C	0x0011      	RETFIE      1
; end of _interrupt
_SPI1_Init_Advanced:
;__Lib_SPI_c345b123.c,43 :: 		
;__Lib_SPI_c345b123.c,44 :: 		
0x022E	0x9AC6      	BCF         SSP1CON1, 5 
;__Lib_SPI_c345b123.c,45 :: 		
0x0230	0x0EFF      	MOVLW       _SPI1_Read
0x0232	0x0100      	MOVLB       0
0x0234	0x6F87      	MOVWF       _SPI_Rd_Ptr, 1
0x0236	0x0EFF      	MOVLW       hi_addr(_SPI1_Read)
0x0238	0x6F88      	MOVWF       _SPI_Rd_Ptr+1, 1
0x023A	0x0EFF      	MOVLW       FARG_SPI1_Read_buffer
0x023C	0x6F89      	MOVWF       _SPI_Rd_Ptr+2, 1
0x023E	0x0EFF      	MOVLW       hi_addr(FARG_SPI1_Read_buffer)
0x0240	0x6F8A      	MOVWF       _SPI_Rd_Ptr+3, 1
;__Lib_SPI_c345b123.c,46 :: 		
0x0242	0x0EFF      	MOVLW       _SPI1_Write
0x0244	0x6F8B      	MOVWF       _SPI_Wr_Ptr, 1
0x0246	0x0EFF      	MOVLW       hi_addr(_SPI1_Write)
0x0248	0x6F8C      	MOVWF       _SPI_Wr_Ptr+1, 1
0x024A	0x0EFF      	MOVLW       FARG_SPI1_Write_data_
0x024C	0x6F8D      	MOVWF       _SPI_Wr_Ptr+2, 1
0x024E	0x0EFF      	MOVLW       hi_addr(FARG_SPI1_Write_data_)
0x0250	0x6F8E      	MOVWF       _SPI_Wr_Ptr+3, 1
;__Lib_SPI_c345b123.c,48 :: 		
0x0252	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;__Lib_SPI_c345b123.c,49 :: 		
0x0254	0x5193      	MOVF        FARG_SPI1_Init_Advanced_master, 0, 1
0x0256	0x0A04      	XORLW       4
0x0258	0xE102      	BNZ         L_SPI1_Init_Advanced0
0x025A	0x8694      	BSF         TRISC3_bit, BitPos(TRISC3_bit+0) 
0x025C	0xD001      	BRA         L_SPI1_Init_Advanced1
L_SPI1_Init_Advanced0:
;__Lib_SPI_c345b123.c,50 :: 		
0x025E	0x9694      	BCF         TRISC3_bit, BitPos(TRISC3_bit+0) 
L_SPI1_Init_Advanced1:
;__Lib_SPI_c345b123.c,51 :: 		
0x0260	0x8894      	BSF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;__Lib_SPI_c345b123.c,53 :: 		
0x0262	0x6AC6      	CLRF        SSP1CON1 
;__Lib_SPI_c345b123.c,54 :: 		
0x0264	0x9CC7      	BCF         SSP1STAT, 6 
;__Lib_SPI_c345b123.c,55 :: 		
0x0266	0x9EC7      	BCF         SSP1STAT, 7 
;__Lib_SPI_c345b123.c,56 :: 		
0x0268	0x5193      	MOVF        FARG_SPI1_Init_Advanced_master, 0, 1
0x026A	0x12C6      	IORWF       SSP1CON1, 1 
;__Lib_SPI_c345b123.c,57 :: 		
0x026C	0x5195      	MOVF        FARG_SPI1_Init_Advanced_clock_idle, 0, 1
0x026E	0x12C6      	IORWF       SSP1CON1, 1 
;__Lib_SPI_c345b123.c,58 :: 		
0x0270	0x5194      	MOVF        FARG_SPI1_Init_Advanced_data_sample, 0, 1
0x0272	0x12C7      	IORWF       SSP1STAT, 1 
;__Lib_SPI_c345b123.c,60 :: 		
0x0274	0x5395      	MOVF        FARG_SPI1_Init_Advanced_clock_idle, 1, 1
0x0276	0xE005      	BZ          L_SPI1_Init_Advanced2
;__Lib_SPI_c345b123.c,61 :: 		
0x0278	0x5196      	MOVF        FARG_SPI1_Init_Advanced_transmit_edge, 0, 1
0x027A	0x0A00      	XORLW       0
0x027C	0xB4D8      	BTFSC       STATUS, 2 
;__Lib_SPI_c345b123.c,62 :: 		
0x027E	0x8CC7      	BSF         SSP1STAT, 6 
L_SPI1_Init_Advanced3:
;__Lib_SPI_c345b123.c,63 :: 		
0x0280	0xD003      	BRA         L_SPI1_Init_Advanced4
L_SPI1_Init_Advanced2:
;__Lib_SPI_c345b123.c,65 :: 		
0x0282	0x5396      	MOVF        FARG_SPI1_Init_Advanced_transmit_edge, 1, 1
0x0284	0xA4D8      	BTFSS       STATUS, 2 
;__Lib_SPI_c345b123.c,66 :: 		
0x0286	0x8CC7      	BSF         SSP1STAT, 6 
L_SPI1_Init_Advanced5:
;__Lib_SPI_c345b123.c,67 :: 		
L_SPI1_Init_Advanced4:
;__Lib_SPI_c345b123.c,68 :: 		
0x0288	0x8AC6      	BSF         SSP1CON1, 5 
;__Lib_SPI_c345b123.c,69 :: 		
L_end_SPI1_Init_Advanced:
0x028A	0x0012      	RETURN      0
; end of _SPI1_Init_Advanced
_UART1_Init:
;__Lib_UART_c67b67.c,20 :: 		
;__Lib_UART_c67b67.c,23 :: 		
0x028C	0x0EFF      	MOVLW       _UART1_Write
0x028E	0x0100      	MOVLB       0
0x0290	0x6F8F      	MOVWF       _UART_Wr_Ptr, 1
0x0292	0x0EFF      	MOVLW       hi_addr(_UART1_Write)
0x0294	0x6F90      	MOVWF       _UART_Wr_Ptr+1, 1
0x0296	0x0EFF      	MOVLW       FARG_UART1_Write_data_
0x0298	0x6F91      	MOVWF       _UART_Wr_Ptr+2, 1
0x029A	0x0EFF      	MOVLW       hi_addr(FARG_UART1_Write_data_)
0x029C	0x6F92      	MOVWF       _UART_Wr_Ptr+3, 1
;__Lib_UART_c67b67.c,24 :: 		
0x029E	0x0E0A      	MOVLW       _UART1_Read
0x02A0	0x6F61      	MOVWF       _UART_Rd_Ptr, 1
0x02A2	0x0E04      	MOVLW       hi_addr(_UART1_Read)
0x02A4	0x6F62      	MOVWF       _UART_Rd_Ptr+1, 1
0x02A6	0x0E00      	MOVLW       0
0x02A8	0x6F63      	MOVWF       _UART_Rd_Ptr+2, 1
0x02AA	0x0E00      	MOVLW       0
0x02AC	0x6F64      	MOVWF       _UART_Rd_Ptr+3, 1
;__Lib_UART_c67b67.c,25 :: 		
0x02AE	0x0EFF      	MOVLW       _UART1_Data_Ready
0x02B0	0x6F65      	MOVWF       _UART_Rdy_Ptr, 1
0x02B2	0x0EFF      	MOVLW       hi_addr(_UART1_Data_Ready)
0x02B4	0x6F66      	MOVWF       _UART_Rdy_Ptr+1, 1
0x02B6	0x0E00      	MOVLW       0
0x02B8	0x6F67      	MOVWF       _UART_Rdy_Ptr+2, 1
0x02BA	0x0E00      	MOVLW       0
0x02BC	0x6F68      	MOVWF       _UART_Rdy_Ptr+3, 1
;__Lib_UART_c67b67.c,26 :: 		
0x02BE	0x0EFF      	MOVLW       _UART1_Tx_Idle
0x02C0	0x6E59      	MOVWF       _UART_Tx_Idle_Ptr 
0x02C2	0x0EFF      	MOVLW       hi_addr(_UART1_Tx_Idle)
0x02C4	0x6E5A      	MOVWF       _UART_Tx_Idle_Ptr+1 
0x02C6	0x0E00      	MOVLW       0
0x02C8	0x6E5B      	MOVWF       _UART_Tx_Idle_Ptr+2 
0x02CA	0x0E00      	MOVLW       0
0x02CC	0x6E5C      	MOVWF       _UART_Tx_Idle_Ptr+3 
;__Lib_UART_c67b67.c,28 :: 		
0x02CE	0x8AAC      	BSF         TXSTA, 5 
;__Lib_UART_c67b67.c,29 :: 		
0x02D0	0x0E90      	MOVLW       144
0x02D2	0x6EAB      	MOVWF       RCSTA 
;__Lib_UART_c67b67.c,30 :: 		
0x02D4	0x8E94      	BSF         TRISC7_bit, BitPos(TRISC7_bit+0) 
;__Lib_UART_c67b67.c,31 :: 		
0x02D6	0x9C94      	BCF         TRISC6_bit, BitPos(TRISC6_bit+0) 
;__Lib_UART_c67b67.c,33 :: 		
L_UART1_Init0:
0x02D8	0xAA9E      	BTFSS       PIR1, 5 
0x02DA	0xD003      	BRA         L_UART1_Init1
;__Lib_UART_c67b67.c,34 :: 		
0x02DC	0xF000CFAE  	MOVFF       RCREG, R0
0x02E0	0xD7FB      	BRA         L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67b67.c,35 :: 		
L_end_UART1_Init:
0x02E2	0x0012      	RETURN      0
; end of _UART1_Init
_UART2_Init:
;__Lib_UART_c67b67.c,117 :: 		
;__Lib_UART_c67b67.c,120 :: 		
0x02E4	0x0EFF      	MOVLW       _UART2_Write
0x02E6	0x0100      	MOVLB       0
0x02E8	0x6F8F      	MOVWF       _UART_Wr_Ptr, 1
0x02EA	0x0EFF      	MOVLW       hi_addr(_UART2_Write)
0x02EC	0x6F90      	MOVWF       _UART_Wr_Ptr+1, 1
0x02EE	0x0EFF      	MOVLW       FARG_UART2_Write_data_
0x02F0	0x6F91      	MOVWF       _UART_Wr_Ptr+2, 1
0x02F2	0x0EFF      	MOVLW       hi_addr(FARG_UART2_Write_data_)
0x02F4	0x6F92      	MOVWF       _UART_Wr_Ptr+3, 1
;__Lib_UART_c67b67.c,121 :: 		
0x02F6	0x0EFF      	MOVLW       _UART2_Read
0x02F8	0x6F61      	MOVWF       _UART_Rd_Ptr, 1
0x02FA	0x0EFF      	MOVLW       hi_addr(_UART2_Read)
0x02FC	0x6F62      	MOVWF       _UART_Rd_Ptr+1, 1
0x02FE	0x0E00      	MOVLW       0
0x0300	0x6F63      	MOVWF       _UART_Rd_Ptr+2, 1
0x0302	0x0E00      	MOVLW       0
0x0304	0x6F64      	MOVWF       _UART_Rd_Ptr+3, 1
;__Lib_UART_c67b67.c,122 :: 		
0x0306	0x0EFF      	MOVLW       _UART2_Data_Ready
0x0308	0x6F65      	MOVWF       _UART_Rdy_Ptr, 1
0x030A	0x0EFF      	MOVLW       hi_addr(_UART2_Data_Ready)
0x030C	0x6F66      	MOVWF       _UART_Rdy_Ptr+1, 1
0x030E	0x0E00      	MOVLW       0
0x0310	0x6F67      	MOVWF       _UART_Rdy_Ptr+2, 1
0x0312	0x0E00      	MOVLW       0
0x0314	0x6F68      	MOVWF       _UART_Rdy_Ptr+3, 1
;__Lib_UART_c67b67.c,123 :: 		
0x0316	0x0EFF      	MOVLW       _UART2_Tx_Idle
0x0318	0x6E59      	MOVWF       _UART_Tx_Idle_Ptr 
0x031A	0x0EFF      	MOVLW       hi_addr(_UART2_Tx_Idle)
0x031C	0x6E5A      	MOVWF       _UART_Tx_Idle_Ptr+1 
0x031E	0x0E00      	MOVLW       0
0x0320	0x6E5B      	MOVWF       _UART_Tx_Idle_Ptr+2 
0x0322	0x0E00      	MOVLW       0
0x0324	0x6E5C      	MOVWF       _UART_Tx_Idle_Ptr+3 
;__Lib_UART_c67b67.c,125 :: 		
0x0326	0x8A72      	BSF         TXSTA2, 5 
;__Lib_UART_c67b67.c,126 :: 		
0x0328	0x0E90      	MOVLW       144
0x032A	0x6E71      	MOVWF       RCSTA2 
;__Lib_UART_c67b67.c,127 :: 		
0x032C	0x8E93      	BSF         TRISB7_bit, BitPos(TRISB7_bit+0) 
;__Lib_UART_c67b67.c,128 :: 		
0x032E	0x9C93      	BCF         TRISB6_bit, BitPos(TRISB6_bit+0) 
;__Lib_UART_c67b67.c,130 :: 		
L_UART2_Init16:
0x0330	0xAAA4      	BTFSS       RC2IF_bit, BitPos(RC2IF_bit+0) 
0x0332	0xD003      	BRA         L_UART2_Init17
;__Lib_UART_c67b67.c,131 :: 		
0x0334	0xF000CF74  	MOVFF       RCREG2, R0
0x0338	0xD7FB      	BRA         L_UART2_Init16
L_UART2_Init17:
;__Lib_UART_c67b67.c,132 :: 		
L_end_UART2_Init:
0x033A	0x0012      	RETURN      0
; end of _UART2_Init
_CambiarEstadoBandera:
;PruebaConfiguracion.c,158 :: 		void CambiarEstadoBandera(unsigned short bandera, unsigned short estado){
;PruebaConfiguracion.c,160 :: 		if (estado==1){
0x033C	0x505F      	MOVF        FARG_CambiarEstadoBandera_estado, 0 
0x033E	0x0A01      	XORLW       1
0x0340	0xE111      	BNZ         L_CambiarEstadoBandera13
;PruebaConfiguracion.c,162 :: 		banSPI0 = 3;
0x0342	0x0E03      	MOVLW       3
0x0344	0x6E27      	MOVWF       _banSPI0 
;PruebaConfiguracion.c,163 :: 		banSPI1 = 3;
0x0346	0x0E03      	MOVLW       3
0x0348	0x6E2F      	MOVWF       _banSPI1 
;PruebaConfiguracion.c,165 :: 		switch (bandera){
0x034A	0xD006      	BRA         L_CambiarEstadoBandera14
;PruebaConfiguracion.c,166 :: 		case 0:
L_CambiarEstadoBandera16:
;PruebaConfiguracion.c,167 :: 		banSPI0 = 1;
0x034C	0x0E01      	MOVLW       1
0x034E	0x6E27      	MOVWF       _banSPI0 
;PruebaConfiguracion.c,168 :: 		break;
0x0350	0xD009      	BRA         L_CambiarEstadoBandera15
;PruebaConfiguracion.c,169 :: 		case 1:
L_CambiarEstadoBandera17:
;PruebaConfiguracion.c,170 :: 		banSPI1 = 1;
0x0352	0x0E01      	MOVLW       1
0x0354	0x6E2F      	MOVWF       _banSPI1 
;PruebaConfiguracion.c,171 :: 		break;
0x0356	0xD006      	BRA         L_CambiarEstadoBandera15
;PruebaConfiguracion.c,172 :: 		}
L_CambiarEstadoBandera14:
0x0358	0x505E      	MOVF        FARG_CambiarEstadoBandera_bandera, 0 
0x035A	0x0A00      	XORLW       0
0x035C	0xE0F7      	BZ          L_CambiarEstadoBandera16
0x035E	0x505E      	MOVF        FARG_CambiarEstadoBandera_bandera, 0 
0x0360	0x0A01      	XORLW       1
0x0362	0xE0F7      	BZ          L_CambiarEstadoBandera17
L_CambiarEstadoBandera15:
;PruebaConfiguracion.c,173 :: 		}
L_CambiarEstadoBandera13:
;PruebaConfiguracion.c,175 :: 		if (estado==0){
0x0364	0x505F      	MOVF        FARG_CambiarEstadoBandera_estado, 0 
0x0366	0x0A00      	XORLW       0
0x0368	0xE102      	BNZ         L_CambiarEstadoBandera18
;PruebaConfiguracion.c,176 :: 		banSPI0 = 0;
0x036A	0x6A27      	CLRF        _banSPI0 
;PruebaConfiguracion.c,177 :: 		banSPI1 = 0;
0x036C	0x6A2F      	CLRF        _banSPI1 
;PruebaConfiguracion.c,178 :: 		}
L_CambiarEstadoBandera18:
;PruebaConfiguracion.c,179 :: 		}
L_end_CambiarEstadoBandera:
0x036E	0x0012      	RETURN      0
; end of _CambiarEstadoBandera
_ResponderSPI:
;PruebaConfiguracion.c,182 :: 		void ResponderSPI(unsigned char *cabeceraRespuesta, unsigned char *payloadRespuesta){
;PruebaConfiguracion.c,185 :: 		tramaRespuestaSPI[0] = cabeceraRespuesta[0];
0x0370	0xFFE9C097  	MOVFF       FARG_ResponderSPI_cabeceraRespuesta, FSR0L
0x0374	0xFFEAC098  	MOVFF       FARG_ResponderSPI_cabeceraRespuesta+1, FSR0H
0x0378	0xF031CFEE  	MOVFF       POSTINC0, _tramaRespuestaSPI
;PruebaConfiguracion.c,186 :: 		tramaRespuestaSPI[1] = cabeceraRespuesta[1];
0x037C	0x0E01      	MOVLW       1
0x037E	0x0100      	MOVLB       0
0x0380	0x2597      	ADDWF       FARG_ResponderSPI_cabeceraRespuesta, 0, 1
0x0382	0x6EE9      	MOVWF       FSR0L 
0x0384	0x0E00      	MOVLW       0
0x0386	0x2198      	ADDWFC      FARG_ResponderSPI_cabeceraRespuesta+1, 0, 1
0x0388	0x6EEA      	MOVWF       FSR0H 
0x038A	0xF032CFEE  	MOVFF       POSTINC0, _tramaRespuestaSPI+1
;PruebaConfiguracion.c,187 :: 		tramaRespuestaSPI[2] = cabeceraRespuesta[2];
0x038E	0x0E02      	MOVLW       2
0x0390	0x2597      	ADDWF       FARG_ResponderSPI_cabeceraRespuesta, 0, 1
0x0392	0x6EE9      	MOVWF       FSR0L 
0x0394	0x0E00      	MOVLW       0
0x0396	0x2198      	ADDWFC      FARG_ResponderSPI_cabeceraRespuesta+1, 0, 1
0x0398	0x6EEA      	MOVWF       FSR0H 
0x039A	0xF033CFEE  	MOVFF       POSTINC0, _tramaRespuestaSPI+2
;PruebaConfiguracion.c,188 :: 		tramaRespuestaSPI[3] = cabeceraRespuesta[3];
0x039E	0x0E03      	MOVLW       3
0x03A0	0x2597      	ADDWF       FARG_ResponderSPI_cabeceraRespuesta, 0, 1
0x03A2	0x6EE9      	MOVWF       FSR0L 
0x03A4	0x0E00      	MOVLW       0
0x03A6	0x2198      	ADDWFC      FARG_ResponderSPI_cabeceraRespuesta+1, 0, 1
0x03A8	0x6EEA      	MOVWF       FSR0H 
0x03AA	0xF034CFEE  	MOVFF       POSTINC0, _tramaRespuestaSPI+3
;PruebaConfiguracion.c,191 :: 		for (j=0;j<(cabeceraRespuesta[3]);j++){
0x03AE	0x6A2C      	CLRF        _j 
0x03B0	0x6A2D      	CLRF        _j+1 
L_ResponderSPI19:
0x03B2	0x0E03      	MOVLW       3
0x03B4	0x2597      	ADDWF       FARG_ResponderSPI_cabeceraRespuesta, 0, 1
0x03B6	0x6ED9      	MOVWF       FSR2L 
0x03B8	0x0E00      	MOVLW       0
0x03BA	0x2198      	ADDWFC      FARG_ResponderSPI_cabeceraRespuesta+1, 0, 1
0x03BC	0x6EDA      	MOVWF       FSR2H 
0x03BE	0xF001CFDE  	MOVFF       POSTINC2, R1
0x03C2	0x0E00      	MOVLW       0
0x03C4	0x5C2D      	SUBWF       _j+1, 0 
0x03C6	0xE102      	BNZ         L__ResponderSPI80
0x03C8	0x5001      	MOVF        R1, 0 
0x03CA	0x5C2C      	SUBWF       _j, 0 
L__ResponderSPI80:
0x03CC	0xE217      	BC          L_ResponderSPI20
;PruebaConfiguracion.c,192 :: 		tramaRespuestaSPI[j+4] = payloadRespuesta[j];
0x03CE	0x0E04      	MOVLW       4
0x03D0	0x242C      	ADDWF       _j, 0 
0x03D2	0x6E00      	MOVWF       R0 
0x03D4	0x0E00      	MOVLW       0
0x03D6	0x202D      	ADDWFC      _j+1, 0 
0x03D8	0x6E01      	MOVWF       R1 
0x03DA	0x0E31      	MOVLW       _tramaRespuestaSPI
0x03DC	0x2400      	ADDWF       R0, 0 
0x03DE	0x6EE1      	MOVWF       FSR1L 
0x03E0	0x0E00      	MOVLW       hi_addr(_tramaRespuestaSPI)
0x03E2	0x2001      	ADDWFC      R1, 0 
0x03E4	0x6EE2      	MOVWF       FSR1H 
0x03E6	0x502C      	MOVF        _j, 0 
0x03E8	0x2599      	ADDWF       FARG_ResponderSPI_payloadRespuesta, 0, 1
0x03EA	0x6EE9      	MOVWF       FSR0L 
0x03EC	0x502D      	MOVF        _j+1, 0 
0x03EE	0x219A      	ADDWFC      FARG_ResponderSPI_payloadRespuesta+1, 0, 1
0x03F0	0x6EEA      	MOVWF       FSR0H 
0x03F2	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;PruebaConfiguracion.c,191 :: 		for (j=0;j<(cabeceraRespuesta[3]);j++){
0x03F6	0x4A2C      	INFSNZ      _j, 1 
0x03F8	0x2A2D      	INCF        _j+1, 1 
;PruebaConfiguracion.c,193 :: 		}
0x03FA	0xD7DB      	BRA         L_ResponderSPI19
L_ResponderSPI20:
;PruebaConfiguracion.c,201 :: 		RP0 = 1;
0x03FC	0x808B      	BSF         LATC0_bit, BitPos(LATC0_bit+0) 
;PruebaConfiguracion.c,202 :: 		Delay_us(100);
0x03FE	0x0E85      	MOVLW       133
0x0400	0x6E0D      	MOVWF       R13, 0
L_ResponderSPI22:
0x0402	0x2E0D      	DECFSZ      R13, 1, 0
0x0404	0xD7FE      	BRA         L_ResponderSPI22
;PruebaConfiguracion.c,203 :: 		RP0 = 0;
0x0406	0x908B      	BCF         LATC0_bit, BitPos(LATC0_bit+0) 
;PruebaConfiguracion.c,205 :: 		}
L_end_ResponderSPI:
0x0408	0x0012      	RETURN      0
; end of _ResponderSPI
_UART1_Read:
;__Lib_UART_c67b67.c,44 :: 		
;__Lib_UART_c67b67.c,47 :: 		
0x040A	0xF001CFAE  	MOVFF       RCREG, R1
;__Lib_UART_c67b67.c,48 :: 		
0x040E	0xA2AB      	BTFSS       RCSTA, 1 
0x0410	0xD002      	BRA         L_UART1_Read2
;__Lib_UART_c67b67.c,49 :: 		
0x0412	0x98AB      	BCF         RCSTA, 4 
;__Lib_UART_c67b67.c,50 :: 		
0x0414	0x88AB      	BSF         RCSTA, 4 
;__Lib_UART_c67b67.c,51 :: 		
L_UART1_Read2:
;__Lib_UART_c67b67.c,52 :: 		
0x0416	0xF000C001  	MOVFF       R1, R0
;__Lib_UART_c67b67.c,53 :: 		
L_end_UART1_Read:
0x041A	0x0012      	RETURN      0
; end of _UART1_Read
_ConfiguracionPrincipal:
;PruebaConfiguracion.c,107 :: 		void ConfiguracionPrincipal(){
;PruebaConfiguracion.c,110 :: 		OSCCON.IDLEN=1;                                    //Entra en modo IDLE durante la instruccion SLEEP
0x041C	0x8ED3      	BSF         OSCCON, 7 
;PruebaConfiguracion.c,111 :: 		OSCCON.IRCF2=1;                                    //HFINTOSC=16MHz  IRFC=111
0x041E	0x8CD3      	BSF         OSCCON, 6 
;PruebaConfiguracion.c,112 :: 		OSCCON.IRCF1=1;
0x0420	0x8AD3      	BSF         OSCCON, 5 
;PruebaConfiguracion.c,113 :: 		OSCCON.IRCF0=1;
0x0422	0x88D3      	BSF         OSCCON, 4 
;PruebaConfiguracion.c,114 :: 		OSCCON.SCS1=1;                                     //System Clock Select bit:  1x=Internal oscillator block
0x0424	0x82D3      	BSF         OSCCON, 1 
;PruebaConfiguracion.c,115 :: 		OSCCON.SCS0=1;
0x0426	0x80D3      	BSF         OSCCON, 0 
;PruebaConfiguracion.c,118 :: 		ANSELA = 0;                                        //Configura PORTA como digital
0x0428	0x010F      	MOVLB       15
0x042A	0x6B38      	CLRF        ANSELA, 1
;PruebaConfiguracion.c,119 :: 		ANSELB = 0;                                        //Configura PORTB como digital
0x042C	0x6B39      	CLRF        ANSELB, 1
;PruebaConfiguracion.c,120 :: 		ANSELC = 0;                                        //Configura PORTC como digital
0x042E	0x6B3A      	CLRF        ANSELC, 1
;PruebaConfiguracion.c,122 :: 		TEST_Direction = 0;                                //Configura el pin TEST como salida
0x0430	0x9493      	BCF         TRISB2_bit, BitPos(TRISB2_bit+0) 
;PruebaConfiguracion.c,123 :: 		RP0_Direction = 0;                                 //Configura el pin RP0 como salida
0x0432	0x9094      	BCF         TRISC0_bit, BitPos(TRISC0_bit+0) 
;PruebaConfiguracion.c,124 :: 		MS1RS485_Direction = 0;                            //Configura el pin MS1RS485 como salida
0x0434	0x9693      	BCF         TRISB3_bit, BitPos(TRISB3_bit+0) 
;PruebaConfiguracion.c,125 :: 		MS2RS485_Direction = 0;                            //Configura el pin MS2RS485 como salida
0x0436	0x9A93      	BCF         TRISB5_bit, BitPos(TRISB5_bit+0) 
;PruebaConfiguracion.c,126 :: 		TRISA5_bit = 1;                                    //SS1 In
0x0438	0x8A92      	BSF         TRISA5_bit, BitPos(TRISA5_bit+0) 
;PruebaConfiguracion.c,127 :: 		TRISC3_bit = 1;                                    //SCK1 In
0x043A	0x8694      	BSF         TRISC3_bit, BitPos(TRISC3_bit+0) 
;PruebaConfiguracion.c,128 :: 		TRISC4_bit = 1;                                    //SDI1 In
0x043C	0x8894      	BSF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;PruebaConfiguracion.c,129 :: 		TRISC5_bit = 0;                                    //SDO1 Out
0x043E	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;PruebaConfiguracion.c,131 :: 		INTCON.GIE = 1;                                    //Habilita las interrupciones globales
0x0440	0x8EF2      	BSF         INTCON, 7 
;PruebaConfiguracion.c,132 :: 		INTCON.PEIE = 1;                                   //Habilita las interrupciones perifericas
0x0442	0x8CF2      	BSF         INTCON, 6 
;PruebaConfiguracion.c,135 :: 		PIE1.SSP1IE = 1;                                   //Activa la interrupcion por SPI
0x0444	0x869D      	BSF         PIE1, 3 
;PruebaConfiguracion.c,136 :: 		PIR1.SSP1IF = 0;                                   //Limpia la bandera de interrupcion por SPI *
0x0446	0x969E      	BCF         PIR1, 3 
;PruebaConfiguracion.c,137 :: 		SPI1_Init_Advanced(_SPI_SLAVE_SS_ENABLE, _SPI_DATA_SAMPLE_END, _SPI_CLK_IDLE_HIGH, _SPI_HIGH_2_LOW);
0x0448	0x0E04      	MOVLW       4
0x044A	0x0100      	MOVLB       0
0x044C	0x6F93      	MOVWF       FARG_SPI1_Init_Advanced_master, 1
0x044E	0x0E80      	MOVLW       128
0x0450	0x6F94      	MOVWF       FARG_SPI1_Init_Advanced_data_sample, 1
0x0452	0x0E10      	MOVLW       16
0x0454	0x6F95      	MOVWF       FARG_SPI1_Init_Advanced_clock_idle, 1
0x0456	0x6B96      	CLRF        FARG_SPI1_Init_Advanced_transmit_edge, 1
0x0458	0xDEEA      	RCALL       _SPI1_Init_Advanced
;PruebaConfiguracion.c,140 :: 		PIE1.RC1IE = 1;                                   //Habilita la interrupcion en UART1 receive
0x045A	0x8A9D      	BSF         PIE1, 5 
;PruebaConfiguracion.c,141 :: 		PIR1.RC1IF = 0;                                   //Limpia la bandera de interrupcion UART1
0x045C	0x9A9E      	BCF         PIR1, 5 
;PruebaConfiguracion.c,142 :: 		PIE3.RC2IE = 1;                                   //Habilita la interrupcion en UART2 receive
0x045E	0x8AA3      	BSF         PIE3, 5 
;PruebaConfiguracion.c,143 :: 		PIR3.RC2IF = 0;                                   //Limpia la bandera de interrupcion
0x0460	0x9AA4      	BCF         PIR3, 5 
;PruebaConfiguracion.c,144 :: 		UART1_Init(19200);                                //Inicializa el UART1 a 19200 bps
0x0462	0x86B8      	BSF         BAUDCON, 3, 0
0x0464	0x6AB0      	CLRF        SPBRGH 
0x0466	0x0ECF      	MOVLW       207
0x0468	0x6EAF      	MOVWF       SPBRG 
0x046A	0x84AC      	BSF         TXSTA, 2, 0
0x046C	0xDF0F      	RCALL       _UART1_Init
;PruebaConfiguracion.c,145 :: 		UART2_Init(19200);                                //Inicializa el UART2 a 19200 bps
0x046E	0x8670      	BSF         BAUDCON2, 3, 0
0x0470	0x6A76      	CLRF        SPBRGH2 
0x0472	0x0ECF      	MOVLW       207
0x0474	0x6E75      	MOVWF       SPBRG2 
0x0476	0x8472      	BSF         TXSTA2, 2, 0
0x0478	0xDF35      	RCALL       _UART2_Init
;PruebaConfiguracion.c,154 :: 		Delay_ms(100);                                     //Espera hasta que se estabilicen los cambios
0x047A	0x0E03      	MOVLW       3
0x047C	0x6E0B      	MOVWF       R11, 0
0x047E	0x0E08      	MOVLW       8
0x0480	0x6E0C      	MOVWF       R12, 0
0x0482	0x0E77      	MOVLW       119
0x0484	0x6E0D      	MOVWF       R13, 0
L_ConfiguracionPrincipal12:
0x0486	0x2E0D      	DECFSZ      R13, 1, 0
0x0488	0xD7FE      	BRA         L_ConfiguracionPrincipal12
0x048A	0x2E0C      	DECFSZ      R12, 1, 0
0x048C	0xD7FC      	BRA         L_ConfiguracionPrincipal12
0x048E	0x2E0B      	DECFSZ      R11, 1, 0
0x0490	0xD7FA      	BRA         L_ConfiguracionPrincipal12
;PruebaConfiguracion.c,155 :: 		}
L_end_ConfiguracionPrincipal:
0x0492	0x0012      	RETURN      0
; end of _ConfiguracionPrincipal
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0494	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0496	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x049A	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x049C	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x049E	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x04A0	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x04A2	0x0012      	RETURN      0
; end of ___CC2DW
_main:
0x04A4	0x0EE1      	MOVLW       225
0x04A6	0x6E18      	MOVWF       _tramaPruebaSPI 
0x04A8	0x0EE2      	MOVLW       226
0x04AA	0x6E19      	MOVWF       25 
0x04AC	0x0EE3      	MOVLW       227
0x04AE	0x6E1A      	MOVWF       26 
0x04B0	0x0EE4      	MOVLW       228
0x04B2	0x6E1B      	MOVWF       27 
0x04B4	0x0EE5      	MOVLW       229
0x04B6	0x6E1C      	MOVWF       28 
;PruebaConfiguracion.c,57 :: 		void main() {
;PruebaConfiguracion.c,59 :: 		ConfiguracionPrincipal();
0x04B8	0xDFB1      	RCALL       _ConfiguracionPrincipal
;PruebaConfiguracion.c,63 :: 		i = 0;
0x04BA	0x6A2A      	CLRF        _i 
0x04BC	0x6A2B      	CLRF        _i+1 
;PruebaConfiguracion.c,64 :: 		j = 0;
0x04BE	0x6A2C      	CLRF        _j 
0x04C0	0x6A2D      	CLRF        _j+1 
;PruebaConfiguracion.c,65 :: 		x = 0;
0x04C2	0x6A28      	CLRF        _x 
0x04C4	0x6A29      	CLRF        _x+1 
;PruebaConfiguracion.c,66 :: 		y = 0;
0x04C6	0x6A25      	CLRF        _y 
0x04C8	0x6A26      	CLRF        _y+1 
;PruebaConfiguracion.c,68 :: 		banSPI0 = 0;
0x04CA	0x6A27      	CLRF        _banSPI0 
;PruebaConfiguracion.c,69 :: 		banSPI1 = 0;
0x04CC	0x6A2F      	CLRF        _banSPI1 
;PruebaConfiguracion.c,70 :: 		bufferSPI = 0;
0x04CE	0x6A30      	CLRF        _bufferSPI 
;PruebaConfiguracion.c,71 :: 		idSolicitud = 0;
0x04D0	0x6A2E      	CLRF        _idSolicitud 
;PruebaConfiguracion.c,73 :: 		banRSI = 0;
0x04D2	0x6A1F      	CLRF        _banRSI 
;PruebaConfiguracion.c,74 :: 		banRSC = 0;
0x04D4	0x6A1E      	CLRF        _banRSC 
;PruebaConfiguracion.c,75 :: 		byteRS485 = 0;
0x04D6	0x6A1D      	CLRF        _byteRS485 
;PruebaConfiguracion.c,76 :: 		i_rs485 = 0;
0x04D8	0x6A22      	CLRF        _i_rs485 
0x04DA	0x6A23      	CLRF        _i_rs485+1 
;PruebaConfiguracion.c,77 :: 		funcionRS485 = 0;
0x04DC	0x6A24      	CLRF        _funcionRS485 
;PruebaConfiguracion.c,78 :: 		subFuncionRS485 = 0;
0x04DE	0x6A21      	CLRF        _subFuncionRS485 
;PruebaConfiguracion.c,79 :: 		numDatosRS485 = 0;
0x04E0	0x6A20      	CLRF        _numDatosRS485 
;PruebaConfiguracion.c,80 :: 		MS1RS485 = 0;
0x04E2	0x968A      	BCF         LATB3_bit, BitPos(LATB3_bit+0) 
;PruebaConfiguracion.c,81 :: 		MS2RS485 = 0;
0x04E4	0x9A8A      	BCF         LATB5_bit, BitPos(LATB5_bit+0) 
;PruebaConfiguracion.c,84 :: 		RP0 = 0;
0x04E6	0x908B      	BCF         LATC0_bit, BitPos(LATC0_bit+0) 
;PruebaConfiguracion.c,85 :: 		TEST = 1;
0x04E8	0x8481      	BSF         RB2_bit, BitPos(RB2_bit+0) 
;PruebaConfiguracion.c,86 :: 		MS1RS485 = 0;
0x04EA	0x968A      	BCF         LATB3_bit, BitPos(LATB3_bit+0) 
;PruebaConfiguracion.c,87 :: 		MS2RS485 = 0;
0x04EC	0x9A8A      	BCF         LATB5_bit, BitPos(LATB5_bit+0) 
;PruebaConfiguracion.c,89 :: 		sumValidacion = 0;
0x04EE	0x6A5D      	CLRF        _sumValidacion 
;PruebaConfiguracion.c,100 :: 		}
L_end_main:
0x04F0	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [550]    _interrupt
0x022E      [94]    _SPI1_Init_Advanced
0x028C      [88]    _UART1_Init
0x02E4      [88]    _UART2_Init
0x033C      [52]    _CambiarEstadoBandera
0x0370     [154]    _ResponderSPI
0x040A      [18]    _UART1_Read
0x041C     [120]    _ConfiguracionPrincipal
0x0494      [16]    ___CC2DW
0x04A4      [78]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    SPI2_Write_tmp_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    UART2_Init_tmp_L0
0x0000       [1]    R0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    UART2_Read___tmp_UART2_Read_L0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0018       [5]    _tramaPruebaSPI
0x001D       [1]    _byteRS485
0x001E       [1]    _banRSC
0x001F       [1]    _banRSI
0x0020       [1]    _numDatosRS485
0x0021       [1]    _subFuncionRS485
0x0022       [2]    _i_rs485
0x0024       [1]    _funcionRS485
0x0025       [2]    _y
0x0027       [1]    _banSPI0
0x0028       [2]    _x
0x002A       [2]    _i
0x002C       [2]    _j
0x002E       [1]    _idSolicitud
0x002F       [1]    _banSPI1
0x0030       [1]    _bufferSPI
0x0031      [20]    _tramaRespuestaSPI
0x0045      [20]    _tramaSolicitudSPI
0x0059       [4]    _UART_Tx_Idle_Ptr
0x005D       [1]    _sumValidacion
0x005E       [1]    FARG_CambiarEstadoBandera_bandera
0x005F       [1]    FARG_CambiarEstadoBandera_estado
0x0061       [4]    _UART_Rd_Ptr
0x0065       [4]    _UART_Rdy_Ptr
0x0069      [15]    _inputPyloadRS485
0x0078       [5]    _tramaCabeceraRS485
0x007D       [5]    _cabeceraSolicitud
0x0082       [5]    _payloadSolicitud
0x0087       [4]    _SPI_Rd_Ptr
0x008B       [4]    _SPI_Wr_Ptr
0x008F       [4]    _UART_Wr_Ptr
0x0093       [1]    FARG_SPI1_Init_Advanced_master
0x0094       [1]    FARG_SPI1_Init_Advanced_data_sample
0x0095       [1]    FARG_SPI1_Init_Advanced_clock_idle
0x0096       [1]    FARG_SPI1_Init_Advanced_transmit_edge
0x0097       [2]    FARG_ResponderSPI_cabeceraRespuesta
0x0099       [2]    FARG_ResponderSPI_payloadRespuesta
0x0F38       [1]    ANSELA
0x0F39       [1]    ANSELB
0x0F3A       [1]    ANSELC
0x0F70       [1]    BAUDCON2
0x0F71       [1]    RCSTA2
0x0F72       [1]    TXSTA2
0x0F74       [1]    RCREG2
0x0F75       [1]    SPBRG2
0x0F76       [1]    SPBRGH2
0x0F81       [0]    TEST
0x0F81       [0]    RB2_bit
0x0F8A       [0]    MS1RS485
0x0F8A       [0]    LATB5_bit
0x0F8A       [0]    MS2RS485
0x0F8A       [0]    LATB3_bit
0x0F8B       [0]    RP0
0x0F8B       [0]    LATC0_bit
0x0F92       [0]    TRISA5_bit
0x0F93       [0]    TRISB5_bit
0x0F93       [0]    TRISB2_bit
0x0F93       [0]    TRISB3_bit
0x0F93       [0]    TRISB6_bit
0x0F93       [0]    MS1RS485_Direction
0x0F93       [0]    MS2RS485_Direction
0x0F93       [0]    TRISB7_bit
0x0F93       [0]    TEST_Direction
0x0F94       [0]    TRISC0_bit
0x0F94       [0]    TRISC3_bit
0x0F94       [0]    RP0_Direction
0x0F94       [0]    TRISC5_bit
0x0F94       [0]    TRISC6_bit
0x0F94       [0]    TRISC7_bit
0x0F94       [0]    TRISC4_bit
0x0F9D       [1]    PIE1
0x0F9E       [1]    PIR1
0x0F9E       [0]    SSP1IF_bit
0x0F9E       [0]    RC1IF_bit
0x0FA3       [1]    PIE3
0x0FA4       [1]    PIR3
0x0FA4       [0]    RC2IF_bit
0x0FAB       [1]    RCSTA
0x0FAC       [1]    TXSTA
0x0FAE       [1]    RCREG
0x0FAF       [1]    SPBRG
0x0FB0       [1]    SPBRGH
0x0FB8       [1]    BAUDCON
0x0FC6       [1]    SSP1CON1
0x0FC7       [1]    SSP1STAT
0x0FC9       [1]    SSP1BUF
0x0FD3       [1]    OSCCON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
