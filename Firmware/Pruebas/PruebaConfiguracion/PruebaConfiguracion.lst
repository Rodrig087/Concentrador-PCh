;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 18/10/2021 17:51:06
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF004EF49  	GOTO        2194
_interrupt:
;PruebaConfiguracion.c,217 :: 		void interrupt(void){
0x0008	0xF017C000  	MOVFF       R0, 23
0x000C	0xF016C001  	MOVFF       R1, 22
0x0010	0xF015C00D  	MOVFF       R13, 21
;PruebaConfiguracion.c,233 :: 		if (SSP1IF_bit==1){
0x0014	0xA69E      	BTFSS       SSP1IF_bit, BitPos(SSP1IF_bit+0) 
0x0016	0xD145      	BRA         L_interrupt22
;PruebaConfiguracion.c,235 :: 		SSP1IF_bit = 0;                                                          //Limpia la bandera de interrupcion por SPI
0x0018	0x969E      	BCF         SSP1IF_bit, BitPos(SSP1IF_bit+0) 
;PruebaConfiguracion.c,236 :: 		bufferSPI = SSP1BUF;                                                     //Guarda el contenido del bufeer (lectura)
0x001A	0xF037CFC9  	MOVFF       SSP1BUF, _bufferSPI
;PruebaConfiguracion.c,241 :: 		if ((banSPI0==0)&&(bufferSPI==0xA0)){
0x001E	0x5030      	MOVF        _banSPI0, 0 
0x0020	0x0A00      	XORLW       0
0x0022	0xE10C      	BNZ         L_interrupt25
0x0024	0x5037      	MOVF        _bufferSPI, 0 
0x0026	0x0AA0      	XORLW       160
0x0028	0xE109      	BNZ         L_interrupt25
L__interrupt119:
;PruebaConfiguracion.c,242 :: 		i = 0;                                                                //Limpia el subindice para guardar la trama SPI
0x002A	0x6A33      	CLRF        _i 
0x002C	0x6A34      	CLRF        _i+1 
;PruebaConfiguracion.c,243 :: 		CambiarEstadoBandera(0,1);                                            //Activa la bandera 0
0x002E	0x0103      	MOVLB       3
0x0030	0x6B9D      	CLRF        FARG_CambiarEstadoBandera_bandera, 1
0x0032	0x0E01      	MOVLW       1
0x0034	0x6F9E      	MOVWF       FARG_CambiarEstadoBandera_estado, 1
0x0036	0xDB21      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,244 :: 		LED1 = 1;
0x0038	0x8481      	BSF         RB2_bit, BitPos(RB2_bit+0) 
;PruebaConfiguracion.c,245 :: 		LED2 = 1;
0x003A	0x8881      	BSF         RB4_bit, BitPos(RB4_bit+0) 
;PruebaConfiguracion.c,246 :: 		}
L_interrupt25:
;PruebaConfiguracion.c,247 :: 		if ((banSPI0==1)&&(bufferSPI!=0xA0)&&(bufferSPI!=0xF0)){
0x003C	0x5030      	MOVF        _banSPI0, 0 
0x003E	0x0A01      	XORLW       1
0x0040	0xE110      	BNZ         L_interrupt28
0x0042	0x5037      	MOVF        _bufferSPI, 0 
0x0044	0x0AA0      	XORLW       160
0x0046	0xE00D      	BZ          L_interrupt28
0x0048	0x5037      	MOVF        _bufferSPI, 0 
0x004A	0x0AF0      	XORLW       240
0x004C	0xE00A      	BZ          L_interrupt28
L__interrupt118:
;PruebaConfiguracion.c,248 :: 		tramaSolicitudSPI[i] = bufferSPI;                                     //Recupera la trama de solicitud SPI
0x004E	0x0E47      	MOVLW       _tramaSolicitudSPI
0x0050	0x2433      	ADDWF       _i, 0 
0x0052	0x6EE1      	MOVWF       FSR1L 
0x0054	0x0E00      	MOVLW       hi_addr(_tramaSolicitudSPI)
0x0056	0x2034      	ADDWFC      _i+1, 0 
0x0058	0x6EE2      	MOVWF       FSR1H 
0x005A	0xFFE6C037  	MOVFF       _bufferSPI, POSTINC1
;PruebaConfiguracion.c,249 :: 		i++;
0x005E	0x4A33      	INFSNZ      _i, 1 
0x0060	0x2A34      	INCF        _i+1, 1 
;PruebaConfiguracion.c,250 :: 		}
L_interrupt28:
;PruebaConfiguracion.c,251 :: 		if ((banSPI0==1)&&(bufferSPI==0xF0)){
0x0062	0x5030      	MOVF        _banSPI0, 0 
0x0064	0x0A01      	XORLW       1
0x0066	0xA4D8      	BTFSS       STATUS, 2 
0x0068	0xD08C      	BRA         L_interrupt31
0x006A	0x5037      	MOVF        _bufferSPI, 0 
0x006C	0x0AF0      	XORLW       240
0x006E	0xA4D8      	BTFSS       STATUS, 2 
0x0070	0xD088      	BRA         L_interrupt31
L__interrupt117:
;PruebaConfiguracion.c,253 :: 		for (j=0;j<5;j++){
0x0072	0x6A35      	CLRF        _j 
0x0074	0x6A36      	CLRF        _j+1 
L_interrupt32:
0x0076	0x0E00      	MOVLW       0
0x0078	0x5C36      	SUBWF       _j+1, 0 
0x007A	0xE102      	BNZ         L__interrupt129
0x007C	0x0E05      	MOVLW       5
0x007E	0x5C35      	SUBWF       _j, 0 
L__interrupt129:
0x0080	0xE211      	BC          L_interrupt33
;PruebaConfiguracion.c,254 :: 		cabeceraSolicitud[j] = tramaSolicitudSPI[j];
0x0082	0x0E75      	MOVLW       _cabeceraSolicitud
0x0084	0x2435      	ADDWF       _j, 0 
0x0086	0x6EE1      	MOVWF       FSR1L 
0x0088	0x0E03      	MOVLW       hi_addr(_cabeceraSolicitud)
0x008A	0x2036      	ADDWFC      _j+1, 0 
0x008C	0x6EE2      	MOVWF       FSR1H 
0x008E	0x0E47      	MOVLW       _tramaSolicitudSPI
0x0090	0x2435      	ADDWF       _j, 0 
0x0092	0x6EE9      	MOVWF       FSR0L 
0x0094	0x0E00      	MOVLW       hi_addr(_tramaSolicitudSPI)
0x0096	0x2036      	ADDWFC      _j+1, 0 
0x0098	0x6EEA      	MOVWF       FSR0H 
0x009A	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;PruebaConfiguracion.c,253 :: 		for (j=0;j<5;j++){
0x009E	0x4A35      	INFSNZ      _j, 1 
0x00A0	0x2A36      	INCF        _j+1, 1 
;PruebaConfiguracion.c,255 :: 		}
0x00A2	0xD7E9      	BRA         L_interrupt32
L_interrupt33:
0x00A4	0x0103      	MOVLB       3
;PruebaConfiguracion.c,257 :: 		idSolicitud = cabeceraSolicitud[0];
0x00A6	0xF038C375  	MOVFF       _cabeceraSolicitud, _idSolicitud
;PruebaConfiguracion.c,258 :: 		funcionSolicitud = cabeceraSolicitud[1];
0x00AA	0xF025C376  	MOVFF       _cabeceraSolicitud+1, _funcionSolicitud
;PruebaConfiguracion.c,259 :: 		subFuncionSolicitud = cabeceraSolicitud[2];
0x00AE	0xF026C377  	MOVFF       _cabeceraSolicitud+2, _subFuncionSolicitud
;PruebaConfiguracion.c,260 :: 		*(ptrNumDatosRS485) = cabeceraSolicitud[3];
0x00B2	0xFFE1C389  	MOVFF       _ptrNumDatosRS485, FSR1L
0x00B6	0xFFE2C38A  	MOVFF       _ptrNumDatosRS485+1, FSR1H
0x00BA	0xFFE6C378  	MOVFF       _cabeceraSolicitud+3, POSTINC1
;PruebaConfiguracion.c,261 :: 		*(ptrNumDatosRS485+1) = cabeceraSolicitud[4];
0x00BE	0x0E01      	MOVLW       1
0x00C0	0x2589      	ADDWF       _ptrNumDatosRS485, 0, 1
0x00C2	0x6EE1      	MOVWF       FSR1L 
0x00C4	0x0E00      	MOVLW       0
0x00C6	0x218A      	ADDWFC      _ptrNumDatosRS485+1, 0, 1
0x00C8	0x6EE2      	MOVWF       FSR1H 
0x00CA	0xFFE6C379  	MOVFF       _cabeceraSolicitud+4, POSTINC1
;PruebaConfiguracion.c,263 :: 		for (j=0;j<numDatosRS485;j++){
0x00CE	0x6A35      	CLRF        _j 
0x00D0	0x6A36      	CLRF        _j+1 
L_interrupt35:
0x00D2	0x518C      	MOVF        _numDatosRS485+1, 0, 1
0x00D4	0x5C36      	SUBWF       _j+1, 0 
0x00D6	0xE102      	BNZ         L__interrupt130
0x00D8	0x518B      	MOVF        _numDatosRS485, 0, 1
0x00DA	0x5C35      	SUBWF       _j, 0 
L__interrupt130:
0x00DC	0xE217      	BC          L_interrupt36
;PruebaConfiguracion.c,264 :: 		payloadSolicitud[j] = tramaSolicitudSPI[5+j];
0x00DE	0x0E7F      	MOVLW       _payloadSolicitud
0x00E0	0x2435      	ADDWF       _j, 0 
0x00E2	0x6EE1      	MOVWF       FSR1L 
0x00E4	0x0E03      	MOVLW       hi_addr(_payloadSolicitud)
0x00E6	0x2036      	ADDWFC      _j+1, 0 
0x00E8	0x6EE2      	MOVWF       FSR1H 
0x00EA	0x0E05      	MOVLW       5
0x00EC	0x2435      	ADDWF       _j, 0 
0x00EE	0x6E00      	MOVWF       R0 
0x00F0	0x0E00      	MOVLW       0
0x00F2	0x2036      	ADDWFC      _j+1, 0 
0x00F4	0x6E01      	MOVWF       R1 
0x00F6	0x0E47      	MOVLW       _tramaSolicitudSPI
0x00F8	0x2400      	ADDWF       R0, 0 
0x00FA	0x6EE9      	MOVWF       FSR0L 
0x00FC	0x0E00      	MOVLW       hi_addr(_tramaSolicitudSPI)
0x00FE	0x2001      	ADDWFC      R1, 0 
0x0100	0x6EEA      	MOVWF       FSR0H 
0x0102	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;PruebaConfiguracion.c,263 :: 		for (j=0;j<numDatosRS485;j++){
0x0106	0x4A35      	INFSNZ      _j, 1 
0x0108	0x2A36      	INCF        _j+1, 1 
;PruebaConfiguracion.c,265 :: 		}
0x010A	0xD7E3      	BRA         L_interrupt35
L_interrupt36:
;PruebaConfiguracion.c,267 :: 		if (idSolicitud==0){
0x010C	0x5038      	MOVF        _idSolicitud, 0 
0x010E	0x0A00      	XORLW       0
0x0110	0xE11B      	BNZ         L_interrupt38
;PruebaConfiguracion.c,268 :: 		if (funcionSolicitud==4){
0x0112	0x5025      	MOVF        _funcionSolicitud, 0 
0x0114	0x0A04      	XORLW       4
0x0116	0xE117      	BNZ         L_interrupt39
;PruebaConfiguracion.c,269 :: 		numDatosRS485 = 10;                                         //Actualiza el numero de datos para hacer el test
0x0118	0x0E0A      	MOVLW       10
0x011A	0x6F8B      	MOVWF       _numDatosRS485, 1
0x011C	0x0E00      	MOVLW       0
0x011E	0x6F8C      	MOVWF       _numDatosRS485+1, 1
;PruebaConfiguracion.c,270 :: 		cabeceraSolicitud[3] = *(ptrNumDatosRS485);
0x0120	0xFFE9C389  	MOVFF       _ptrNumDatosRS485, FSR0L
0x0124	0xFFEAC38A  	MOVFF       _ptrNumDatosRS485+1, FSR0H
0x0128	0xF378CFEE  	MOVFF       POSTINC0, _cabeceraSolicitud+3
;PruebaConfiguracion.c,271 :: 		cabeceraSolicitud[4] = *(ptrNumDatosRS485+1);
0x012C	0x0E01      	MOVLW       1
0x012E	0x2589      	ADDWF       _ptrNumDatosRS485, 0, 1
0x0130	0x6EE9      	MOVWF       FSR0L 
0x0132	0x0E00      	MOVLW       0
0x0134	0x218A      	ADDWFC      _ptrNumDatosRS485+1, 0, 1
0x0136	0x6EEA      	MOVWF       FSR0H 
0x0138	0xF379CFEE  	MOVFF       POSTINC0, _cabeceraSolicitud+4
;PruebaConfiguracion.c,272 :: 		ResponderSPI(cabeceraSolicitud);
0x013C	0x0E75      	MOVLW       _cabeceraSolicitud
0x013E	0x6F9D      	MOVWF       FARG_ResponderSPI_cabeceraRespuesta, 1
0x0140	0x0E03      	MOVLW       hi_addr(_cabeceraSolicitud)
0x0142	0x6F9E      	MOVWF       FARG_ResponderSPI_cabeceraRespuesta+1, 1
0x0144	0xDB78      	RCALL       _ResponderSPI
;PruebaConfiguracion.c,273 :: 		}
L_interrupt39:
;PruebaConfiguracion.c,274 :: 		} else {
0x0146	0xD017      	BRA         L_interrupt40
L_interrupt38:
;PruebaConfiguracion.c,276 :: 		EnviarTramaRS485(1, cabeceraSolicitud, payloadSolicitud);
0x0148	0x0E01      	MOVLW       1
0x014A	0x6F9D      	MOVWF       FARG_EnviarTramaRS485_puertoUART, 1
0x014C	0x0E75      	MOVLW       _cabeceraSolicitud
0x014E	0x6F9E      	MOVWF       FARG_EnviarTramaRS485_cabecera, 1
0x0150	0x0E03      	MOVLW       hi_addr(_cabeceraSolicitud)
0x0152	0x6F9F      	MOVWF       FARG_EnviarTramaRS485_cabecera+1, 1
0x0154	0x0E7F      	MOVLW       _payloadSolicitud
0x0156	0x6FA0      	MOVWF       FARG_EnviarTramaRS485_payload, 1
0x0158	0x0E03      	MOVLW       hi_addr(_payloadSolicitud)
0x015A	0x6FA1      	MOVWF       FARG_EnviarTramaRS485_payload+1, 1
0x015C	0xDAB7      	RCALL       _EnviarTramaRS485
;PruebaConfiguracion.c,277 :: 		EnviarTramaRS485(2, cabeceraSolicitud, payloadSolicitud);
0x015E	0x0E02      	MOVLW       2
0x0160	0x0103      	MOVLB       3
0x0162	0x6F9D      	MOVWF       FARG_EnviarTramaRS485_puertoUART, 1
0x0164	0x0E75      	MOVLW       _cabeceraSolicitud
0x0166	0x6F9E      	MOVWF       FARG_EnviarTramaRS485_cabecera, 1
0x0168	0x0E03      	MOVLW       hi_addr(_cabeceraSolicitud)
0x016A	0x6F9F      	MOVWF       FARG_EnviarTramaRS485_cabecera+1, 1
0x016C	0x0E7F      	MOVLW       _payloadSolicitud
0x016E	0x6FA0      	MOVWF       FARG_EnviarTramaRS485_payload, 1
0x0170	0x0E03      	MOVLW       hi_addr(_payloadSolicitud)
0x0172	0x6FA1      	MOVWF       FARG_EnviarTramaRS485_payload+1, 1
0x0174	0xDAAB      	RCALL       _EnviarTramaRS485
;PruebaConfiguracion.c,279 :: 		}
L_interrupt40:
;PruebaConfiguracion.c,280 :: 		CambiarEstadoBandera(0,0);                                            //Limpia la bandera 0
0x0176	0x0103      	MOVLB       3
0x0178	0x6B9D      	CLRF        FARG_CambiarEstadoBandera_bandera, 1
0x017A	0x6B9E      	CLRF        FARG_CambiarEstadoBandera_estado, 1
0x017C	0xDA7E      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,281 :: 		LED1 = 0;
0x017E	0x9481      	BCF         RB2_bit, BitPos(RB2_bit+0) 
;PruebaConfiguracion.c,282 :: 		LED2 = 0;
0x0180	0x9881      	BCF         RB4_bit, BitPos(RB4_bit+0) 
;PruebaConfiguracion.c,284 :: 		}
L_interrupt31:
;PruebaConfiguracion.c,290 :: 		if ((banSPI1==0)&&(bufferSPI==0xA1)) {
0x0182	0x503A      	MOVF        _banSPI1, 0 
0x0184	0x0A00      	XORLW       0
0x0186	0xE10F      	BNZ         L_interrupt43
0x0188	0x5037      	MOVF        _bufferSPI, 0 
0x018A	0x0AA1      	XORLW       161
0x018C	0xE10C      	BNZ         L_interrupt43
L__interrupt116:
0x018E	0x0103      	MOVLB       3
;PruebaConfiguracion.c,291 :: 		SSP1BUF = cabeceraRespuestaSPI[0];                                       //Carga en el buffer el primer elemento de la cabecera (id)
0x0190	0xFFC9C03D  	MOVFF       _cabeceraRespuestaSPI, SSP1BUF
;PruebaConfiguracion.c,292 :: 		i = 1;
0x0194	0x0E01      	MOVLW       1
0x0196	0x6E33      	MOVWF       _i 
0x0198	0x0E00      	MOVLW       0
0x019A	0x6E34      	MOVWF       _i+1 
;PruebaConfiguracion.c,293 :: 		CambiarEstadoBandera(1,1);                                            //Activa la bandera 1
0x019C	0x0E01      	MOVLW       1
0x019E	0x6F9D      	MOVWF       FARG_CambiarEstadoBandera_bandera, 1
0x01A0	0x0E01      	MOVLW       1
0x01A2	0x6F9E      	MOVWF       FARG_CambiarEstadoBandera_estado, 1
0x01A4	0xDA6A      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,294 :: 		}
L_interrupt43:
;PruebaConfiguracion.c,295 :: 		if ((banSPI1==1)&&(bufferSPI!=0xA1)&&(bufferSPI!=0xF1)){
0x01A6	0x503A      	MOVF        _banSPI1, 0 
0x01A8	0x0A01      	XORLW       1
0x01AA	0xE110      	BNZ         L_interrupt46
0x01AC	0x5037      	MOVF        _bufferSPI, 0 
0x01AE	0x0AA1      	XORLW       161
0x01B0	0xE00D      	BZ          L_interrupt46
0x01B2	0x5037      	MOVF        _bufferSPI, 0 
0x01B4	0x0AF1      	XORLW       241
0x01B6	0xE00A      	BZ          L_interrupt46
L__interrupt115:
;PruebaConfiguracion.c,296 :: 		SSP1BUF = cabeceraRespuestaSPI[i];                                       //Se envia la trama de respuesta
0x01B8	0x0E3D      	MOVLW       _cabeceraRespuestaSPI
0x01BA	0x2433      	ADDWF       _i, 0 
0x01BC	0x6EE9      	MOVWF       FSR0L 
0x01BE	0x0E00      	MOVLW       hi_addr(_cabeceraRespuestaSPI)
0x01C0	0x2034      	ADDWFC      _i+1, 0 
0x01C2	0x6EEA      	MOVWF       FSR0H 
0x01C4	0xFFC9CFEE  	MOVFF       POSTINC0, SSP1BUF
;PruebaConfiguracion.c,297 :: 		i++;
0x01C8	0x4A33      	INFSNZ      _i, 1 
0x01CA	0x2A34      	INCF        _i+1, 1 
;PruebaConfiguracion.c,298 :: 		}
L_interrupt46:
;PruebaConfiguracion.c,299 :: 		if ((banSPI1==1)&&(bufferSPI==0xF1)){
0x01CC	0x503A      	MOVF        _banSPI1, 0 
0x01CE	0x0A01      	XORLW       1
0x01D0	0xE108      	BNZ         L_interrupt49
0x01D2	0x5037      	MOVF        _bufferSPI, 0 
0x01D4	0x0AF1      	XORLW       241
0x01D6	0xE105      	BNZ         L_interrupt49
L__interrupt114:
0x01D8	0x0103      	MOVLB       3
;PruebaConfiguracion.c,300 :: 		CambiarEstadoBandera(1,0);                                            //Limpia la bandera 1
0x01DA	0x0E01      	MOVLW       1
0x01DC	0x6F9D      	MOVWF       FARG_CambiarEstadoBandera_bandera, 1
0x01DE	0x6B9E      	CLRF        FARG_CambiarEstadoBandera_estado, 1
0x01E0	0xDA4C      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,301 :: 		}
L_interrupt49:
;PruebaConfiguracion.c,303 :: 		if ((banSPI2==0)&&(bufferSPI==0xA2)){
0x01E2	0x503B      	MOVF        _banSPI2, 0 
0x01E4	0x0A00      	XORLW       0
0x01E6	0xE10F      	BNZ         L_interrupt52
0x01E8	0x5037      	MOVF        _bufferSPI, 0 
0x01EA	0x0AA2      	XORLW       162
0x01EC	0xE10C      	BNZ         L_interrupt52
L__interrupt113:
0x01EE	0x0103      	MOVLB       3
;PruebaConfiguracion.c,304 :: 		CambiarEstadoBandera(2,1);                                            //Activa la bandera 2
0x01F0	0x0E02      	MOVLW       2
0x01F2	0x6F9D      	MOVWF       FARG_CambiarEstadoBandera_bandera, 1
0x01F4	0x0E01      	MOVLW       1
0x01F6	0x6F9E      	MOVWF       FARG_CambiarEstadoBandera_estado, 1
0x01F8	0xDA40      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,305 :: 		SSP1BUF = pyloadRS485[0];
0x01FA	0xFFC9C073  	MOVFF       _pyloadRS485, SSP1BUF
;PruebaConfiguracion.c,306 :: 		i = 1;
0x01FE	0x0E01      	MOVLW       1
0x0200	0x6E33      	MOVWF       _i 
0x0202	0x0E00      	MOVLW       0
0x0204	0x6E34      	MOVWF       _i+1 
;PruebaConfiguracion.c,307 :: 		}
L_interrupt52:
;PruebaConfiguracion.c,308 :: 		if ((banSPI2==1)&&(bufferSPI!=0xA2)&&(bufferSPI!=0xF2)){
0x0206	0x503B      	MOVF        _banSPI2, 0 
0x0208	0x0A01      	XORLW       1
0x020A	0xE110      	BNZ         L_interrupt55
0x020C	0x5037      	MOVF        _bufferSPI, 0 
0x020E	0x0AA2      	XORLW       162
0x0210	0xE00D      	BZ          L_interrupt55
0x0212	0x5037      	MOVF        _bufferSPI, 0 
0x0214	0x0AF2      	XORLW       242
0x0216	0xE00A      	BZ          L_interrupt55
L__interrupt112:
;PruebaConfiguracion.c,309 :: 		SSP1BUF = pyloadRS485[i];
0x0218	0x0E73      	MOVLW       _pyloadRS485
0x021A	0x2433      	ADDWF       _i, 0 
0x021C	0x6EE9      	MOVWF       FSR0L 
0x021E	0x0E00      	MOVLW       hi_addr(_pyloadRS485)
0x0220	0x2034      	ADDWFC      _i+1, 0 
0x0222	0x6EEA      	MOVWF       FSR0H 
0x0224	0xFFC9CFEE  	MOVFF       POSTINC0, SSP1BUF
;PruebaConfiguracion.c,310 :: 		i++;
0x0228	0x4A33      	INFSNZ      _i, 1 
0x022A	0x2A34      	INCF        _i+1, 1 
;PruebaConfiguracion.c,311 :: 		}
L_interrupt55:
;PruebaConfiguracion.c,312 :: 		if ((banSPI2==1)&&(bufferSPI==0xF2)){
0x022C	0x503B      	MOVF        _banSPI2, 0 
0x022E	0x0A01      	XORLW       1
0x0230	0xE108      	BNZ         L_interrupt58
0x0232	0x5037      	MOVF        _bufferSPI, 0 
0x0234	0x0AF2      	XORLW       242
0x0236	0xE105      	BNZ         L_interrupt58
L__interrupt111:
0x0238	0x0103      	MOVLB       3
;PruebaConfiguracion.c,313 :: 		CambiarEstadoBandera(2,0);                                            //Limpia la bandera 2
0x023A	0x0E02      	MOVLW       2
0x023C	0x6F9D      	MOVWF       FARG_CambiarEstadoBandera_bandera, 1
0x023E	0x6B9E      	CLRF        FARG_CambiarEstadoBandera_estado, 1
0x0240	0xDA1C      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,314 :: 		}
L_interrupt58:
;PruebaConfiguracion.c,316 :: 		if ((banSPI3==0)&&(bufferSPI==0xA3)){
0x0242	0x5039      	MOVF        _banSPI3, 0 
0x0244	0x0A00      	XORLW       0
0x0246	0xE10F      	BNZ         L_interrupt61
0x0248	0x5037      	MOVF        _bufferSPI, 0 
0x024A	0x0AA3      	XORLW       163
0x024C	0xE10C      	BNZ         L_interrupt61
L__interrupt110:
0x024E	0x0103      	MOVLB       3
;PruebaConfiguracion.c,317 :: 		CambiarEstadoBandera(3,1);                                            //Activa la bandera 3
0x0250	0x0E03      	MOVLW       3
0x0252	0x6F9D      	MOVWF       FARG_CambiarEstadoBandera_bandera, 1
0x0254	0x0E01      	MOVLW       1
0x0256	0x6F9E      	MOVWF       FARG_CambiarEstadoBandera_estado, 1
0x0258	0xDA10      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,318 :: 		SSP1BUF = tramaPruebaSPI[0];
0x025A	0xFFC9C018  	MOVFF       _tramaPruebaSPI, SSP1BUF
;PruebaConfiguracion.c,319 :: 		i = 1;
0x025E	0x0E01      	MOVLW       1
0x0260	0x6E33      	MOVWF       _i 
0x0262	0x0E00      	MOVLW       0
0x0264	0x6E34      	MOVWF       _i+1 
;PruebaConfiguracion.c,320 :: 		}
L_interrupt61:
;PruebaConfiguracion.c,321 :: 		if ((banSPI3==1)&&(bufferSPI!=0xA3)&&(bufferSPI!=0xF3)){
0x0266	0x5039      	MOVF        _banSPI3, 0 
0x0268	0x0A01      	XORLW       1
0x026A	0xE110      	BNZ         L_interrupt64
0x026C	0x5037      	MOVF        _bufferSPI, 0 
0x026E	0x0AA3      	XORLW       163
0x0270	0xE00D      	BZ          L_interrupt64
0x0272	0x5037      	MOVF        _bufferSPI, 0 
0x0274	0x0AF3      	XORLW       243
0x0276	0xE00A      	BZ          L_interrupt64
L__interrupt109:
;PruebaConfiguracion.c,322 :: 		SSP1BUF = tramaPruebaSPI[i];
0x0278	0x0E18      	MOVLW       _tramaPruebaSPI
0x027A	0x2433      	ADDWF       _i, 0 
0x027C	0x6EE9      	MOVWF       FSR0L 
0x027E	0x0E00      	MOVLW       hi_addr(_tramaPruebaSPI)
0x0280	0x2034      	ADDWFC      _i+1, 0 
0x0282	0x6EEA      	MOVWF       FSR0H 
0x0284	0xFFC9CFEE  	MOVFF       POSTINC0, SSP1BUF
;PruebaConfiguracion.c,323 :: 		i++;
0x0288	0x4A33      	INFSNZ      _i, 1 
0x028A	0x2A34      	INCF        _i+1, 1 
;PruebaConfiguracion.c,324 :: 		}
L_interrupt64:
;PruebaConfiguracion.c,325 :: 		if ((banSPI3==1)&&(bufferSPI==0xF3)){
0x028C	0x5039      	MOVF        _banSPI3, 0 
0x028E	0x0A01      	XORLW       1
0x0290	0xE108      	BNZ         L_interrupt67
0x0292	0x5037      	MOVF        _bufferSPI, 0 
0x0294	0x0AF3      	XORLW       243
0x0296	0xE105      	BNZ         L_interrupt67
L__interrupt108:
0x0298	0x0103      	MOVLB       3
;PruebaConfiguracion.c,326 :: 		CambiarEstadoBandera(3,0);                                            //Limpia la bandera 3
0x029A	0x0E03      	MOVLW       3
0x029C	0x6F9D      	MOVWF       FARG_CambiarEstadoBandera_bandera, 1
0x029E	0x6B9E      	CLRF        FARG_CambiarEstadoBandera_estado, 1
0x02A0	0xD9EC      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,327 :: 		}
L_interrupt67:
;PruebaConfiguracion.c,330 :: 		}
L_interrupt22:
;PruebaConfiguracion.c,335 :: 		if (RC1IF_bit==1){
0x02A2	0xAA9E      	BTFSS       RC1IF_bit, BitPos(RC1IF_bit+0) 
0x02A4	0xD075      	BRA         L_interrupt68
;PruebaConfiguracion.c,337 :: 		RC1IF_bit = 0;                                                           //Limpia la bandera de interrupcion
0x02A6	0x9A9E      	BCF         RC1IF_bit, BitPos(RC1IF_bit+0) 
;PruebaConfiguracion.c,338 :: 		byteRS485 = UART1_Read();
0x02A8	0xD99A      	RCALL       _UART1_Read
0x02AA	0xF02DC000  	MOVFF       R0, _byteRS485
;PruebaConfiguracion.c,341 :: 		if (banRSI==2){
0x02AE	0x5024      	MOVF        _banRSI, 0 
0x02B0	0x0A02      	XORLW       2
0x02B2	0xE115      	BNZ         L_interrupt69
;PruebaConfiguracion.c,343 :: 		if (i_rs485<(numDatosRS485)){
0x02B4	0x0103      	MOVLB       3
0x02B6	0x518C      	MOVF        _numDatosRS485+1, 0, 1
0x02B8	0x5C28      	SUBWF       _i_rs485+1, 0 
0x02BA	0xE102      	BNZ         L__interrupt131
0x02BC	0x518B      	MOVF        _numDatosRS485, 0, 1
0x02BE	0x5C27      	SUBWF       _i_rs485, 0 
L__interrupt131:
0x02C0	0xE20B      	BC          L_interrupt70
;PruebaConfiguracion.c,344 :: 		pyloadRS485[i_rs485] = byteRS485;
0x02C2	0x0E73      	MOVLW       _pyloadRS485
0x02C4	0x2427      	ADDWF       _i_rs485, 0 
0x02C6	0x6EE1      	MOVWF       FSR1L 
0x02C8	0x0E00      	MOVLW       hi_addr(_pyloadRS485)
0x02CA	0x2028      	ADDWFC      _i_rs485+1, 0 
0x02CC	0x6EE2      	MOVWF       FSR1H 
0x02CE	0xFFE6C02D  	MOVFF       _byteRS485, POSTINC1
;PruebaConfiguracion.c,345 :: 		i_rs485++;
0x02D2	0x4A27      	INFSNZ      _i_rs485, 1 
0x02D4	0x2A28      	INCF        _i_rs485+1, 1 
;PruebaConfiguracion.c,346 :: 		} else {
0x02D6	0xD003      	BRA         L_interrupt71
L_interrupt70:
;PruebaConfiguracion.c,347 :: 		banRSI = 0;                                                        //Limpia la bandera de inicio de trama
0x02D8	0x6A24      	CLRF        _banRSI 
;PruebaConfiguracion.c,348 :: 		banRSC = 1;                                                        //Activa la bandera de trama completa
0x02DA	0x0E01      	MOVLW       1
0x02DC	0x6E23      	MOVWF       _banRSC 
;PruebaConfiguracion.c,349 :: 		}
L_interrupt71:
;PruebaConfiguracion.c,350 :: 		}
L_interrupt69:
;PruebaConfiguracion.c,353 :: 		if ((banRSI==0)&&(banRSC==0)){
0x02DE	0x5024      	MOVF        _banRSI, 0 
0x02E0	0x0A00      	XORLW       0
0x02E2	0xE10B      	BNZ         L_interrupt74
0x02E4	0x5023      	MOVF        _banRSC, 0 
0x02E6	0x0A00      	XORLW       0
0x02E8	0xE108      	BNZ         L_interrupt74
L__interrupt107:
;PruebaConfiguracion.c,354 :: 		if (byteRS485==0x3A){                                                 //Verifica si el primer byte recibido sea el byte de inicio de trama
0x02EA	0x502D      	MOVF        _byteRS485, 0 
0x02EC	0x0A3A      	XORLW       58
0x02EE	0xE105      	BNZ         L_interrupt75
;PruebaConfiguracion.c,355 :: 		banRSI = 1;
0x02F0	0x0E01      	MOVLW       1
0x02F2	0x6E24      	MOVWF       _banRSI 
;PruebaConfiguracion.c,356 :: 		i_rs485 = 0;
0x02F4	0x6A27      	CLRF        _i_rs485 
0x02F6	0x6A28      	CLRF        _i_rs485+1 
;PruebaConfiguracion.c,357 :: 		LED1 = 1;
0x02F8	0x8481      	BSF         RB2_bit, BitPos(RB2_bit+0) 
;PruebaConfiguracion.c,358 :: 		}
L_interrupt75:
;PruebaConfiguracion.c,359 :: 		}
L_interrupt74:
;PruebaConfiguracion.c,360 :: 		if ((banRSI==1)&&(byteRS485!=0x3A)&&(i_rs485<5)){
0x02FA	0x5024      	MOVF        _banRSI, 0 
0x02FC	0x0A01      	XORLW       1
0x02FE	0xE113      	BNZ         L_interrupt78
0x0300	0x502D      	MOVF        _byteRS485, 0 
0x0302	0x0A3A      	XORLW       58
0x0304	0xE010      	BZ          L_interrupt78
0x0306	0x0E00      	MOVLW       0
0x0308	0x5C28      	SUBWF       _i_rs485+1, 0 
0x030A	0xE102      	BNZ         L__interrupt132
0x030C	0x0E05      	MOVLW       5
0x030E	0x5C27      	SUBWF       _i_rs485, 0 
L__interrupt132:
0x0310	0xE20A      	BC          L_interrupt78
L__interrupt106:
;PruebaConfiguracion.c,361 :: 		tramaCabeceraRS485[i_rs485] = byteRS485;                              //Recupera los datos de cabecera de la trama UART: [Direccion, Funcion, Subfuncion, NumeroDatos]
0x0312	0x0E69      	MOVLW       _tramaCabeceraRS485
0x0314	0x2427      	ADDWF       _i_rs485, 0 
0x0316	0x6EE1      	MOVWF       FSR1L 
0x0318	0x0E00      	MOVLW       hi_addr(_tramaCabeceraRS485)
0x031A	0x2028      	ADDWFC      _i_rs485+1, 0 
0x031C	0x6EE2      	MOVWF       FSR1H 
0x031E	0xFFE6C02D  	MOVFF       _byteRS485, POSTINC1
;PruebaConfiguracion.c,362 :: 		i_rs485++;
0x0322	0x4A27      	INFSNZ      _i_rs485, 1 
0x0324	0x2A28      	INCF        _i_rs485+1, 1 
;PruebaConfiguracion.c,363 :: 		}
L_interrupt78:
;PruebaConfiguracion.c,364 :: 		if ((banRSI==1)&&(i_rs485==5)){
0x0326	0x5024      	MOVF        _banRSI, 0 
0x0328	0x0A01      	XORLW       1
0x032A	0xE127      	BNZ         L_interrupt81
0x032C	0x0E00      	MOVLW       0
0x032E	0x1828      	XORWF       _i_rs485+1, 0 
0x0330	0xE102      	BNZ         L__interrupt133
0x0332	0x0E05      	MOVLW       5
0x0334	0x1827      	XORWF       _i_rs485, 0 
L__interrupt133:
0x0336	0xE121      	BNZ         L_interrupt81
L__interrupt105:
;PruebaConfiguracion.c,366 :: 		if (tramaCabeceraRS485[0]==idSolicitud){
0x0338	0x0100      	MOVLB       0
0x033A	0x5169      	MOVF        _tramaCabeceraRS485, 0, 1
0x033C	0x1838      	XORWF       _idSolicitud, 0 
0x033E	0xE119      	BNZ         L_interrupt82
;PruebaConfiguracion.c,368 :: 		funcionRS485 = tramaCabeceraRS485[1];
0x0340	0xF03CC06A  	MOVFF       _tramaCabeceraRS485+1, _funcionRS485
;PruebaConfiguracion.c,369 :: 		subFuncionRS485 = tramaCabeceraRS485[2];
0x0344	0xF060C06B  	MOVFF       _tramaCabeceraRS485+2, _subFuncionRS485
;PruebaConfiguracion.c,370 :: 		*(ptrNumDatosRS485) = tramaCabeceraRS485[3];
0x0348	0xFFE1C389  	MOVFF       _ptrNumDatosRS485, FSR1L
0x034C	0xFFE2C38A  	MOVFF       _ptrNumDatosRS485+1, FSR1H
0x0350	0xFFE6C06C  	MOVFF       _tramaCabeceraRS485+3, POSTINC1
;PruebaConfiguracion.c,371 :: 		*(ptrNumDatosRS485+1) = tramaCabeceraRS485[4];
0x0354	0x0E01      	MOVLW       1
0x0356	0x0103      	MOVLB       3
0x0358	0x2589      	ADDWF       _ptrNumDatosRS485, 0, 1
0x035A	0x6EE1      	MOVWF       FSR1L 
0x035C	0x0E00      	MOVLW       0
0x035E	0x218A      	ADDWFC      _ptrNumDatosRS485+1, 0, 1
0x0360	0x6EE2      	MOVWF       FSR1H 
0x0362	0xFFE6C06D  	MOVFF       _tramaCabeceraRS485+4, POSTINC1
;PruebaConfiguracion.c,372 :: 		idSolicitud = 0;                                                   //Encera el idSolicitud
0x0366	0x6A38      	CLRF        _idSolicitud 
;PruebaConfiguracion.c,373 :: 		i_rs485 = 0;                                                       //Encera el subindice para almacenar el payload
0x0368	0x6A27      	CLRF        _i_rs485 
0x036A	0x6A28      	CLRF        _i_rs485+1 
;PruebaConfiguracion.c,374 :: 		banRSI = 2;                                                        //Cambia el valor de la bandera para salir del bucle
0x036C	0x0E02      	MOVLW       2
0x036E	0x6E24      	MOVWF       _banRSI 
;PruebaConfiguracion.c,376 :: 		} else {
0x0370	0xD004      	BRA         L_interrupt83
L_interrupt82:
;PruebaConfiguracion.c,377 :: 		banRSI = 0;
0x0372	0x6A24      	CLRF        _banRSI 
;PruebaConfiguracion.c,378 :: 		banRSC = 0;
0x0374	0x6A23      	CLRF        _banRSC 
;PruebaConfiguracion.c,379 :: 		i_rs485 = 0;
0x0376	0x6A27      	CLRF        _i_rs485 
0x0378	0x6A28      	CLRF        _i_rs485+1 
;PruebaConfiguracion.c,380 :: 		}
L_interrupt83:
;PruebaConfiguracion.c,381 :: 		}
L_interrupt81:
;PruebaConfiguracion.c,384 :: 		if (banRSC==1){
0x037A	0x5023      	MOVF        _banRSC, 0 
0x037C	0x0A01      	XORLW       1
0x037E	0xE108      	BNZ         L_interrupt84
;PruebaConfiguracion.c,385 :: 		LED1 = 0;
0x0380	0x0103      	MOVLB       3
0x0382	0x9481      	BCF         RB2_bit, BitPos(RB2_bit+0) 
;PruebaConfiguracion.c,386 :: 		ResponderSPI(tramaCabeceraRS485);
0x0384	0x0E69      	MOVLW       _tramaCabeceraRS485
0x0386	0x6F9D      	MOVWF       FARG_ResponderSPI_cabeceraRespuesta, 1
0x0388	0x0E00      	MOVLW       hi_addr(_tramaCabeceraRS485)
0x038A	0x6F9E      	MOVWF       FARG_ResponderSPI_cabeceraRespuesta+1, 1
0x038C	0xDA54      	RCALL       _ResponderSPI
;PruebaConfiguracion.c,388 :: 		banRSC = 0;
0x038E	0x6A23      	CLRF        _banRSC 
;PruebaConfiguracion.c,389 :: 		}
L_interrupt84:
;PruebaConfiguracion.c,391 :: 		}
L_interrupt68:
;PruebaConfiguracion.c,396 :: 		if (RC2IF_bit==1){
0x0390	0xAAA4      	BTFSS       RC2IF_bit, BitPos(RC2IF_bit+0) 
0x0392	0xD075      	BRA         L_interrupt85
;PruebaConfiguracion.c,398 :: 		RC2IF_bit = 0;                                                           //Limpia la bandera de interrupcion
0x0394	0x9AA4      	BCF         RC2IF_bit, BitPos(RC2IF_bit+0) 
;PruebaConfiguracion.c,399 :: 		byteRS4852 = UART2_Read();
0x0396	0xD91A      	RCALL       _UART2_Read
0x0398	0xF02BC000  	MOVFF       R0, _byteRS4852
;PruebaConfiguracion.c,402 :: 		if (banRSI2==2){
0x039C	0x5022      	MOVF        _banRSI2, 0 
0x039E	0x0A02      	XORLW       2
0x03A0	0xE115      	BNZ         L_interrupt86
;PruebaConfiguracion.c,404 :: 		if (i_rs4852<(numDatosRS485)){
0x03A2	0x0103      	MOVLB       3
0x03A4	0x518C      	MOVF        _numDatosRS485+1, 0, 1
0x03A6	0x5C2A      	SUBWF       _i_rs4852+1, 0 
0x03A8	0xE102      	BNZ         L__interrupt134
0x03AA	0x518B      	MOVF        _numDatosRS485, 0, 1
0x03AC	0x5C29      	SUBWF       _i_rs4852, 0 
L__interrupt134:
0x03AE	0xE20B      	BC          L_interrupt87
;PruebaConfiguracion.c,405 :: 		pyloadRS485[i_rs4852] = byteRS4852;
0x03B0	0x0E73      	MOVLW       _pyloadRS485
0x03B2	0x2429      	ADDWF       _i_rs4852, 0 
0x03B4	0x6EE1      	MOVWF       FSR1L 
0x03B6	0x0E00      	MOVLW       hi_addr(_pyloadRS485)
0x03B8	0x202A      	ADDWFC      _i_rs4852+1, 0 
0x03BA	0x6EE2      	MOVWF       FSR1H 
0x03BC	0xFFE6C02B  	MOVFF       _byteRS4852, POSTINC1
;PruebaConfiguracion.c,406 :: 		i_rs4852++;
0x03C0	0x4A29      	INFSNZ      _i_rs4852, 1 
0x03C2	0x2A2A      	INCF        _i_rs4852+1, 1 
;PruebaConfiguracion.c,407 :: 		} else {
0x03C4	0xD003      	BRA         L_interrupt88
L_interrupt87:
;PruebaConfiguracion.c,408 :: 		banRSI2 = 0;                                                       //Limpia la bandera de inicio de trama
0x03C6	0x6A22      	CLRF        _banRSI2 
;PruebaConfiguracion.c,409 :: 		banRSC2 = 1;                                                       //Activa la bandera de trama completa
0x03C8	0x0E01      	MOVLW       1
0x03CA	0x6E2C      	MOVWF       _banRSC2 
;PruebaConfiguracion.c,410 :: 		}
L_interrupt88:
;PruebaConfiguracion.c,411 :: 		}
L_interrupt86:
;PruebaConfiguracion.c,414 :: 		if ((banRSI2==0)&&(banRSC2==0)){
0x03CC	0x5022      	MOVF        _banRSI2, 0 
0x03CE	0x0A00      	XORLW       0
0x03D0	0xE10B      	BNZ         L_interrupt91
0x03D2	0x502C      	MOVF        _banRSC2, 0 
0x03D4	0x0A00      	XORLW       0
0x03D6	0xE108      	BNZ         L_interrupt91
L__interrupt104:
;PruebaConfiguracion.c,415 :: 		if (byteRS4852==0x3A){                                                //Verifica si el primer byte recibido sea el byte de inicio de trama
0x03D8	0x502B      	MOVF        _byteRS4852, 0 
0x03DA	0x0A3A      	XORLW       58
0x03DC	0xE105      	BNZ         L_interrupt92
;PruebaConfiguracion.c,416 :: 		banRSI2 = 1;
0x03DE	0x0E01      	MOVLW       1
0x03E0	0x6E22      	MOVWF       _banRSI2 
;PruebaConfiguracion.c,417 :: 		i_rs4852 = 0;
0x03E2	0x6A29      	CLRF        _i_rs4852 
0x03E4	0x6A2A      	CLRF        _i_rs4852+1 
;PruebaConfiguracion.c,418 :: 		LED2 = 1;
0x03E6	0x8881      	BSF         RB4_bit, BitPos(RB4_bit+0) 
;PruebaConfiguracion.c,419 :: 		}
L_interrupt92:
;PruebaConfiguracion.c,420 :: 		}
L_interrupt91:
;PruebaConfiguracion.c,421 :: 		if ((banRSI2==1)&&(byteRS4852!=0x3A)&&(i_rs4852<5)){
0x03E8	0x5022      	MOVF        _banRSI2, 0 
0x03EA	0x0A01      	XORLW       1
0x03EC	0xE113      	BNZ         L_interrupt95
0x03EE	0x502B      	MOVF        _byteRS4852, 0 
0x03F0	0x0A3A      	XORLW       58
0x03F2	0xE010      	BZ          L_interrupt95
0x03F4	0x0E00      	MOVLW       0
0x03F6	0x5C2A      	SUBWF       _i_rs4852+1, 0 
0x03F8	0xE102      	BNZ         L__interrupt135
0x03FA	0x0E05      	MOVLW       5
0x03FC	0x5C29      	SUBWF       _i_rs4852, 0 
L__interrupt135:
0x03FE	0xE20A      	BC          L_interrupt95
L__interrupt103:
;PruebaConfiguracion.c,422 :: 		tramaCabeceraRS485[i_rs4852] = byteRS4852;                            //Recupera los datos de cabecera de la trama UART: [Direccion, Funcion, Subfuncion, NumeroDatos]
0x0400	0x0E69      	MOVLW       _tramaCabeceraRS485
0x0402	0x2429      	ADDWF       _i_rs4852, 0 
0x0404	0x6EE1      	MOVWF       FSR1L 
0x0406	0x0E00      	MOVLW       hi_addr(_tramaCabeceraRS485)
0x0408	0x202A      	ADDWFC      _i_rs4852+1, 0 
0x040A	0x6EE2      	MOVWF       FSR1H 
0x040C	0xFFE6C02B  	MOVFF       _byteRS4852, POSTINC1
;PruebaConfiguracion.c,423 :: 		i_rs4852++;
0x0410	0x4A29      	INFSNZ      _i_rs4852, 1 
0x0412	0x2A2A      	INCF        _i_rs4852+1, 1 
;PruebaConfiguracion.c,424 :: 		}
L_interrupt95:
;PruebaConfiguracion.c,425 :: 		if ((banRSI2==1)&&(i_rs4852==5)){
0x0414	0x5022      	MOVF        _banRSI2, 0 
0x0416	0x0A01      	XORLW       1
0x0418	0xE127      	BNZ         L_interrupt98
0x041A	0x0E00      	MOVLW       0
0x041C	0x182A      	XORWF       _i_rs4852+1, 0 
0x041E	0xE102      	BNZ         L__interrupt136
0x0420	0x0E05      	MOVLW       5
0x0422	0x1829      	XORWF       _i_rs4852, 0 
L__interrupt136:
0x0424	0xE121      	BNZ         L_interrupt98
L__interrupt102:
;PruebaConfiguracion.c,427 :: 		if (tramaCabeceraRS485[0]==idSolicitud){
0x0426	0x0100      	MOVLB       0
0x0428	0x5169      	MOVF        _tramaCabeceraRS485, 0, 1
0x042A	0x1838      	XORWF       _idSolicitud, 0 
0x042C	0xE119      	BNZ         L_interrupt99
;PruebaConfiguracion.c,429 :: 		funcionRS485 = tramaCabeceraRS485[1];
0x042E	0xF03CC06A  	MOVFF       _tramaCabeceraRS485+1, _funcionRS485
;PruebaConfiguracion.c,430 :: 		subFuncionRS485 = tramaCabeceraRS485[2];
0x0432	0xF060C06B  	MOVFF       _tramaCabeceraRS485+2, _subFuncionRS485
;PruebaConfiguracion.c,431 :: 		*(ptrNumDatosRS485) = tramaCabeceraRS485[3];
0x0436	0xFFE1C389  	MOVFF       _ptrNumDatosRS485, FSR1L
0x043A	0xFFE2C38A  	MOVFF       _ptrNumDatosRS485+1, FSR1H
0x043E	0xFFE6C06C  	MOVFF       _tramaCabeceraRS485+3, POSTINC1
;PruebaConfiguracion.c,432 :: 		*(ptrNumDatosRS485+1) = tramaCabeceraRS485[4];
0x0442	0x0E01      	MOVLW       1
0x0444	0x0103      	MOVLB       3
0x0446	0x2589      	ADDWF       _ptrNumDatosRS485, 0, 1
0x0448	0x6EE1      	MOVWF       FSR1L 
0x044A	0x0E00      	MOVLW       0
0x044C	0x218A      	ADDWFC      _ptrNumDatosRS485+1, 0, 1
0x044E	0x6EE2      	MOVWF       FSR1H 
0x0450	0xFFE6C06D  	MOVFF       _tramaCabeceraRS485+4, POSTINC1
;PruebaConfiguracion.c,433 :: 		idSolicitud = 0;                                                   //Encera el idSolicitud
0x0454	0x6A38      	CLRF        _idSolicitud 
;PruebaConfiguracion.c,434 :: 		i_rs4852 = 0;                                                      //Encera el subindice para almacenar el payload
0x0456	0x6A29      	CLRF        _i_rs4852 
0x0458	0x6A2A      	CLRF        _i_rs4852+1 
;PruebaConfiguracion.c,435 :: 		banRSI2 = 2;                                                       //Cambia el valor de la bandera para salir del bucle
0x045A	0x0E02      	MOVLW       2
0x045C	0x6E22      	MOVWF       _banRSI2 
;PruebaConfiguracion.c,437 :: 		} else {
0x045E	0xD004      	BRA         L_interrupt100
L_interrupt99:
;PruebaConfiguracion.c,438 :: 		banRSI2 = 0;
0x0460	0x6A22      	CLRF        _banRSI2 
;PruebaConfiguracion.c,439 :: 		banRSC2 = 0;
0x0462	0x6A2C      	CLRF        _banRSC2 
;PruebaConfiguracion.c,440 :: 		i_rs4852 = 0;
0x0464	0x6A29      	CLRF        _i_rs4852 
0x0466	0x6A2A      	CLRF        _i_rs4852+1 
;PruebaConfiguracion.c,441 :: 		}
L_interrupt100:
;PruebaConfiguracion.c,442 :: 		}
L_interrupt98:
;PruebaConfiguracion.c,445 :: 		if (banRSC2==1){
0x0468	0x502C      	MOVF        _banRSC2, 0 
0x046A	0x0A01      	XORLW       1
0x046C	0xE108      	BNZ         L_interrupt101
;PruebaConfiguracion.c,446 :: 		LED2 = 0;
0x046E	0x0103      	MOVLB       3
0x0470	0x9881      	BCF         RB4_bit, BitPos(RB4_bit+0) 
;PruebaConfiguracion.c,447 :: 		ResponderSPI(tramaCabeceraRS485);
0x0472	0x0E69      	MOVLW       _tramaCabeceraRS485
0x0474	0x6F9D      	MOVWF       FARG_ResponderSPI_cabeceraRespuesta, 1
0x0476	0x0E00      	MOVLW       hi_addr(_tramaCabeceraRS485)
0x0478	0x6F9E      	MOVWF       FARG_ResponderSPI_cabeceraRespuesta+1, 1
0x047A	0xD9DD      	RCALL       _ResponderSPI
;PruebaConfiguracion.c,449 :: 		banRSC2 = 0;
0x047C	0x6A2C      	CLRF        _banRSC2 
;PruebaConfiguracion.c,450 :: 		}
L_interrupt101:
;PruebaConfiguracion.c,452 :: 		}
L_interrupt85:
;PruebaConfiguracion.c,455 :: 		}
L_end_interrupt:
L__interrupt128:
0x047E	0xF000C017  	MOVFF       23, R0
0x0482	0xF001C016  	MOVFF       22, R1
0x0486	0xF00DC015  	MOVFF       21, R13
0x048A	0x0011      	RETFIE      1
; end of _interrupt
_UART1_Init:
;__Lib_UART_c67b67.c,20 :: 		
;__Lib_UART_c67b67.c,23 :: 		
0x048C	0x0EA8      	MOVLW       _UART1_Write
0x048E	0x0103      	MOVLB       3
0x0490	0x6F91      	MOVWF       _UART_Wr_Ptr, 1
0x0492	0x0E05      	MOVLW       hi_addr(_UART1_Write)
0x0494	0x6F92      	MOVWF       _UART_Wr_Ptr+1, 1
0x0496	0x0EAD      	MOVLW       FARG_UART1_Write_data_
0x0498	0x6F93      	MOVWF       _UART_Wr_Ptr+2, 1
0x049A	0x0E03      	MOVLW       hi_addr(FARG_UART1_Write_data_)
0x049C	0x6F94      	MOVWF       _UART_Wr_Ptr+3, 1
;__Lib_UART_c67b67.c,24 :: 		
0x049E	0x0EDE      	MOVLW       _UART1_Read
0x04A0	0x0100      	MOVLB       0
0x04A2	0x6F61      	MOVWF       _UART_Rd_Ptr, 1
0x04A4	0x0E05      	MOVLW       hi_addr(_UART1_Read)
0x04A6	0x6F62      	MOVWF       _UART_Rd_Ptr+1, 1
0x04A8	0x0E00      	MOVLW       0
0x04AA	0x6F63      	MOVWF       _UART_Rd_Ptr+2, 1
0x04AC	0x0E00      	MOVLW       0
0x04AE	0x6F64      	MOVWF       _UART_Rd_Ptr+3, 1
;__Lib_UART_c67b67.c,25 :: 		
0x04B0	0x0EFF      	MOVLW       _UART1_Data_Ready
0x04B2	0x6F65      	MOVWF       _UART_Rdy_Ptr, 1
0x04B4	0x0EFF      	MOVLW       hi_addr(_UART1_Data_Ready)
0x04B6	0x6F66      	MOVWF       _UART_Rdy_Ptr+1, 1
0x04B8	0x0E00      	MOVLW       0
0x04BA	0x6F67      	MOVWF       _UART_Rdy_Ptr+2, 1
0x04BC	0x0E00      	MOVLW       0
0x04BE	0x6F68      	MOVWF       _UART_Rdy_Ptr+3, 1
;__Lib_UART_c67b67.c,26 :: 		
0x04C0	0x0E40      	MOVLW       _UART1_Tx_Idle
0x04C2	0x6E5B      	MOVWF       _UART_Tx_Idle_Ptr 
0x04C4	0x0E05      	MOVLW       hi_addr(_UART1_Tx_Idle)
0x04C6	0x6E5C      	MOVWF       _UART_Tx_Idle_Ptr+1 
0x04C8	0x0E00      	MOVLW       0
0x04CA	0x6E5D      	MOVWF       _UART_Tx_Idle_Ptr+2 
0x04CC	0x0E00      	MOVLW       0
0x04CE	0x6E5E      	MOVWF       _UART_Tx_Idle_Ptr+3 
;__Lib_UART_c67b67.c,28 :: 		
0x04D0	0x8AAC      	BSF         TXSTA, 5 
;__Lib_UART_c67b67.c,29 :: 		
0x04D2	0x0E90      	MOVLW       144
0x04D4	0x6EAB      	MOVWF       RCSTA 
;__Lib_UART_c67b67.c,30 :: 		
0x04D6	0x8E94      	BSF         TRISC7_bit, BitPos(TRISC7_bit+0) 
;__Lib_UART_c67b67.c,31 :: 		
0x04D8	0x9C94      	BCF         TRISC6_bit, BitPos(TRISC6_bit+0) 
;__Lib_UART_c67b67.c,33 :: 		
L_UART1_Init0:
0x04DA	0xAA9E      	BTFSS       PIR1, 5 
0x04DC	0xD003      	BRA         L_UART1_Init1
;__Lib_UART_c67b67.c,34 :: 		
0x04DE	0xF000CFAE  	MOVFF       RCREG, R0
0x04E2	0xD7FB      	BRA         L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67b67.c,35 :: 		
L_end_UART1_Init:
0x04E4	0x0012      	RETURN      0
; end of _UART1_Init
_UART2_Init:
;__Lib_UART_c67b67.c,117 :: 		
;__Lib_UART_c67b67.c,120 :: 		
0x04E6	0x0EC0      	MOVLW       _UART2_Write
0x04E8	0x0103      	MOVLB       3
0x04EA	0x6F91      	MOVWF       _UART_Wr_Ptr, 1
0x04EC	0x0E05      	MOVLW       hi_addr(_UART2_Write)
0x04EE	0x6F92      	MOVWF       _UART_Wr_Ptr+1, 1
0x04F0	0x0EAD      	MOVLW       FARG_UART2_Write_data_
0x04F2	0x6F93      	MOVWF       _UART_Wr_Ptr+2, 1
0x04F4	0x0E03      	MOVLW       hi_addr(FARG_UART2_Write_data_)
0x04F6	0x6F94      	MOVWF       _UART_Wr_Ptr+3, 1
;__Lib_UART_c67b67.c,121 :: 		
0x04F8	0x0ECC      	MOVLW       _UART2_Read
0x04FA	0x0100      	MOVLB       0
0x04FC	0x6F61      	MOVWF       _UART_Rd_Ptr, 1
0x04FE	0x0E05      	MOVLW       hi_addr(_UART2_Read)
0x0500	0x6F62      	MOVWF       _UART_Rd_Ptr+1, 1
0x0502	0x0E00      	MOVLW       0
0x0504	0x6F63      	MOVWF       _UART_Rd_Ptr+2, 1
0x0506	0x0E00      	MOVLW       0
0x0508	0x6F64      	MOVWF       _UART_Rd_Ptr+3, 1
;__Lib_UART_c67b67.c,122 :: 		
0x050A	0x0EFF      	MOVLW       _UART2_Data_Ready
0x050C	0x6F65      	MOVWF       _UART_Rdy_Ptr, 1
0x050E	0x0EFF      	MOVLW       hi_addr(_UART2_Data_Ready)
0x0510	0x6F66      	MOVWF       _UART_Rdy_Ptr+1, 1
0x0512	0x0E00      	MOVLW       0
0x0514	0x6F67      	MOVWF       _UART_Rdy_Ptr+2, 1
0x0516	0x0E00      	MOVLW       0
0x0518	0x6F68      	MOVWF       _UART_Rdy_Ptr+3, 1
;__Lib_UART_c67b67.c,123 :: 		
0x051A	0x0EB6      	MOVLW       _UART2_Tx_Idle
0x051C	0x6E5B      	MOVWF       _UART_Tx_Idle_Ptr 
0x051E	0x0E05      	MOVLW       hi_addr(_UART2_Tx_Idle)
0x0520	0x6E5C      	MOVWF       _UART_Tx_Idle_Ptr+1 
0x0522	0x0E00      	MOVLW       0
0x0524	0x6E5D      	MOVWF       _UART_Tx_Idle_Ptr+2 
0x0526	0x0E00      	MOVLW       0
0x0528	0x6E5E      	MOVWF       _UART_Tx_Idle_Ptr+3 
;__Lib_UART_c67b67.c,125 :: 		
0x052A	0x8A72      	BSF         TXSTA2, 5 
;__Lib_UART_c67b67.c,126 :: 		
0x052C	0x0E90      	MOVLW       144
0x052E	0x6E71      	MOVWF       RCSTA2 
;__Lib_UART_c67b67.c,127 :: 		
0x0530	0x8E93      	BSF         TRISB7_bit, BitPos(TRISB7_bit+0) 
;__Lib_UART_c67b67.c,128 :: 		
0x0532	0x9C93      	BCF         TRISB6_bit, BitPos(TRISB6_bit+0) 
;__Lib_UART_c67b67.c,130 :: 		
L_UART2_Init16:
0x0534	0xAAA4      	BTFSS       RC2IF_bit, BitPos(RC2IF_bit+0) 
0x0536	0xD003      	BRA         L_UART2_Init17
;__Lib_UART_c67b67.c,131 :: 		
0x0538	0xF000CF74  	MOVFF       RCREG2, R0
0x053C	0xD7FB      	BRA         L_UART2_Init16
L_UART2_Init17:
;__Lib_UART_c67b67.c,132 :: 		
L_end_UART2_Init:
0x053E	0x0012      	RETURN      0
; end of _UART2_Init
_UART1_Tx_Idle:
;__Lib_UART_c67b67.c,57 :: 		
;__Lib_UART_c67b67.c,58 :: 		
0x0540	0x0E00      	MOVLW       0
0x0542	0xB2AC      	BTFSC       TXSTA, 1 
0x0544	0x0E01      	MOVLW       1
0x0546	0x6E00      	MOVWF       R0 
;__Lib_UART_c67b67.c,59 :: 		
L_end_UART1_Tx_Idle:
0x0548	0x0012      	RETURN      0
; end of _UART1_Tx_Idle
_SPI1_Init_Advanced:
;__Lib_SPI_c345b123.c,43 :: 		
;__Lib_SPI_c345b123.c,44 :: 		
0x054A	0x9AC6      	BCF         SSP1CON1, 5 
;__Lib_SPI_c345b123.c,45 :: 		
0x054C	0x0EFF      	MOVLW       _SPI1_Read
0x054E	0x0103      	MOVLB       3
0x0550	0x6F95      	MOVWF       _SPI_Rd_Ptr, 1
0x0552	0x0EFF      	MOVLW       hi_addr(_SPI1_Read)
0x0554	0x6F96      	MOVWF       _SPI_Rd_Ptr+1, 1
0x0556	0x0EFF      	MOVLW       FARG_SPI1_Read_buffer
0x0558	0x6F97      	MOVWF       _SPI_Rd_Ptr+2, 1
0x055A	0x0EFF      	MOVLW       hi_addr(FARG_SPI1_Read_buffer)
0x055C	0x6F98      	MOVWF       _SPI_Rd_Ptr+3, 1
;__Lib_SPI_c345b123.c,46 :: 		
0x055E	0x0EFF      	MOVLW       _SPI1_Write
0x0560	0x6F8D      	MOVWF       _SPI_Wr_Ptr, 1
0x0562	0x0EFF      	MOVLW       hi_addr(_SPI1_Write)
0x0564	0x6F8E      	MOVWF       _SPI_Wr_Ptr+1, 1
0x0566	0x0EFF      	MOVLW       FARG_SPI1_Write_data_
0x0568	0x6F8F      	MOVWF       _SPI_Wr_Ptr+2, 1
0x056A	0x0EFF      	MOVLW       hi_addr(FARG_SPI1_Write_data_)
0x056C	0x6F90      	MOVWF       _SPI_Wr_Ptr+3, 1
;__Lib_SPI_c345b123.c,48 :: 		
0x056E	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;__Lib_SPI_c345b123.c,49 :: 		
0x0570	0x5199      	MOVF        FARG_SPI1_Init_Advanced_master, 0, 1
0x0572	0x0A04      	XORLW       4
0x0574	0xE102      	BNZ         L_SPI1_Init_Advanced0
0x0576	0x8694      	BSF         TRISC3_bit, BitPos(TRISC3_bit+0) 
0x0578	0xD001      	BRA         L_SPI1_Init_Advanced1
L_SPI1_Init_Advanced0:
;__Lib_SPI_c345b123.c,50 :: 		
0x057A	0x9694      	BCF         TRISC3_bit, BitPos(TRISC3_bit+0) 
L_SPI1_Init_Advanced1:
;__Lib_SPI_c345b123.c,51 :: 		
0x057C	0x8894      	BSF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;__Lib_SPI_c345b123.c,53 :: 		
0x057E	0x6AC6      	CLRF        SSP1CON1 
;__Lib_SPI_c345b123.c,54 :: 		
0x0580	0x9CC7      	BCF         SSP1STAT, 6 
;__Lib_SPI_c345b123.c,55 :: 		
0x0582	0x9EC7      	BCF         SSP1STAT, 7 
;__Lib_SPI_c345b123.c,56 :: 		
0x0584	0x5199      	MOVF        FARG_SPI1_Init_Advanced_master, 0, 1
0x0586	0x12C6      	IORWF       SSP1CON1, 1 
;__Lib_SPI_c345b123.c,57 :: 		
0x0588	0x519B      	MOVF        FARG_SPI1_Init_Advanced_clock_idle, 0, 1
0x058A	0x12C6      	IORWF       SSP1CON1, 1 
;__Lib_SPI_c345b123.c,58 :: 		
0x058C	0x519A      	MOVF        FARG_SPI1_Init_Advanced_data_sample, 0, 1
0x058E	0x12C7      	IORWF       SSP1STAT, 1 
;__Lib_SPI_c345b123.c,60 :: 		
0x0590	0x539B      	MOVF        FARG_SPI1_Init_Advanced_clock_idle, 1, 1
0x0592	0xE005      	BZ          L_SPI1_Init_Advanced2
;__Lib_SPI_c345b123.c,61 :: 		
0x0594	0x519C      	MOVF        FARG_SPI1_Init_Advanced_transmit_edge, 0, 1
0x0596	0x0A00      	XORLW       0
0x0598	0xB4D8      	BTFSC       STATUS, 2 
;__Lib_SPI_c345b123.c,62 :: 		
0x059A	0x8CC7      	BSF         SSP1STAT, 6 
L_SPI1_Init_Advanced3:
;__Lib_SPI_c345b123.c,63 :: 		
0x059C	0xD003      	BRA         L_SPI1_Init_Advanced4
L_SPI1_Init_Advanced2:
;__Lib_SPI_c345b123.c,65 :: 		
0x059E	0x539C      	MOVF        FARG_SPI1_Init_Advanced_transmit_edge, 1, 1
0x05A0	0xA4D8      	BTFSS       STATUS, 2 
;__Lib_SPI_c345b123.c,66 :: 		
0x05A2	0x8CC7      	BSF         SSP1STAT, 6 
L_SPI1_Init_Advanced5:
;__Lib_SPI_c345b123.c,67 :: 		
L_SPI1_Init_Advanced4:
;__Lib_SPI_c345b123.c,68 :: 		
0x05A4	0x8AC6      	BSF         SSP1CON1, 5 
;__Lib_SPI_c345b123.c,69 :: 		
L_end_SPI1_Init_Advanced:
0x05A6	0x0012      	RETURN      0
; end of _SPI1_Init_Advanced
_UART1_Write:
;__Lib_UART_c67b67.c,63 :: 		
;__Lib_UART_c67b67.c,64 :: 		
L_UART1_Write3:
0x05A8	0xB2AC      	BTFSC       TXSTA, 1 
0x05AA	0xD002      	BRA         L_UART1_Write4
;__Lib_UART_c67b67.c,65 :: 		
0x05AC	0x0000      	NOP
0x05AE	0xD7FC      	BRA         L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67b67.c,66 :: 		
0x05B0	0xFFADC3AD  	MOVFF       FARG_UART1_Write_data_, TXREG
;__Lib_UART_c67b67.c,67 :: 		
L_end_UART1_Write:
0x05B4	0x0012      	RETURN      0
; end of _UART1_Write
_UART2_Tx_Idle:
;__Lib_UART_c67b67.c,154 :: 		
;__Lib_UART_c67b67.c,155 :: 		
0x05B6	0x0E00      	MOVLW       0
0x05B8	0xB272      	BTFSC       TXSTA2, 1 
0x05BA	0x0E01      	MOVLW       1
0x05BC	0x6E00      	MOVWF       R0 
;__Lib_UART_c67b67.c,156 :: 		
L_end_UART2_Tx_Idle:
0x05BE	0x0012      	RETURN      0
; end of _UART2_Tx_Idle
_UART2_Write:
;__Lib_UART_c67b67.c,160 :: 		
;__Lib_UART_c67b67.c,161 :: 		
L_UART2_Write19:
0x05C0	0xB272      	BTFSC       TXSTA2, 1 
0x05C2	0xD001      	BRA         L_UART2_Write20
;__Lib_UART_c67b67.c,162 :: 		
0x05C4	0xD7FD      	BRA         L_UART2_Write19
L_UART2_Write20:
;__Lib_UART_c67b67.c,163 :: 		
0x05C6	0xFF73C3AD  	MOVFF       FARG_UART2_Write_data_, TXREG2
;__Lib_UART_c67b67.c,164 :: 		
L_end_UART2_Write:
0x05CA	0x0012      	RETURN      0
; end of _UART2_Write
_UART2_Read:
;__Lib_UART_c67b67.c,141 :: 		
;__Lib_UART_c67b67.c,144 :: 		
0x05CC	0xF001CF74  	MOVFF       RCREG2, R1
;__Lib_UART_c67b67.c,145 :: 		
0x05D0	0xA271      	BTFSS       RCSTA2, 1 
0x05D2	0xD002      	BRA         L_UART2_Read18
;__Lib_UART_c67b67.c,146 :: 		
0x05D4	0x9871      	BCF         RCSTA2, 4 
;__Lib_UART_c67b67.c,147 :: 		
0x05D6	0x8871      	BSF         RCSTA2, 4 
;__Lib_UART_c67b67.c,148 :: 		
L_UART2_Read18:
;__Lib_UART_c67b67.c,149 :: 		
0x05D8	0xF000C001  	MOVFF       R1, R0
;__Lib_UART_c67b67.c,150 :: 		
L_end_UART2_Read:
0x05DC	0x0012      	RETURN      0
; end of _UART2_Read
_UART1_Read:
;__Lib_UART_c67b67.c,44 :: 		
;__Lib_UART_c67b67.c,47 :: 		
0x05DE	0xF001CFAE  	MOVFF       RCREG, R1
;__Lib_UART_c67b67.c,48 :: 		
0x05E2	0xA2AB      	BTFSS       RCSTA, 1 
0x05E4	0xD002      	BRA         L_UART1_Read2
;__Lib_UART_c67b67.c,49 :: 		
0x05E6	0x98AB      	BCF         RCSTA, 4 
;__Lib_UART_c67b67.c,50 :: 		
0x05E8	0x88AB      	BSF         RCSTA, 4 
;__Lib_UART_c67b67.c,51 :: 		
L_UART1_Read2:
;__Lib_UART_c67b67.c,52 :: 		
0x05EA	0xF000C001  	MOVFF       R1, R0
;__Lib_UART_c67b67.c,53 :: 		
L_end_UART1_Read:
0x05EE	0x0012      	RETURN      0
; end of _UART1_Read
_ConfiguracionPrincipal:
;PruebaConfiguracion.c,113 :: 		void ConfiguracionPrincipal(){
;PruebaConfiguracion.c,116 :: 		OSCCON.IDLEN=1;                                    //Entra en modo IDLE durante la instruccion SLEEP
0x05F0	0x8ED3      	BSF         OSCCON, 7 
;PruebaConfiguracion.c,117 :: 		OSCCON.IRCF2=1;                                    //HFINTOSC=16MHz  IRFC=111
0x05F2	0x8CD3      	BSF         OSCCON, 6 
;PruebaConfiguracion.c,118 :: 		OSCCON.IRCF1=1;
0x05F4	0x8AD3      	BSF         OSCCON, 5 
;PruebaConfiguracion.c,119 :: 		OSCCON.IRCF0=1;
0x05F6	0x88D3      	BSF         OSCCON, 4 
;PruebaConfiguracion.c,120 :: 		OSCCON.SCS1=1;                                     //System Clock Select bit:  1x=Internal oscillator block
0x05F8	0x82D3      	BSF         OSCCON, 1 
;PruebaConfiguracion.c,121 :: 		OSCCON.SCS0=1;
0x05FA	0x80D3      	BSF         OSCCON, 0 
;PruebaConfiguracion.c,124 :: 		ANSELA = 0;                                        //Configura PORTA como digital
0x05FC	0x010F      	MOVLB       15
0x05FE	0x6B38      	CLRF        ANSELA, 1
;PruebaConfiguracion.c,125 :: 		ANSELB = 0;                                        //Configura PORTB como digital
0x0600	0x6B39      	CLRF        ANSELB, 1
;PruebaConfiguracion.c,126 :: 		ANSELC = 0;                                        //Configura PORTC como digital
0x0602	0x6B3A      	CLRF        ANSELC, 1
;PruebaConfiguracion.c,128 :: 		LED1_Direction = 0;                                //Configura el pin LED1 como salida
0x0604	0x9493      	BCF         TRISB2_bit, BitPos(TRISB2_bit+0) 
;PruebaConfiguracion.c,129 :: 		LED2_Direction = 0;                                //Configura el pin LED1 como salida
0x0606	0x9893      	BCF         TRISB4_bit, BitPos(TRISB4_bit+0) 
;PruebaConfiguracion.c,130 :: 		RP0_Direction = 0;                                 //Configura el pin RP0 como salida
0x0608	0x9094      	BCF         TRISC0_bit, BitPos(TRISC0_bit+0) 
;PruebaConfiguracion.c,131 :: 		MS1RS485_Direction = 0;                            //Configura el pin MS1RS485 como salida
0x060A	0x9693      	BCF         TRISB3_bit, BitPos(TRISB3_bit+0) 
;PruebaConfiguracion.c,132 :: 		MS2RS485_Direction = 0;                            //Configura el pin MS2RS485 como salida
0x060C	0x9A93      	BCF         TRISB5_bit, BitPos(TRISB5_bit+0) 
;PruebaConfiguracion.c,133 :: 		TRISA5_bit = 1;                                    //SS1 In
0x060E	0x8A92      	BSF         TRISA5_bit, BitPos(TRISA5_bit+0) 
;PruebaConfiguracion.c,134 :: 		TRISC3_bit = 1;                                    //SCK1 In
0x0610	0x8694      	BSF         TRISC3_bit, BitPos(TRISC3_bit+0) 
;PruebaConfiguracion.c,135 :: 		TRISC4_bit = 1;                                    //SDI1 In
0x0612	0x8894      	BSF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;PruebaConfiguracion.c,136 :: 		TRISC5_bit = 0;                                    //SDO1 Out
0x0614	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;PruebaConfiguracion.c,138 :: 		INTCON.GIE = 1;                                    //Habilita las interrupciones globales
0x0616	0x8EF2      	BSF         INTCON, 7 
;PruebaConfiguracion.c,139 :: 		INTCON.PEIE = 1;                                   //Habilita las interrupciones perifericas
0x0618	0x8CF2      	BSF         INTCON, 6 
;PruebaConfiguracion.c,142 :: 		PIE1.SSP1IE = 1;                                   //Activa la interrupcion por SPI
0x061A	0x869D      	BSF         PIE1, 3 
;PruebaConfiguracion.c,143 :: 		PIR1.SSP1IF = 0;                                   //Limpia la bandera de interrupcion por SPI *
0x061C	0x969E      	BCF         PIR1, 3 
;PruebaConfiguracion.c,144 :: 		SPI1_Init_Advanced(_SPI_SLAVE_SS_ENABLE, _SPI_DATA_SAMPLE_END, _SPI_CLK_IDLE_HIGH, _SPI_HIGH_2_LOW);
0x061E	0x0E04      	MOVLW       4
0x0620	0x0103      	MOVLB       3
0x0622	0x6F99      	MOVWF       FARG_SPI1_Init_Advanced_master, 1
0x0624	0x0E80      	MOVLW       128
0x0626	0x6F9A      	MOVWF       FARG_SPI1_Init_Advanced_data_sample, 1
0x0628	0x0E10      	MOVLW       16
0x062A	0x6F9B      	MOVWF       FARG_SPI1_Init_Advanced_clock_idle, 1
0x062C	0x6B9C      	CLRF        FARG_SPI1_Init_Advanced_transmit_edge, 1
0x062E	0xDF8D      	RCALL       _SPI1_Init_Advanced
;PruebaConfiguracion.c,147 :: 		PIE1.RC1IE = 1;                                   //Habilita la interrupcion en UART1 receive
0x0630	0x8A9D      	BSF         PIE1, 5 
;PruebaConfiguracion.c,148 :: 		PIR1.RC1IF = 0;                                   //Limpia la bandera de interrupcion UART1
0x0632	0x9A9E      	BCF         PIR1, 5 
;PruebaConfiguracion.c,149 :: 		PIE3.RC2IE = 1;                                   //Habilita la interrupcion en UART2 receive
0x0634	0x8AA3      	BSF         PIE3, 5 
;PruebaConfiguracion.c,150 :: 		PIR3.RC2IF = 0;                                   //Limpia la bandera de interrupcion
0x0636	0x9AA4      	BCF         PIR3, 5 
;PruebaConfiguracion.c,151 :: 		UART1_Init(19200);                                //Inicializa el UART1 a 19200 bps
0x0638	0x86B8      	BSF         BAUDCON, 3, 0
0x063A	0x6AB0      	CLRF        SPBRGH 
0x063C	0x0ECF      	MOVLW       207
0x063E	0x6EAF      	MOVWF       SPBRG 
0x0640	0x84AC      	BSF         TXSTA, 2, 0
0x0642	0xDF24      	RCALL       _UART1_Init
;PruebaConfiguracion.c,152 :: 		UART2_Init(19200);                                //Inicializa el UART2 a 19200 bps
0x0644	0x8670      	BSF         BAUDCON2, 3, 0
0x0646	0x6A76      	CLRF        SPBRGH2 
0x0648	0x0ECF      	MOVLW       207
0x064A	0x6E75      	MOVWF       SPBRG2 
0x064C	0x8472      	BSF         TXSTA2, 2, 0
0x064E	0xDF4B      	RCALL       _UART2_Init
;PruebaConfiguracion.c,161 :: 		Delay_ms(100);                                     //Espera hasta que se estabilicen los cambios
0x0650	0x0E03      	MOVLW       3
0x0652	0x6E0B      	MOVWF       R11, 0
0x0654	0x0E08      	MOVLW       8
0x0656	0x6E0C      	MOVWF       R12, 0
0x0658	0x0E77      	MOVLW       119
0x065A	0x6E0D      	MOVWF       R13, 0
L_ConfiguracionPrincipal12:
0x065C	0x2E0D      	DECFSZ      R13, 1, 0
0x065E	0xD7FE      	BRA         L_ConfiguracionPrincipal12
0x0660	0x2E0C      	DECFSZ      R12, 1, 0
0x0662	0xD7FC      	BRA         L_ConfiguracionPrincipal12
0x0664	0x2E0B      	DECFSZ      R11, 1, 0
0x0666	0xD7FA      	BRA         L_ConfiguracionPrincipal12
;PruebaConfiguracion.c,162 :: 		}
L_end_ConfiguracionPrincipal:
0x0668	0x0012      	RETURN      0
; end of _ConfiguracionPrincipal
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x066A	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x066C	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0670	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0672	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0674	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0676	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0678	0x0012      	RETURN      0
; end of ___CC2DW
_CambiarEstadoBandera:
;PruebaConfiguracion.c,165 :: 		void CambiarEstadoBandera(unsigned char bandera, unsigned char estado){
;PruebaConfiguracion.c,167 :: 		if (estado==1){
0x067A	0x0103      	MOVLB       3
0x067C	0x519E      	MOVF        FARG_CambiarEstadoBandera_estado, 0, 1
0x067E	0x0A01      	XORLW       1
0x0680	0xE11D      	BNZ         L_CambiarEstadoBandera13
;PruebaConfiguracion.c,169 :: 		banSPI0 = 3;
0x0682	0x0E03      	MOVLW       3
0x0684	0x6E30      	MOVWF       _banSPI0 
;PruebaConfiguracion.c,170 :: 		banSPI1 = 3;
0x0686	0x0E03      	MOVLW       3
0x0688	0x6E3A      	MOVWF       _banSPI1 
;PruebaConfiguracion.c,172 :: 		switch (bandera){
0x068A	0xD00C      	BRA         L_CambiarEstadoBandera14
;PruebaConfiguracion.c,173 :: 		case 0:
L_CambiarEstadoBandera16:
;PruebaConfiguracion.c,174 :: 		banSPI0 = 1;
0x068C	0x0E01      	MOVLW       1
0x068E	0x6E30      	MOVWF       _banSPI0 
;PruebaConfiguracion.c,175 :: 		break;
0x0690	0xD015      	BRA         L_CambiarEstadoBandera15
;PruebaConfiguracion.c,176 :: 		case 1:
L_CambiarEstadoBandera17:
;PruebaConfiguracion.c,177 :: 		banSPI1 = 1;
0x0692	0x0E01      	MOVLW       1
0x0694	0x6E3A      	MOVWF       _banSPI1 
;PruebaConfiguracion.c,178 :: 		break;
0x0696	0xD012      	BRA         L_CambiarEstadoBandera15
;PruebaConfiguracion.c,179 :: 		case 2:
L_CambiarEstadoBandera18:
;PruebaConfiguracion.c,180 :: 		banSPI2 = 1;
0x0698	0x0E01      	MOVLW       1
0x069A	0x6E3B      	MOVWF       _banSPI2 
;PruebaConfiguracion.c,181 :: 		break;
0x069C	0xD00F      	BRA         L_CambiarEstadoBandera15
;PruebaConfiguracion.c,182 :: 		case 3:
L_CambiarEstadoBandera19:
;PruebaConfiguracion.c,183 :: 		banSPI3 = 1;
0x069E	0x0E01      	MOVLW       1
0x06A0	0x6E39      	MOVWF       _banSPI3 
;PruebaConfiguracion.c,184 :: 		break;
0x06A2	0xD00C      	BRA         L_CambiarEstadoBandera15
;PruebaConfiguracion.c,185 :: 		}
L_CambiarEstadoBandera14:
0x06A4	0x519D      	MOVF        FARG_CambiarEstadoBandera_bandera, 0, 1
0x06A6	0x0A00      	XORLW       0
0x06A8	0xE0F1      	BZ          L_CambiarEstadoBandera16
0x06AA	0x519D      	MOVF        FARG_CambiarEstadoBandera_bandera, 0, 1
0x06AC	0x0A01      	XORLW       1
0x06AE	0xE0F1      	BZ          L_CambiarEstadoBandera17
0x06B0	0x519D      	MOVF        FARG_CambiarEstadoBandera_bandera, 0, 1
0x06B2	0x0A02      	XORLW       2
0x06B4	0xE0F1      	BZ          L_CambiarEstadoBandera18
0x06B6	0x519D      	MOVF        FARG_CambiarEstadoBandera_bandera, 0, 1
0x06B8	0x0A03      	XORLW       3
0x06BA	0xE0F1      	BZ          L_CambiarEstadoBandera19
L_CambiarEstadoBandera15:
;PruebaConfiguracion.c,186 :: 		}
L_CambiarEstadoBandera13:
;PruebaConfiguracion.c,188 :: 		if (estado==0){
0x06BC	0x519E      	MOVF        FARG_CambiarEstadoBandera_estado, 0, 1
0x06BE	0x0A00      	XORLW       0
0x06C0	0xE104      	BNZ         L_CambiarEstadoBandera20
;PruebaConfiguracion.c,189 :: 		banSPI0 = 0;
0x06C2	0x6A30      	CLRF        _banSPI0 
;PruebaConfiguracion.c,190 :: 		banSPI1 = 0;
0x06C4	0x6A3A      	CLRF        _banSPI1 
;PruebaConfiguracion.c,191 :: 		banSPI2 = 0;
0x06C6	0x6A3B      	CLRF        _banSPI2 
;PruebaConfiguracion.c,192 :: 		banSPI3 = 0;
0x06C8	0x6A39      	CLRF        _banSPI3 
;PruebaConfiguracion.c,193 :: 		}
L_CambiarEstadoBandera20:
;PruebaConfiguracion.c,194 :: 		}
L_end_CambiarEstadoBandera:
0x06CA	0x0012      	RETURN      0
; end of _CambiarEstadoBandera
_EnviarTramaRS485:
;rs485.c,20 :: 		void EnviarTramaRS485(unsigned char puertoUART, unsigned char *cabecera, unsigned char *payload){
;rs485.c,32 :: 		ptrnumDatos = (unsigned char *) & numDatos;
0x06CC	0x0EA9      	MOVLW       EnviarTramaRS485_numDatos_L0
0x06CE	0x0103      	MOVLB       3
0x06D0	0x6FAB      	MOVWF       EnviarTramaRS485_ptrnumDatos_L0, 1
0x06D2	0x0E03      	MOVLW       hi_addr(EnviarTramaRS485_numDatos_L0)
0x06D4	0x6FAC      	MOVWF       EnviarTramaRS485_ptrnumDatos_L0+1, 1
;rs485.c,35 :: 		direccion = cabecera[0];
0x06D6	0xFFE9C39E  	MOVFF       FARG_EnviarTramaRS485_cabecera, FSR0L
0x06DA	0xFFEAC39F  	MOVFF       FARG_EnviarTramaRS485_cabecera+1, FSR0H
0x06DE	0xF3A2CFEE  	MOVFF       POSTINC0, EnviarTramaRS485_direccion_L0
;rs485.c,36 :: 		funcion = cabecera[1];
0x06E2	0x0E01      	MOVLW       1
0x06E4	0x259E      	ADDWF       FARG_EnviarTramaRS485_cabecera, 0, 1
0x06E6	0x6EE9      	MOVWF       FSR0L 
0x06E8	0x0E00      	MOVLW       0
0x06EA	0x219F      	ADDWFC      FARG_EnviarTramaRS485_cabecera+1, 0, 1
0x06EC	0x6EEA      	MOVWF       FSR0H 
0x06EE	0xF3A3CFEE  	MOVFF       POSTINC0, EnviarTramaRS485_funcion_L0
;rs485.c,37 :: 		subfuncion = cabecera[2];
0x06F2	0x0E02      	MOVLW       2
0x06F4	0x259E      	ADDWF       FARG_EnviarTramaRS485_cabecera, 0, 1
0x06F6	0x6EE9      	MOVWF       FSR0L 
0x06F8	0x0E00      	MOVLW       0
0x06FA	0x219F      	ADDWFC      FARG_EnviarTramaRS485_cabecera+1, 0, 1
0x06FC	0x6EEA      	MOVWF       FSR0H 
0x06FE	0xF3A4CFEE  	MOVFF       POSTINC0, EnviarTramaRS485_subfuncion_L0
;rs485.c,38 :: 		lsbNumDatos = cabecera[3];
0x0702	0x0E03      	MOVLW       3
0x0704	0x259E      	ADDWF       FARG_EnviarTramaRS485_cabecera, 0, 1
0x0706	0x6EE9      	MOVWF       FSR0L 
0x0708	0x0E00      	MOVLW       0
0x070A	0x219F      	ADDWFC      FARG_EnviarTramaRS485_cabecera+1, 0, 1
0x070C	0x6EEA      	MOVWF       FSR0H 
0x070E	0xF000CFEE  	MOVFF       POSTINC0, R0
0x0712	0xF3A5C000  	MOVFF       R0, EnviarTramaRS485_lsbNumDatos_L0
;rs485.c,39 :: 		msbNumDatos = cabecera[4];
0x0716	0x0E04      	MOVLW       4
0x0718	0x259E      	ADDWF       FARG_EnviarTramaRS485_cabecera, 0, 1
0x071A	0x6EE9      	MOVWF       FSR0L 
0x071C	0x0E00      	MOVLW       0
0x071E	0x219F      	ADDWFC      FARG_EnviarTramaRS485_cabecera+1, 0, 1
0x0720	0x6EEA      	MOVWF       FSR0H 
0x0722	0xF3A6CFEE  	MOVFF       POSTINC0, EnviarTramaRS485_msbNumDatos_L0
;rs485.c,42 :: 		*(ptrnumDatos) = lsbNumDatos;
0x0726	0xFFE1C3AB  	MOVFF       EnviarTramaRS485_ptrnumDatos_L0, FSR1L
0x072A	0xFFE2C3AC  	MOVFF       EnviarTramaRS485_ptrnumDatos_L0+1, FSR1H
0x072E	0xFFE6C000  	MOVFF       R0, POSTINC1
;rs485.c,43 :: 		*(ptrnumDatos+1) = msbNumDatos;
0x0732	0x0E01      	MOVLW       1
0x0734	0x25AB      	ADDWF       EnviarTramaRS485_ptrnumDatos_L0, 0, 1
0x0736	0x6EE1      	MOVWF       FSR1L 
0x0738	0x0E00      	MOVLW       0
0x073A	0x21AC      	ADDWFC      EnviarTramaRS485_ptrnumDatos_L0+1, 0, 1
0x073C	0x6EE2      	MOVWF       FSR1H 
0x073E	0xFFE6C3A6  	MOVFF       EnviarTramaRS485_msbNumDatos_L0, POSTINC1
;rs485.c,45 :: 		if (puertoUART == 1){
0x0742	0x519D      	MOVF        FARG_EnviarTramaRS485_puertoUART, 0, 1
0x0744	0x0A01      	XORLW       1
0x0746	0xE139      	BNZ         L_EnviarTramaRS4850
;rs485.c,46 :: 		MS1RS485 = 1;                                                            //Establece el Max485 en modo escritura
0x0748	0x868A      	BSF         MS1RS485, BitPos(MS1RS485+0) 
;rs485.c,47 :: 		UART1_Write(0x3A);                                                      //Envia la cabecera de la trama
0x074A	0x0E3A      	MOVLW       58
0x074C	0x6FAD      	MOVWF       FARG_UART1_Write_data_, 1
0x074E	0xDF2C      	RCALL       _UART1_Write
;rs485.c,48 :: 		UART1_Write(direccion);                                                 //Envia la direccion del destinatario
0x0750	0xF3ADC3A2  	MOVFF       EnviarTramaRS485_direccion_L0, FARG_UART1_Write_data_
0x0754	0xDF29      	RCALL       _UART1_Write
;rs485.c,49 :: 		UART1_Write(funcion);                                                   //Envia el codigo de la funcion
0x0756	0xF3ADC3A3  	MOVFF       EnviarTramaRS485_funcion_L0, FARG_UART1_Write_data_
0x075A	0xDF26      	RCALL       _UART1_Write
;rs485.c,50 :: 		UART1_Write(subfuncion);                                                //Envia el codigo de la subfuncion
0x075C	0xF3ADC3A4  	MOVFF       EnviarTramaRS485_subfuncion_L0, FARG_UART1_Write_data_
0x0760	0xDF23      	RCALL       _UART1_Write
;rs485.c,51 :: 		UART1_Write(lsbNumDatos);                                               //Envia el LSB del numero de datos
0x0762	0xF3ADC3A5  	MOVFF       EnviarTramaRS485_lsbNumDatos_L0, FARG_UART1_Write_data_
0x0766	0xDF20      	RCALL       _UART1_Write
;rs485.c,52 :: 		UART1_Write(msbNumDatos);                                               //Envia el MSB del numero de datos
0x0768	0xF3ADC3A6  	MOVFF       EnviarTramaRS485_msbNumDatos_L0, FARG_UART1_Write_data_
0x076C	0xDF1D      	RCALL       _UART1_Write
;rs485.c,53 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x076E	0x0103      	MOVLB       3
0x0770	0x6BA7      	CLRF        EnviarTramaRS485_iDatos_L0, 1
0x0772	0x6BA8      	CLRF        EnviarTramaRS485_iDatos_L0+1, 1
L_EnviarTramaRS4851:
0x0774	0x51AA      	MOVF        EnviarTramaRS485_numDatos_L0+1, 0, 1
0x0776	0x5DA8      	SUBWF       EnviarTramaRS485_iDatos_L0+1, 0, 1
0x0778	0xE102      	BNZ         L__EnviarTramaRS485121
0x077A	0x51A9      	MOVF        EnviarTramaRS485_numDatos_L0, 0, 1
0x077C	0x5DA7      	SUBWF       EnviarTramaRS485_iDatos_L0, 0, 1
L__EnviarTramaRS485121:
0x077E	0xE20D      	BC          L_EnviarTramaRS4852
;rs485.c,54 :: 		UART1_Write(payload[iDatos]);
0x0780	0x51A7      	MOVF        EnviarTramaRS485_iDatos_L0, 0, 1
0x0782	0x25A0      	ADDWF       FARG_EnviarTramaRS485_payload, 0, 1
0x0784	0x6EE9      	MOVWF       FSR0L 
0x0786	0x51A8      	MOVF        EnviarTramaRS485_iDatos_L0+1, 0, 1
0x0788	0x21A1      	ADDWFC      FARG_EnviarTramaRS485_payload+1, 0, 1
0x078A	0x6EEA      	MOVWF       FSR0H 
0x078C	0xF3ADCFEE  	MOVFF       POSTINC0, FARG_UART1_Write_data_
0x0790	0xDF0B      	RCALL       _UART1_Write
;rs485.c,53 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x0792	0x0103      	MOVLB       3
0x0794	0x4BA7      	INFSNZ      EnviarTramaRS485_iDatos_L0, 1, 1
0x0796	0x2BA8      	INCF        EnviarTramaRS485_iDatos_L0+1, 1, 1
;rs485.c,55 :: 		}
0x0798	0xD7ED      	BRA         L_EnviarTramaRS4851
L_EnviarTramaRS4852:
;rs485.c,56 :: 		UART1_Write(0x0D);                                                      //Envia el primer delimitador de final de la trama
0x079A	0x0E0D      	MOVLW       13
0x079C	0x6FAD      	MOVWF       FARG_UART1_Write_data_, 1
0x079E	0xDF04      	RCALL       _UART1_Write
;rs485.c,57 :: 		UART1_Write(0x0A);                                                      //Envia el segundo delimitador de final de la trama
0x07A0	0x0E0A      	MOVLW       10
0x07A2	0x0103      	MOVLB       3
0x07A4	0x6FAD      	MOVWF       FARG_UART1_Write_data_, 1
0x07A6	0xDF00      	RCALL       _UART1_Write
;rs485.c,58 :: 		UART1_Write(0x00);                                                      //Envia un byte adicional
0x07A8	0x0103      	MOVLB       3
0x07AA	0x6BAD      	CLRF        FARG_UART1_Write_data_, 1
0x07AC	0xDEFD      	RCALL       _UART1_Write
;rs485.c,59 :: 		while(UART1_Tx_Idle()==0);                                              //Espera hasta que se haya terminado de enviar todo el dato por UART antes de continuar
L_EnviarTramaRS4854:
0x07AE	0xDEC8      	RCALL       _UART1_Tx_Idle
0x07B0	0x5000      	MOVF        R0, 0 
0x07B2	0x0A00      	XORLW       0
0x07B4	0xE101      	BNZ         L_EnviarTramaRS4855
0x07B6	0xD7FB      	BRA         L_EnviarTramaRS4854
L_EnviarTramaRS4855:
;rs485.c,60 :: 		MS1RS485 = 0;                                                           //Establece el Max485 en modo lectura
0x07B8	0x968A      	BCF         MS1RS485, BitPos(MS1RS485+0) 
;rs485.c,61 :: 		}
L_EnviarTramaRS4850:
;rs485.c,63 :: 		if (puertoUART == 2){
0x07BA	0x0103      	MOVLB       3
0x07BC	0x519D      	MOVF        FARG_EnviarTramaRS485_puertoUART, 0, 1
0x07BE	0x0A02      	XORLW       2
0x07C0	0xE139      	BNZ         L_EnviarTramaRS4856
;rs485.c,64 :: 		MS2RS485 = 1;                                                            //Establece el Max485 en modo escritura
0x07C2	0x8A8A      	BSF         MS2RS485, BitPos(MS2RS485+0) 
;rs485.c,65 :: 		UART2_Write(0x3A);                                                      //Envia la cabecera de la trama
0x07C4	0x0E3A      	MOVLW       58
0x07C6	0x6FAD      	MOVWF       FARG_UART2_Write_data_, 1
0x07C8	0xDEFB      	RCALL       _UART2_Write
;rs485.c,66 :: 		UART2_Write(direccion);                                                 //Envia la direccion del destinatario
0x07CA	0xF3ADC3A2  	MOVFF       EnviarTramaRS485_direccion_L0, FARG_UART2_Write_data_
0x07CE	0xDEF8      	RCALL       _UART2_Write
;rs485.c,67 :: 		UART2_Write(funcion);                                                   //Envia el codigo de la funcion
0x07D0	0xF3ADC3A3  	MOVFF       EnviarTramaRS485_funcion_L0, FARG_UART2_Write_data_
0x07D4	0xDEF5      	RCALL       _UART2_Write
;rs485.c,68 :: 		UART2_Write(subfuncion);                                                //Envia el codigo de la subfuncion
0x07D6	0xF3ADC3A4  	MOVFF       EnviarTramaRS485_subfuncion_L0, FARG_UART2_Write_data_
0x07DA	0xDEF2      	RCALL       _UART2_Write
;rs485.c,69 :: 		UART2_Write(lsbNumDatos);                                               //Envia el LSB del numero de datos
0x07DC	0xF3ADC3A5  	MOVFF       EnviarTramaRS485_lsbNumDatos_L0, FARG_UART2_Write_data_
0x07E0	0xDEEF      	RCALL       _UART2_Write
;rs485.c,70 :: 		UART2_Write(msbNumDatos);                                               //Envia el MSB del numero de datos
0x07E2	0xF3ADC3A6  	MOVFF       EnviarTramaRS485_msbNumDatos_L0, FARG_UART2_Write_data_
0x07E6	0xDEEC      	RCALL       _UART2_Write
;rs485.c,71 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x07E8	0x0103      	MOVLB       3
0x07EA	0x6BA7      	CLRF        EnviarTramaRS485_iDatos_L0, 1
0x07EC	0x6BA8      	CLRF        EnviarTramaRS485_iDatos_L0+1, 1
L_EnviarTramaRS4857:
0x07EE	0x51AA      	MOVF        EnviarTramaRS485_numDatos_L0+1, 0, 1
0x07F0	0x5DA8      	SUBWF       EnviarTramaRS485_iDatos_L0+1, 0, 1
0x07F2	0xE102      	BNZ         L__EnviarTramaRS485122
0x07F4	0x51A9      	MOVF        EnviarTramaRS485_numDatos_L0, 0, 1
0x07F6	0x5DA7      	SUBWF       EnviarTramaRS485_iDatos_L0, 0, 1
L__EnviarTramaRS485122:
0x07F8	0xE20D      	BC          L_EnviarTramaRS4858
;rs485.c,72 :: 		UART2_Write(payload[iDatos]);
0x07FA	0x51A7      	MOVF        EnviarTramaRS485_iDatos_L0, 0, 1
0x07FC	0x25A0      	ADDWF       FARG_EnviarTramaRS485_payload, 0, 1
0x07FE	0x6EE9      	MOVWF       FSR0L 
0x0800	0x51A8      	MOVF        EnviarTramaRS485_iDatos_L0+1, 0, 1
0x0802	0x21A1      	ADDWFC      FARG_EnviarTramaRS485_payload+1, 0, 1
0x0804	0x6EEA      	MOVWF       FSR0H 
0x0806	0xF3ADCFEE  	MOVFF       POSTINC0, FARG_UART2_Write_data_
0x080A	0xDEDA      	RCALL       _UART2_Write
;rs485.c,71 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x080C	0x0103      	MOVLB       3
0x080E	0x4BA7      	INFSNZ      EnviarTramaRS485_iDatos_L0, 1, 1
0x0810	0x2BA8      	INCF        EnviarTramaRS485_iDatos_L0+1, 1, 1
;rs485.c,73 :: 		}
0x0812	0xD7ED      	BRA         L_EnviarTramaRS4857
L_EnviarTramaRS4858:
;rs485.c,74 :: 		UART2_Write(0x0D);                                                      //Envia el primer delimitador de final de la trama
0x0814	0x0E0D      	MOVLW       13
0x0816	0x6FAD      	MOVWF       FARG_UART2_Write_data_, 1
0x0818	0xDED3      	RCALL       _UART2_Write
;rs485.c,75 :: 		UART2_Write(0x0A);                                                      //Envia el segundo delimitador de final de la trama
0x081A	0x0E0A      	MOVLW       10
0x081C	0x0103      	MOVLB       3
0x081E	0x6FAD      	MOVWF       FARG_UART2_Write_data_, 1
0x0820	0xDECF      	RCALL       _UART2_Write
;rs485.c,76 :: 		UART2_Write(0x00);                                                      //Envia un byte adicional
0x0822	0x0103      	MOVLB       3
0x0824	0x6BAD      	CLRF        FARG_UART2_Write_data_, 1
0x0826	0xDECC      	RCALL       _UART2_Write
;rs485.c,77 :: 		while(UART2_Tx_Idle()==0);                                              //Espera hasta que se haya terminado de enviar todo el dato por UART antes de continuar
L_EnviarTramaRS48510:
0x0828	0xDEC6      	RCALL       _UART2_Tx_Idle
0x082A	0x5000      	MOVF        R0, 0 
0x082C	0x0A00      	XORLW       0
0x082E	0xE101      	BNZ         L_EnviarTramaRS48511
0x0830	0xD7FB      	BRA         L_EnviarTramaRS48510
L_EnviarTramaRS48511:
;rs485.c,78 :: 		MS2RS485 = 0;                                                            //Establece el Max485 en modo lectura
0x0832	0x9A8A      	BCF         MS2RS485, BitPos(MS2RS485+0) 
;rs485.c,79 :: 		}
L_EnviarTramaRS4856:
;rs485.c,81 :: 		}
L_end_EnviarTramaRS485:
0x0834	0x0012      	RETURN      0
; end of _EnviarTramaRS485
_ResponderSPI:
;PruebaConfiguracion.c,197 :: 		void ResponderSPI(unsigned char *cabeceraRespuesta){
;PruebaConfiguracion.c,200 :: 		cabeceraRespuestaSPI[0] = cabeceraRespuesta[0];
0x0836	0xFFE9C39D  	MOVFF       FARG_ResponderSPI_cabeceraRespuesta, FSR0L
0x083A	0xFFEAC39E  	MOVFF       FARG_ResponderSPI_cabeceraRespuesta+1, FSR0H
0x083E	0xF03DCFEE  	MOVFF       POSTINC0, _cabeceraRespuestaSPI
;PruebaConfiguracion.c,201 :: 		cabeceraRespuestaSPI[1] = cabeceraRespuesta[1];
0x0842	0x0E01      	MOVLW       1
0x0844	0x0103      	MOVLB       3
0x0846	0x259D      	ADDWF       FARG_ResponderSPI_cabeceraRespuesta, 0, 1
0x0848	0x6EE9      	MOVWF       FSR0L 
0x084A	0x0E00      	MOVLW       0
0x084C	0x219E      	ADDWFC      FARG_ResponderSPI_cabeceraRespuesta+1, 0, 1
0x084E	0x6EEA      	MOVWF       FSR0H 
0x0850	0xF03ECFEE  	MOVFF       POSTINC0, _cabeceraRespuestaSPI+1
;PruebaConfiguracion.c,202 :: 		cabeceraRespuestaSPI[2] = cabeceraRespuesta[2];
0x0854	0x0E02      	MOVLW       2
0x0856	0x259D      	ADDWF       FARG_ResponderSPI_cabeceraRespuesta, 0, 1
0x0858	0x6EE9      	MOVWF       FSR0L 
0x085A	0x0E00      	MOVLW       0
0x085C	0x219E      	ADDWFC      FARG_ResponderSPI_cabeceraRespuesta+1, 0, 1
0x085E	0x6EEA      	MOVWF       FSR0H 
0x0860	0xF03FCFEE  	MOVFF       POSTINC0, _cabeceraRespuestaSPI+2
;PruebaConfiguracion.c,203 :: 		cabeceraRespuestaSPI[3] = cabeceraRespuesta[3];
0x0864	0x0E03      	MOVLW       3
0x0866	0x259D      	ADDWF       FARG_ResponderSPI_cabeceraRespuesta, 0, 1
0x0868	0x6EE9      	MOVWF       FSR0L 
0x086A	0x0E00      	MOVLW       0
0x086C	0x219E      	ADDWFC      FARG_ResponderSPI_cabeceraRespuesta+1, 0, 1
0x086E	0x6EEA      	MOVWF       FSR0H 
0x0870	0xF040CFEE  	MOVFF       POSTINC0, _cabeceraRespuestaSPI+3
;PruebaConfiguracion.c,204 :: 		cabeceraRespuestaSPI[4] = cabeceraRespuesta[4];
0x0874	0x0E04      	MOVLW       4
0x0876	0x259D      	ADDWF       FARG_ResponderSPI_cabeceraRespuesta, 0, 1
0x0878	0x6EE9      	MOVWF       FSR0L 
0x087A	0x0E00      	MOVLW       0
0x087C	0x219E      	ADDWFC      FARG_ResponderSPI_cabeceraRespuesta+1, 0, 1
0x087E	0x6EEA      	MOVWF       FSR0H 
0x0880	0xF041CFEE  	MOVFF       POSTINC0, _cabeceraRespuestaSPI+4
;PruebaConfiguracion.c,207 :: 		RP0 = 1;
0x0884	0x808B      	BSF         LATC0_bit, BitPos(LATC0_bit+0) 
;PruebaConfiguracion.c,208 :: 		Delay_us(100);
0x0886	0x0E85      	MOVLW       133
0x0888	0x6E0D      	MOVWF       R13, 0
L_ResponderSPI21:
0x088A	0x2E0D      	DECFSZ      R13, 1, 0
0x088C	0xD7FE      	BRA         L_ResponderSPI21
;PruebaConfiguracion.c,209 :: 		RP0 = 0;
0x088E	0x908B      	BCF         LATC0_bit, BitPos(LATC0_bit+0) 
;PruebaConfiguracion.c,211 :: 		}
L_end_ResponderSPI:
0x0890	0x0012      	RETURN      0
; end of _ResponderSPI
_main:
0x0892	0x0EA0      	MOVLW       160
0x0894	0x6E18      	MOVWF       _tramaPruebaSPI 
0x0896	0x0EA1      	MOVLW       161
0x0898	0x6E19      	MOVWF       25 
0x089A	0x0EA2      	MOVLW       162
0x089C	0x6E1A      	MOVWF       26 
0x089E	0x0EA3      	MOVLW       163
0x08A0	0x6E1B      	MOVWF       27 
0x08A2	0x0EA4      	MOVLW       164
0x08A4	0x6E1C      	MOVWF       28 
0x08A6	0x0EA5      	MOVLW       165
0x08A8	0x6E1D      	MOVWF       29 
0x08AA	0x0EA6      	MOVLW       166
0x08AC	0x6E1E      	MOVWF       30 
0x08AE	0x0EA7      	MOVLW       167
0x08B0	0x6E1F      	MOVWF       31 
0x08B2	0x0EA8      	MOVLW       168
0x08B4	0x6E20      	MOVWF       32 
0x08B6	0x0EA9      	MOVLW       169
0x08B8	0x6E21      	MOVWF       33 
;PruebaConfiguracion.c,63 :: 		void main() {
;PruebaConfiguracion.c,66 :: 		ConfiguracionPrincipal();
0x08BA	0xDE9A      	RCALL       _ConfiguracionPrincipal
;PruebaConfiguracion.c,70 :: 		i = 0;
0x08BC	0x6A33      	CLRF        _i 
0x08BE	0x6A34      	CLRF        _i+1 
;PruebaConfiguracion.c,71 :: 		j = 0;
0x08C0	0x6A35      	CLRF        _j 
0x08C2	0x6A36      	CLRF        _j+1 
;PruebaConfiguracion.c,72 :: 		x = 0;
0x08C4	0x6A31      	CLRF        _x 
0x08C6	0x6A32      	CLRF        _x+1 
;PruebaConfiguracion.c,73 :: 		y = 0;
0x08C8	0x6A2E      	CLRF        _y 
0x08CA	0x6A2F      	CLRF        _y+1 
;PruebaConfiguracion.c,75 :: 		banSPI0 = 0;
0x08CC	0x6A30      	CLRF        _banSPI0 
;PruebaConfiguracion.c,76 :: 		banSPI1 = 0;
0x08CE	0x6A3A      	CLRF        _banSPI1 
;PruebaConfiguracion.c,77 :: 		banSPI2 = 0;
0x08D0	0x6A3B      	CLRF        _banSPI2 
;PruebaConfiguracion.c,78 :: 		banSPI3 = 0;
0x08D2	0x6A39      	CLRF        _banSPI3 
;PruebaConfiguracion.c,79 :: 		bufferSPI = 0;
0x08D4	0x6A37      	CLRF        _bufferSPI 
;PruebaConfiguracion.c,80 :: 		idSolicitud = 0;
0x08D6	0x6A38      	CLRF        _idSolicitud 
;PruebaConfiguracion.c,81 :: 		funcionSolicitud = 0;
0x08D8	0x6A25      	CLRF        _funcionSolicitud 
;PruebaConfiguracion.c,82 :: 		subFuncionSolicitud = 0;
0x08DA	0x6A26      	CLRF        _subFuncionSolicitud 
;PruebaConfiguracion.c,84 :: 		banRSI = 0;
0x08DC	0x6A24      	CLRF        _banRSI 
;PruebaConfiguracion.c,85 :: 		banRSI2 = 0;
0x08DE	0x6A22      	CLRF        _banRSI2 
;PruebaConfiguracion.c,86 :: 		banRSC = 0;
0x08E0	0x6A23      	CLRF        _banRSC 
;PruebaConfiguracion.c,87 :: 		banRSC2 = 0;
0x08E2	0x6A2C      	CLRF        _banRSC2 
;PruebaConfiguracion.c,88 :: 		byteRS485 = 0;
0x08E4	0x6A2D      	CLRF        _byteRS485 
;PruebaConfiguracion.c,89 :: 		byteRS4852 = 0;
0x08E6	0x6A2B      	CLRF        _byteRS4852 
;PruebaConfiguracion.c,90 :: 		i_rs485 = 0;
0x08E8	0x6A27      	CLRF        _i_rs485 
0x08EA	0x6A28      	CLRF        _i_rs485+1 
;PruebaConfiguracion.c,91 :: 		i_rs4852 = 0;
0x08EC	0x6A29      	CLRF        _i_rs4852 
0x08EE	0x6A2A      	CLRF        _i_rs4852+1 
;PruebaConfiguracion.c,92 :: 		funcionRS485 = 0;
0x08F0	0x6A3C      	CLRF        _funcionRS485 
;PruebaConfiguracion.c,93 :: 		subFuncionRS485 = 0;
0x08F2	0x6B60      	CLRF        _subFuncionRS485, 1
;PruebaConfiguracion.c,94 :: 		numDatosRS485 = 0;
0x08F4	0x0103      	MOVLB       3
0x08F6	0x6B8B      	CLRF        _numDatosRS485, 1
0x08F8	0x6B8C      	CLRF        _numDatosRS485+1, 1
;PruebaConfiguracion.c,95 :: 		ptrNumDatosRS485 = (unsigned char *) & numDatosRS485;
0x08FA	0x0E8B      	MOVLW       _numDatosRS485
0x08FC	0x6F89      	MOVWF       _ptrNumDatosRS485, 1
0x08FE	0x0E03      	MOVLW       hi_addr(_numDatosRS485)
0x0900	0x6F8A      	MOVWF       _ptrNumDatosRS485+1, 1
;PruebaConfiguracion.c,96 :: 		MS1RS485 = 0;
0x0902	0x968A      	BCF         LATB3_bit, BitPos(LATB3_bit+0) 
;PruebaConfiguracion.c,97 :: 		MS2RS485 = 0;
0x0904	0x9A8A      	BCF         LATB5_bit, BitPos(LATB5_bit+0) 
;PruebaConfiguracion.c,98 :: 		sumValidacion = 0;
0x0906	0x6A5F      	CLRF        _sumValidacion 
;PruebaConfiguracion.c,100 :: 		RP0 = 0;
0x0908	0x908B      	BCF         LATC0_bit, BitPos(LATC0_bit+0) 
;PruebaConfiguracion.c,101 :: 		LED1 = 0;
0x090A	0x9481      	BCF         RB2_bit, BitPos(RB2_bit+0) 
;PruebaConfiguracion.c,102 :: 		LED2 = 0;
0x090C	0x9881      	BCF         RB4_bit, BitPos(RB4_bit+0) 
;PruebaConfiguracion.c,103 :: 		MS1RS485 = 0;
0x090E	0x968A      	BCF         LATB3_bit, BitPos(LATB3_bit+0) 
;PruebaConfiguracion.c,104 :: 		MS2RS485 = 0;
0x0910	0x9A8A      	BCF         LATB5_bit, BitPos(LATB5_bit+0) 
;PruebaConfiguracion.c,106 :: 		}
L_end_main:
0x0912	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008    [1156]    _interrupt
0x048C      [90]    _UART1_Init
0x04E6      [90]    _UART2_Init
0x0540      [10]    _UART1_Tx_Idle
0x054A      [94]    _SPI1_Init_Advanced
0x05A8      [14]    _UART1_Write
0x05B6      [10]    _UART2_Tx_Idle
0x05C0      [12]    _UART2_Write
0x05CC      [18]    _UART2_Read
0x05DE      [18]    _UART1_Read
0x05F0     [122]    _ConfiguracionPrincipal
0x066A      [16]    ___CC2DW
0x067A      [82]    _CambiarEstadoBandera
0x06CC     [362]    _EnviarTramaRS485
0x0836      [92]    _ResponderSPI
0x0892     [130]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    R0
0x0000       [1]    UART2_Init_tmp_L0
0x0000       [1]    SPI2_Write_tmp_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0001       [1]    UART2_Read___tmp_UART2_Read_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0018      [10]    _tramaPruebaSPI
0x0022       [1]    _banRSI2
0x0023       [1]    _banRSC
0x0024       [1]    _banRSI
0x0025       [1]    _funcionSolicitud
0x0026       [1]    _subFuncionSolicitud
0x0027       [2]    _i_rs485
0x0029       [2]    _i_rs4852
0x002B       [1]    _byteRS4852
0x002C       [1]    _banRSC2
0x002D       [1]    _byteRS485
0x002E       [2]    _y
0x0030       [1]    _banSPI0
0x0031       [2]    _x
0x0033       [2]    _i
0x0035       [2]    _j
0x0037       [1]    _bufferSPI
0x0038       [1]    _idSolicitud
0x0039       [1]    _banSPI3
0x003A       [1]    _banSPI1
0x003B       [1]    _banSPI2
0x003C       [1]    _funcionRS485
0x003D      [10]    _cabeceraRespuestaSPI
0x0047      [20]    _tramaSolicitudSPI
0x005B       [4]    _UART_Tx_Idle_Ptr
0x005F       [1]    _sumValidacion
0x0060       [1]    _subFuncionRS485
0x0061       [4]    _UART_Rd_Ptr
0x0065       [4]    _UART_Rdy_Ptr
0x0069      [10]    _tramaCabeceraRS485
0x0073     [770]    _pyloadRS485
0x0375      [10]    _cabeceraSolicitud
0x037F      [10]    _payloadSolicitud
0x0389       [2]    _ptrNumDatosRS485
0x038B       [2]    _numDatosRS485
0x038D       [4]    _SPI_Wr_Ptr
0x0391       [4]    _UART_Wr_Ptr
0x0395       [4]    _SPI_Rd_Ptr
0x0399       [1]    FARG_SPI1_Init_Advanced_master
0x039A       [1]    FARG_SPI1_Init_Advanced_data_sample
0x039B       [1]    FARG_SPI1_Init_Advanced_clock_idle
0x039C       [1]    FARG_SPI1_Init_Advanced_transmit_edge
0x039D       [1]    FARG_CambiarEstadoBandera_bandera
0x039D       [2]    FARG_ResponderSPI_cabeceraRespuesta
0x039D       [1]    FARG_EnviarTramaRS485_puertoUART
0x039E       [1]    FARG_CambiarEstadoBandera_estado
0x039E       [2]    FARG_EnviarTramaRS485_cabecera
0x03A0       [2]    FARG_EnviarTramaRS485_payload
0x03A2       [1]    EnviarTramaRS485_direccion_L0
0x03A3       [1]    EnviarTramaRS485_funcion_L0
0x03A4       [1]    EnviarTramaRS485_subfuncion_L0
0x03A5       [1]    EnviarTramaRS485_lsbNumDatos_L0
0x03A6       [1]    EnviarTramaRS485_msbNumDatos_L0
0x03A7       [2]    EnviarTramaRS485_iDatos_L0
0x03A9       [2]    EnviarTramaRS485_numDatos_L0
0x03AB       [2]    EnviarTramaRS485_ptrnumDatos_L0
0x03AD       [1]    FARG_UART2_Write_data_
0x03AD       [1]    FARG_UART1_Write_data_
0x0F38       [1]    ANSELA
0x0F39       [1]    ANSELB
0x0F3A       [1]    ANSELC
0x0F70       [1]    BAUDCON2
0x0F71       [1]    RCSTA2
0x0F72       [1]    TXSTA2
0x0F73       [1]    TXREG2
0x0F74       [1]    RCREG2
0x0F75       [1]    SPBRG2
0x0F76       [1]    SPBRGH2
0x0F81       [0]    RB2_bit
0x0F81       [0]    LED2
0x0F81       [0]    LED1
0x0F81       [0]    RB4_bit
0x0F8A       [0]    LATB3_bit
0x0F8A       [0]    MS1RS485
0x0F8A       [0]    LATB5_bit
0x0F8A       [0]    MS2RS485
0x0F8B       [0]    LATC0_bit
0x0F8B       [0]    RP0
0x0F92       [0]    TRISA5_bit
0x0F93       [0]    TRISB6_bit
0x0F93       [0]    TRISB7_bit
0x0F93       [0]    TRISB5_bit
0x0F93       [0]    TRISB2_bit
0x0F93       [0]    TRISB3_bit
0x0F93       [0]    TRISB4_bit
0x0F93       [0]    LED2_Direction
0x0F93       [0]    LED1_Direction
0x0F93       [0]    MS2RS485_Direction
0x0F93       [0]    MS1RS485_Direction
0x0F94       [0]    TRISC0_bit
0x0F94       [0]    RP0_Direction
0x0F94       [0]    TRISC4_bit
0x0F94       [0]    TRISC7_bit
0x0F94       [0]    TRISC5_bit
0x0F94       [0]    TRISC6_bit
0x0F94       [0]    TRISC3_bit
0x0F9D       [1]    PIE1
0x0F9E       [0]    SSP1IF_bit
0x0F9E       [1]    PIR1
0x0F9E       [0]    RC1IF_bit
0x0FA3       [1]    PIE3
0x0FA4       [1]    PIR3
0x0FA4       [0]    RC2IF_bit
0x0FAB       [1]    RCSTA
0x0FAC       [1]    TXSTA
0x0FAD       [1]    TXREG
0x0FAE       [1]    RCREG
0x0FAF       [1]    SPBRG
0x0FB0       [1]    SPBRGH
0x0FB8       [1]    BAUDCON
0x0FC6       [1]    SSP1CON1
0x0FC7       [1]    SSP1STAT
0x0FC9       [1]    SSP1BUF
0x0FD3       [1]    OSCCON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
