;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 23/8/2021 16:34:22
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EFB8  	GOTO        368
_interrupt:
;PruebaConfiguracion.c,142 :: 		void interrupt(void){
0x0008	0xF015C000  	MOVFF       R0, 21
;PruebaConfiguracion.c,158 :: 		if (SSP1IF_bit==1){
0x000C	0xA69E      	BTFSS       SSP1IF_bit, BitPos(SSP1IF_bit+0) 
0x000E	0xD03D      	BRA         L_interrupt7
;PruebaConfiguracion.c,160 :: 		SSP1IF_bit = 0;                                                          //Limpia la bandera de interrupcion por SPI
0x0010	0x969E      	BCF         SSP1IF_bit, BitPos(SSP1IF_bit+0) 
;PruebaConfiguracion.c,161 :: 		bufferSPI = SSP1BUF;                                                     //Guarda el contenido del bufeer (lectura)
0x0012	0xF034CFC9  	MOVFF       SSP1BUF, _bufferSPI
;PruebaConfiguracion.c,164 :: 		if ((banSPI1==0)&&(bufferSPI==0xA1)){
0x0016	0x501A      	MOVF        _banSPI1, 0 
0x0018	0x0A00      	XORLW       0
0x001A	0xE10A      	BNZ         L_interrupt10
0x001C	0x5034      	MOVF        _bufferSPI, 0 
0x001E	0x0AA1      	XORLW       161
0x0020	0xE107      	BNZ         L_interrupt10
L__interrupt20:
;PruebaConfiguracion.c,165 :: 		CambiarEstadoBandera(1,1);
0x0022	0x0E01      	MOVLW       1
0x0024	0x6E3B      	MOVWF       FARG_CambiarEstadoBandera_bandera 
0x0026	0x0E01      	MOVLW       1
0x0028	0x6E3C      	MOVWF       FARG_CambiarEstadoBandera_estado 
0x002A	0xD860      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,166 :: 		i = 0;
0x002C	0x6A1B      	CLRF        _i 
0x002E	0x6A1C      	CLRF        _i+1 
;PruebaConfiguracion.c,167 :: 		}
L_interrupt10:
;PruebaConfiguracion.c,168 :: 		if ((banSPI1==1)&&(bufferSPI!=0xA1)&&(bufferSPI!=0xF1)){
0x0030	0x501A      	MOVF        _banSPI1, 0 
0x0032	0x0A01      	XORLW       1
0x0034	0xE110      	BNZ         L_interrupt13
0x0036	0x5034      	MOVF        _bufferSPI, 0 
0x0038	0x0AA1      	XORLW       161
0x003A	0xE00D      	BZ          L_interrupt13
0x003C	0x5034      	MOVF        _bufferSPI, 0 
0x003E	0x0AF1      	XORLW       241
0x0040	0xE00A      	BZ          L_interrupt13
L__interrupt19:
;PruebaConfiguracion.c,169 :: 		tramaSolicitudSPI[i] = bufferSPI;                                     //Recupera la direccion del nodo y el indicador de sobrescritura de la SD
0x0042	0x0E2A      	MOVLW       _tramaSolicitudSPI
0x0044	0x241B      	ADDWF       _i, 0 
0x0046	0x6EE1      	MOVWF       FSR1L 
0x0048	0x0E00      	MOVLW       hi_addr(_tramaSolicitudSPI)
0x004A	0x201C      	ADDWFC      _i+1, 0 
0x004C	0x6EE2      	MOVWF       FSR1H 
0x004E	0xFFE6C034  	MOVFF       _bufferSPI, POSTINC1
;PruebaConfiguracion.c,170 :: 		i++;
0x0052	0x4A1B      	INFSNZ      _i, 1 
0x0054	0x2A1C      	INCF        _i+1, 1 
;PruebaConfiguracion.c,171 :: 		}
L_interrupt13:
;PruebaConfiguracion.c,172 :: 		if ((banSPI1==1)&&(bufferSPI==0xF1)){
0x0056	0x501A      	MOVF        _banSPI1, 0 
0x0058	0x0A01      	XORLW       1
0x005A	0xE117      	BNZ         L_interrupt16
0x005C	0x5034      	MOVF        _bufferSPI, 0 
0x005E	0x0AF1      	XORLW       241
0x0060	0xE114      	BNZ         L_interrupt16
L__interrupt18:
;PruebaConfiguracion.c,173 :: 		direccionRS485 = tramaSolicitudSPI[0];
0x0062	0xF019C02A  	MOVFF       _tramaSolicitudSPI, _direccionRS485
;PruebaConfiguracion.c,174 :: 		funcionRS485 = tramaSolicitudSPI[1];
0x0066	0xF021C02B  	MOVFF       _tramaSolicitudSPI+1, _funcionRS485
;PruebaConfiguracion.c,175 :: 		subFuncionRS485 = tramaSolicitudSPI[2];
0x006A	0xF035C02C  	MOVFF       _tramaSolicitudSPI+2, _subFuncionRS485
;PruebaConfiguracion.c,176 :: 		numDatosRS485 = tramaSolicitudSPI[3];
0x006E	0xF036C02D  	MOVFF       _tramaSolicitudSPI+3, _numDatosRS485
;PruebaConfiguracion.c,180 :: 		if (numDatosRS485==2){
0x0072	0x502D      	MOVF        _tramaSolicitudSPI+3, 0 
0x0074	0x0A02      	XORLW       2
0x0076	0xE105      	BNZ         L_interrupt17
;PruebaConfiguracion.c,181 :: 		direccionRS485 = 0;
0x0078	0x6A19      	CLRF        _direccionRS485 
;PruebaConfiguracion.c,182 :: 		funcionRS485 = 0;
0x007A	0x6A21      	CLRF        _funcionRS485 
;PruebaConfiguracion.c,183 :: 		subFuncionRS485 = 0;
0x007C	0x6A35      	CLRF        _subFuncionRS485 
;PruebaConfiguracion.c,184 :: 		numDatosRS485 = 0;
0x007E	0x6A36      	CLRF        _numDatosRS485 
;PruebaConfiguracion.c,185 :: 		TEST = ~TEST;
0x0080	0x7481      	BTG         RB2_bit, BitPos(RB2_bit+0) 
;PruebaConfiguracion.c,186 :: 		}
L_interrupt17:
;PruebaConfiguracion.c,188 :: 		CambiarEstadoBandera(1,0);                                            //Limpia la bandera
0x0082	0x0E01      	MOVLW       1
0x0084	0x6E3B      	MOVWF       FARG_CambiarEstadoBandera_bandera 
0x0086	0x6A3C      	CLRF        FARG_CambiarEstadoBandera_estado 
0x0088	0xD831      	RCALL       _CambiarEstadoBandera
;PruebaConfiguracion.c,189 :: 		}
L_interrupt16:
;PruebaConfiguracion.c,194 :: 		}
L_interrupt7:
;PruebaConfiguracion.c,196 :: 		}
L_end_interrupt:
L__interrupt25:
0x008A	0xF000C015  	MOVFF       21, R0
0x008E	0x0011      	RETFIE      1
; end of _interrupt
_SPI1_Init_Advanced:
;__Lib_SPI_c345b123.c,43 :: 		
;__Lib_SPI_c345b123.c,44 :: 		
0x0090	0x9AC6      	BCF         SSP1CON1, 5 
;__Lib_SPI_c345b123.c,45 :: 		
0x0092	0x0EFF      	MOVLW       _SPI1_Read
0x0094	0x6E22      	MOVWF       _SPI_Rd_Ptr 
0x0096	0x0EFF      	MOVLW       hi_addr(_SPI1_Read)
0x0098	0x6E23      	MOVWF       _SPI_Rd_Ptr+1 
0x009A	0x0EFF      	MOVLW       FARG_SPI1_Read_buffer
0x009C	0x6E24      	MOVWF       _SPI_Rd_Ptr+2 
0x009E	0x0EFF      	MOVLW       hi_addr(FARG_SPI1_Read_buffer)
0x00A0	0x6E25      	MOVWF       _SPI_Rd_Ptr+3 
;__Lib_SPI_c345b123.c,46 :: 		
0x00A2	0x0EFF      	MOVLW       _SPI1_Write
0x00A4	0x6E26      	MOVWF       _SPI_Wr_Ptr 
0x00A6	0x0EFF      	MOVLW       hi_addr(_SPI1_Write)
0x00A8	0x6E27      	MOVWF       _SPI_Wr_Ptr+1 
0x00AA	0x0EFF      	MOVLW       FARG_SPI1_Write_data_
0x00AC	0x6E28      	MOVWF       _SPI_Wr_Ptr+2 
0x00AE	0x0EFF      	MOVLW       hi_addr(FARG_SPI1_Write_data_)
0x00B0	0x6E29      	MOVWF       _SPI_Wr_Ptr+3 
;__Lib_SPI_c345b123.c,48 :: 		
0x00B2	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;__Lib_SPI_c345b123.c,49 :: 		
0x00B4	0x5037      	MOVF        FARG_SPI1_Init_Advanced_master, 0 
0x00B6	0x0A04      	XORLW       4
0x00B8	0xE102      	BNZ         L_SPI1_Init_Advanced0
0x00BA	0x8694      	BSF         TRISC3_bit, BitPos(TRISC3_bit+0) 
0x00BC	0xD001      	BRA         L_SPI1_Init_Advanced1
L_SPI1_Init_Advanced0:
;__Lib_SPI_c345b123.c,50 :: 		
0x00BE	0x9694      	BCF         TRISC3_bit, BitPos(TRISC3_bit+0) 
L_SPI1_Init_Advanced1:
;__Lib_SPI_c345b123.c,51 :: 		
0x00C0	0x8894      	BSF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;__Lib_SPI_c345b123.c,53 :: 		
0x00C2	0x6AC6      	CLRF        SSP1CON1 
;__Lib_SPI_c345b123.c,54 :: 		
0x00C4	0x9CC7      	BCF         SSP1STAT, 6 
;__Lib_SPI_c345b123.c,55 :: 		
0x00C6	0x9EC7      	BCF         SSP1STAT, 7 
;__Lib_SPI_c345b123.c,56 :: 		
0x00C8	0x5037      	MOVF        FARG_SPI1_Init_Advanced_master, 0 
0x00CA	0x12C6      	IORWF       SSP1CON1, 1 
;__Lib_SPI_c345b123.c,57 :: 		
0x00CC	0x5039      	MOVF        FARG_SPI1_Init_Advanced_clock_idle, 0 
0x00CE	0x12C6      	IORWF       SSP1CON1, 1 
;__Lib_SPI_c345b123.c,58 :: 		
0x00D0	0x5038      	MOVF        FARG_SPI1_Init_Advanced_data_sample, 0 
0x00D2	0x12C7      	IORWF       SSP1STAT, 1 
;__Lib_SPI_c345b123.c,60 :: 		
0x00D4	0x5239      	MOVF        FARG_SPI1_Init_Advanced_clock_idle, 1 
0x00D6	0xE005      	BZ          L_SPI1_Init_Advanced2
;__Lib_SPI_c345b123.c,61 :: 		
0x00D8	0x503A      	MOVF        FARG_SPI1_Init_Advanced_transmit_edge, 0 
0x00DA	0x0A00      	XORLW       0
0x00DC	0xB4D8      	BTFSC       STATUS, 2 
;__Lib_SPI_c345b123.c,62 :: 		
0x00DE	0x8CC7      	BSF         SSP1STAT, 6 
L_SPI1_Init_Advanced3:
;__Lib_SPI_c345b123.c,63 :: 		
0x00E0	0xD003      	BRA         L_SPI1_Init_Advanced4
L_SPI1_Init_Advanced2:
;__Lib_SPI_c345b123.c,65 :: 		
0x00E2	0x523A      	MOVF        FARG_SPI1_Init_Advanced_transmit_edge, 1 
0x00E4	0xA4D8      	BTFSS       STATUS, 2 
;__Lib_SPI_c345b123.c,66 :: 		
0x00E6	0x8CC7      	BSF         SSP1STAT, 6 
L_SPI1_Init_Advanced5:
;__Lib_SPI_c345b123.c,67 :: 		
L_SPI1_Init_Advanced4:
;__Lib_SPI_c345b123.c,68 :: 		
0x00E8	0x8AC6      	BSF         SSP1CON1, 5 
;__Lib_SPI_c345b123.c,69 :: 		
L_end_SPI1_Init_Advanced:
0x00EA	0x0012      	RETURN      0
; end of _SPI1_Init_Advanced
_CambiarEstadoBandera:
;PruebaConfiguracion.c,115 :: 		void CambiarEstadoBandera(unsigned short bandera, unsigned short estado){
;PruebaConfiguracion.c,117 :: 		if (estado==1){
0x00EC	0x503C      	MOVF        FARG_CambiarEstadoBandera_estado, 0 
0x00EE	0x0A01      	XORLW       1
0x00F0	0xE111      	BNZ         L_CambiarEstadoBandera1
;PruebaConfiguracion.c,119 :: 		banSPI0 = 3;
0x00F2	0x0E03      	MOVLW       3
0x00F4	0x6E16      	MOVWF       _banSPI0 
;PruebaConfiguracion.c,120 :: 		banSPI1 = 3;
0x00F6	0x0E03      	MOVLW       3
0x00F8	0x6E1A      	MOVWF       _banSPI1 
;PruebaConfiguracion.c,122 :: 		switch (bandera){
0x00FA	0xD006      	BRA         L_CambiarEstadoBandera2
;PruebaConfiguracion.c,123 :: 		case 0:
L_CambiarEstadoBandera4:
;PruebaConfiguracion.c,124 :: 		banSPI0 = 1;
0x00FC	0x0E01      	MOVLW       1
0x00FE	0x6E16      	MOVWF       _banSPI0 
;PruebaConfiguracion.c,125 :: 		break;
0x0100	0xD009      	BRA         L_CambiarEstadoBandera3
;PruebaConfiguracion.c,126 :: 		case 1:
L_CambiarEstadoBandera5:
;PruebaConfiguracion.c,127 :: 		banSPI1 = 1;
0x0102	0x0E01      	MOVLW       1
0x0104	0x6E1A      	MOVWF       _banSPI1 
;PruebaConfiguracion.c,128 :: 		break;
0x0106	0xD006      	BRA         L_CambiarEstadoBandera3
;PruebaConfiguracion.c,129 :: 		}
L_CambiarEstadoBandera2:
0x0108	0x503B      	MOVF        FARG_CambiarEstadoBandera_bandera, 0 
0x010A	0x0A00      	XORLW       0
0x010C	0xE0F7      	BZ          L_CambiarEstadoBandera4
0x010E	0x503B      	MOVF        FARG_CambiarEstadoBandera_bandera, 0 
0x0110	0x0A01      	XORLW       1
0x0112	0xE0F7      	BZ          L_CambiarEstadoBandera5
L_CambiarEstadoBandera3:
;PruebaConfiguracion.c,130 :: 		}
L_CambiarEstadoBandera1:
;PruebaConfiguracion.c,132 :: 		if (estado==0){
0x0114	0x503C      	MOVF        FARG_CambiarEstadoBandera_estado, 0 
0x0116	0x0A00      	XORLW       0
0x0118	0xE102      	BNZ         L_CambiarEstadoBandera6
;PruebaConfiguracion.c,133 :: 		banSPI0 = 0;
0x011A	0x6A16      	CLRF        _banSPI0 
;PruebaConfiguracion.c,134 :: 		banSPI1 = 0;
0x011C	0x6A1A      	CLRF        _banSPI1 
;PruebaConfiguracion.c,135 :: 		}
L_CambiarEstadoBandera6:
;PruebaConfiguracion.c,136 :: 		}
L_end_CambiarEstadoBandera:
0x011E	0x0012      	RETURN      0
; end of _CambiarEstadoBandera
_ConfiguracionPrincipal:
;PruebaConfiguracion.c,74 :: 		void ConfiguracionPrincipal(){
;PruebaConfiguracion.c,77 :: 		OSCCON.IDLEN=1;                                    //Entra en modo IDLE durante la instruccion SLEEP
0x0120	0x8ED3      	BSF         OSCCON, 7 
;PruebaConfiguracion.c,78 :: 		OSCCON.IRCF2=1;                                    //HFINTOSC=16MHz  IRFC=111
0x0122	0x8CD3      	BSF         OSCCON, 6 
;PruebaConfiguracion.c,79 :: 		OSCCON.IRCF1=1;
0x0124	0x8AD3      	BSF         OSCCON, 5 
;PruebaConfiguracion.c,80 :: 		OSCCON.IRCF0=1;
0x0126	0x88D3      	BSF         OSCCON, 4 
;PruebaConfiguracion.c,81 :: 		OSCCON.SCS1=1;                                     //System Clock Select bit:  1x=Internal oscillator block
0x0128	0x82D3      	BSF         OSCCON, 1 
;PruebaConfiguracion.c,82 :: 		OSCCON.SCS0=1;
0x012A	0x80D3      	BSF         OSCCON, 0 
;PruebaConfiguracion.c,85 :: 		ANSELA = 0;                                        //Configura PORTA como digital
0x012C	0x010F      	MOVLB       15
0x012E	0x6B38      	CLRF        ANSELA, 1
;PruebaConfiguracion.c,86 :: 		ANSELB = 0;                                        //Configura PORTB como digital
0x0130	0x6B39      	CLRF        ANSELB, 1
;PruebaConfiguracion.c,87 :: 		ANSELC = 0;                                        //Configura PORTC como digital
0x0132	0x6B3A      	CLRF        ANSELC, 1
;PruebaConfiguracion.c,89 :: 		TEST_Direction = 0;                                //Configura el pin TEST como salida
0x0134	0x9493      	BCF         TRISB2_bit, BitPos(TRISB2_bit+0) 
;PruebaConfiguracion.c,90 :: 		TRISA5_bit = 1;                                    //SS1 In
0x0136	0x8A92      	BSF         TRISA5_bit, BitPos(TRISA5_bit+0) 
;PruebaConfiguracion.c,91 :: 		TRISC3_bit = 1;                                    //SCK1 In
0x0138	0x8694      	BSF         TRISC3_bit, BitPos(TRISC3_bit+0) 
;PruebaConfiguracion.c,92 :: 		TRISC4_bit = 1;                                    //SDI1 In
0x013A	0x8894      	BSF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;PruebaConfiguracion.c,93 :: 		TRISC5_bit = 0;                                    //SDO1 Out
0x013C	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;PruebaConfiguracion.c,95 :: 		INTCON.GIE = 1;                                    //Habilita las interrupciones globales
0x013E	0x8EF2      	BSF         INTCON, 7 
;PruebaConfiguracion.c,96 :: 		INTCON.PEIE = 1;                                   //Habilita las interrupciones perifericas
0x0140	0x8CF2      	BSF         INTCON, 6 
;PruebaConfiguracion.c,99 :: 		SSP1IE_bit = 1;
0x0142	0x869D      	BSF         SSP1IE_bit, BitPos(SSP1IE_bit+0) 
;PruebaConfiguracion.c,100 :: 		SPI1_Init_Advanced(_SPI_SLAVE_SS_ENABLE, _SPI_DATA_SAMPLE_END, _SPI_CLK_IDLE_HIGH, _SPI_HIGH_2_LOW);
0x0144	0x0E04      	MOVLW       4
0x0146	0x6E37      	MOVWF       FARG_SPI1_Init_Advanced_master 
0x0148	0x0E80      	MOVLW       128
0x014A	0x6E38      	MOVWF       FARG_SPI1_Init_Advanced_data_sample 
0x014C	0x0E10      	MOVLW       16
0x014E	0x6E39      	MOVWF       FARG_SPI1_Init_Advanced_clock_idle 
0x0150	0x6A3A      	CLRF        FARG_SPI1_Init_Advanced_transmit_edge 
0x0152	0xDF9E      	RCALL       _SPI1_Init_Advanced
;PruebaConfiguracion.c,101 :: 		SSP1IF_bit = 0;                                                            //Limpia la bandera de interrupcion por SPI *
0x0154	0x969E      	BCF         SSP1IF_bit, BitPos(SSP1IF_bit+0) 
;PruebaConfiguracion.c,111 :: 		Delay_ms(100);                                     //Espera hasta que se estabilicen los cambios
0x0156	0x0E03      	MOVLW       3
0x0158	0x6E0B      	MOVWF       R11, 0
0x015A	0x0E08      	MOVLW       8
0x015C	0x6E0C      	MOVWF       R12, 0
0x015E	0x0E77      	MOVLW       119
0x0160	0x6E0D      	MOVWF       R13, 0
L_ConfiguracionPrincipal0:
0x0162	0x2E0D      	DECFSZ      R13, 1, 0
0x0164	0xD7FE      	BRA         L_ConfiguracionPrincipal0
0x0166	0x2E0C      	DECFSZ      R12, 1, 0
0x0168	0xD7FC      	BRA         L_ConfiguracionPrincipal0
0x016A	0x2E0B      	DECFSZ      R11, 1, 0
0x016C	0xD7FA      	BRA         L_ConfiguracionPrincipal0
;PruebaConfiguracion.c,112 :: 		}
L_end_ConfiguracionPrincipal:
0x016E	0x0012      	RETURN      0
; end of _ConfiguracionPrincipal
_main:
;PruebaConfiguracion.c,37 :: 		void main() {
;PruebaConfiguracion.c,39 :: 		ConfiguracionPrincipal();
0x0170	0xDFD7      	RCALL       _ConfiguracionPrincipal
;PruebaConfiguracion.c,43 :: 		i = 0;
0x0172	0x6A1B      	CLRF        _i 
0x0174	0x6A1C      	CLRF        _i+1 
;PruebaConfiguracion.c,44 :: 		j = 0;
0x0176	0x6A1F      	CLRF        _j 
0x0178	0x6A20      	CLRF        _j+1 
;PruebaConfiguracion.c,45 :: 		x = 0;
0x017A	0x6A1D      	CLRF        _x 
0x017C	0x6A1E      	CLRF        _x+1 
;PruebaConfiguracion.c,46 :: 		y = 0;
0x017E	0x6A17      	CLRF        _y 
0x0180	0x6A18      	CLRF        _y+1 
;PruebaConfiguracion.c,48 :: 		banSPI0 = 0;
0x0182	0x6A16      	CLRF        _banSPI0 
;PruebaConfiguracion.c,49 :: 		banSPI1 = 0;
0x0184	0x6A1A      	CLRF        _banSPI1 
;PruebaConfiguracion.c,51 :: 		direccionRS485 = 0;
0x0186	0x6A19      	CLRF        _direccionRS485 
;PruebaConfiguracion.c,52 :: 		funcionRS485 = 0;
0x0188	0x6A21      	CLRF        _funcionRS485 
;PruebaConfiguracion.c,53 :: 		subFuncionRS485 = 0;
0x018A	0x6A35      	CLRF        _subFuncionRS485 
;PruebaConfiguracion.c,54 :: 		numDatosRS485 = 0;
0x018C	0x6A36      	CLRF        _numDatosRS485 
;PruebaConfiguracion.c,56 :: 		TEST = 1;
0x018E	0x8481      	BSF         RB2_bit, BitPos(RB2_bit+0) 
;PruebaConfiguracion.c,67 :: 		}
L_end_main:
0x0190	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [136]    _interrupt
0x0090      [92]    _SPI1_Init_Advanced
0x00EC      [52]    _CambiarEstadoBandera
0x0120      [80]    _ConfiguracionPrincipal
0x0170      [34]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    SPI2_Write_tmp_L0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0016       [1]    _banSPI0
0x0017       [2]    _y
0x0019       [1]    _direccionRS485
0x001A       [1]    _banSPI1
0x001B       [2]    _i
0x001D       [2]    _x
0x001F       [2]    _j
0x0021       [1]    _funcionRS485
0x0022       [4]    _SPI_Rd_Ptr
0x0026       [4]    _SPI_Wr_Ptr
0x002A      [10]    _tramaSolicitudSPI
0x0034       [1]    _bufferSPI
0x0035       [1]    _subFuncionRS485
0x0036       [1]    _numDatosRS485
0x0037       [1]    FARG_SPI1_Init_Advanced_master
0x0038       [1]    FARG_SPI1_Init_Advanced_data_sample
0x0039       [1]    FARG_SPI1_Init_Advanced_clock_idle
0x003A       [1]    FARG_SPI1_Init_Advanced_transmit_edge
0x003B       [1]    FARG_CambiarEstadoBandera_bandera
0x003C       [1]    FARG_CambiarEstadoBandera_estado
0x0F38       [1]    ANSELA
0x0F39       [1]    ANSELB
0x0F3A       [1]    ANSELC
0x0F81       [0]    RB2_bit
0x0F81       [0]    TEST
0x0F92       [0]    TRISA5_bit
0x0F93       [0]    TEST_Direction
0x0F93       [0]    TRISB2_bit
0x0F94       [0]    TRISC5_bit
0x0F94       [0]    TRISC4_bit
0x0F94       [0]    TRISC3_bit
0x0F9D       [0]    SSP1IE_bit
0x0F9E       [0]    SSP1IF_bit
0x0FC6       [1]    SSP1CON1
0x0FC7       [1]    SSP1STAT
0x0FC9       [1]    SSP1BUF
0x0FD3       [1]    OSCCON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
