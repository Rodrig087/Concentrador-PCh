;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 19/10/2021 12:11:22
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF002EF52  	GOTO        1188
_interrupt:
;PruebaNodo1.c,146 :: 		void interrupt(void){
0x0008	0xF019C000  	MOVFF       R0, 25
0x000C	0xF018C001  	MOVFF       R1, 24
0x0010	0xF017C00B  	MOVFF       R11, 23
0x0014	0xF016C00C  	MOVFF       R12, 22
0x0018	0xF015C00D  	MOVFF       R13, 21
;PruebaNodo1.c,150 :: 		if (RC1IF_bit==1){
0x001C	0xAA9E      	BTFSS       RC1IF_bit, BitPos(RC1IF_bit+0) 
0x001E	0xD0DD      	BRA         L_interrupt17
;PruebaNodo1.c,152 :: 		RC1IF_bit = 0;                                                           //Limpia la bandera de interrupcion
0x0020	0x9A9E      	BCF         RC1IF_bit, BitPos(RC1IF_bit+0) 
;PruebaNodo1.c,153 :: 		byteRS485 = UART1_Read();
0x0022	0xDA37      	RCALL       _UART1_Read
0x0024	0xF03AC000  	MOVFF       R0, _byteRS485
;PruebaNodo1.c,156 :: 		if (banRSI==2){
0x0028	0x503D      	MOVF        _banRSI, 0 
0x002A	0x0A02      	XORLW       2
0x002C	0xE114      	BNZ         L_interrupt18
;PruebaNodo1.c,158 :: 		if (i_rs485<(numDatosRS485)){
0x002E	0x5026      	MOVF        _numDatosRS485+1, 0 
0x0030	0x5C3C      	SUBWF       _i_rs485+1, 0 
0x0032	0xE102      	BNZ         L__interrupt52
0x0034	0x5025      	MOVF        _numDatosRS485, 0 
0x0036	0x5C3B      	SUBWF       _i_rs485, 0 
L__interrupt52:
0x0038	0xE20B      	BC          L_interrupt19
;PruebaNodo1.c,159 :: 		inputPyloadRS485[i_rs485] = byteRS485;
0x003A	0x0E12      	MOVLW       _inputPyloadRS485
0x003C	0x243B      	ADDWF       _i_rs485, 0 
0x003E	0x6EE1      	MOVWF       FSR1L 
0x0040	0x0E03      	MOVLW       hi_addr(_inputPyloadRS485)
0x0042	0x203C      	ADDWFC      _i_rs485+1, 0 
0x0044	0x6EE2      	MOVWF       FSR1H 
0x0046	0xFFE6C03A  	MOVFF       _byteRS485, POSTINC1
;PruebaNodo1.c,160 :: 		i_rs485++;
0x004A	0x4A3B      	INFSNZ      _i_rs485, 1 
0x004C	0x2A3C      	INCF        _i_rs485+1, 1 
;PruebaNodo1.c,161 :: 		} else {
0x004E	0xD003      	BRA         L_interrupt20
L_interrupt19:
;PruebaNodo1.c,162 :: 		banRSI = 0;                                                        //Limpia la bandera de inicio de trama
0x0050	0x6A3D      	CLRF        _banRSI 
;PruebaNodo1.c,163 :: 		banRSC = 1;                                                        //Activa la bandera de trama completa
0x0052	0x0E01      	MOVLW       1
0x0054	0x6E3E      	MOVWF       _banRSC 
;PruebaNodo1.c,164 :: 		}
L_interrupt20:
;PruebaNodo1.c,165 :: 		}
L_interrupt18:
;PruebaNodo1.c,168 :: 		if ((banRSI==0)&&(banRSC==0)){
0x0056	0x503D      	MOVF        _banRSI, 0 
0x0058	0x0A00      	XORLW       0
0x005A	0xE10A      	BNZ         L_interrupt23
0x005C	0x503E      	MOVF        _banRSC, 0 
0x005E	0x0A00      	XORLW       0
0x0060	0xE107      	BNZ         L_interrupt23
L__interrupt41:
;PruebaNodo1.c,169 :: 		if (byteRS485==0x3A){                                                 //Verifica si el primer byte recibido sea el byte de inicio de trama
0x0062	0x503A      	MOVF        _byteRS485, 0 
0x0064	0x0A3A      	XORLW       58
0x0066	0xE104      	BNZ         L_interrupt24
;PruebaNodo1.c,170 :: 		banRSI = 1;
0x0068	0x0E01      	MOVLW       1
0x006A	0x6E3D      	MOVWF       _banRSI 
;PruebaNodo1.c,171 :: 		i_rs485 = 0;
0x006C	0x6A3B      	CLRF        _i_rs485 
0x006E	0x6A3C      	CLRF        _i_rs485+1 
;PruebaNodo1.c,172 :: 		}
L_interrupt24:
;PruebaNodo1.c,173 :: 		}
L_interrupt23:
;PruebaNodo1.c,174 :: 		if ((banRSI==1)&&(byteRS485!=0x3A)&&(i_rs485<5)){
0x0070	0x503D      	MOVF        _banRSI, 0 
0x0072	0x0A01      	XORLW       1
0x0074	0xE113      	BNZ         L_interrupt27
0x0076	0x503A      	MOVF        _byteRS485, 0 
0x0078	0x0A3A      	XORLW       58
0x007A	0xE010      	BZ          L_interrupt27
0x007C	0x0E00      	MOVLW       0
0x007E	0x5C3C      	SUBWF       _i_rs485+1, 0 
0x0080	0xE102      	BNZ         L__interrupt53
0x0082	0x0E05      	MOVLW       5
0x0084	0x5C3B      	SUBWF       _i_rs485, 0 
L__interrupt53:
0x0086	0xE20A      	BC          L_interrupt27
L__interrupt40:
;PruebaNodo1.c,175 :: 		tramaCabeceraRS485[i_rs485] = byteRS485;                              //Recupera los datos de cabecera de la trama UART: [Direccion, Funcion, Subfuncion, NumeroDatos]
0x0088	0x0E3F      	MOVLW       _tramaCabeceraRS485
0x008A	0x243B      	ADDWF       _i_rs485, 0 
0x008C	0x6EE1      	MOVWF       FSR1L 
0x008E	0x0E00      	MOVLW       hi_addr(_tramaCabeceraRS485)
0x0090	0x203C      	ADDWFC      _i_rs485+1, 0 
0x0092	0x6EE2      	MOVWF       FSR1H 
0x0094	0xFFE6C03A  	MOVFF       _byteRS485, POSTINC1
;PruebaNodo1.c,176 :: 		i_rs485++;
0x0098	0x4A3B      	INFSNZ      _i_rs485, 1 
0x009A	0x2A3C      	INCF        _i_rs485+1, 1 
;PruebaNodo1.c,177 :: 		}
L_interrupt27:
;PruebaNodo1.c,178 :: 		if ((banRSI==1)&&(i_rs485==5)){
0x009C	0x503D      	MOVF        _banRSI, 0 
0x009E	0x0A01      	XORLW       1
0x00A0	0xE124      	BNZ         L_interrupt30
0x00A2	0x0E00      	MOVLW       0
0x00A4	0x183C      	XORWF       _i_rs485+1, 0 
0x00A6	0xE102      	BNZ         L__interrupt54
0x00A8	0x0E05      	MOVLW       5
0x00AA	0x183B      	XORWF       _i_rs485, 0 
L__interrupt54:
0x00AC	0xE11E      	BNZ         L_interrupt30
L__interrupt39:
;PruebaNodo1.c,180 :: 		if (tramaCabeceraRS485[0]==IDNODO){
0x00AE	0x503F      	MOVF        _tramaCabeceraRS485, 0 
0x00B0	0x0A05      	XORLW       5
0x00B2	0xE117      	BNZ         L_interrupt31
;PruebaNodo1.c,182 :: 		funcionRS485 = tramaCabeceraRS485[1];
0x00B4	0xF031C040  	MOVFF       _tramaCabeceraRS485+1, _funcionRS485
;PruebaNodo1.c,183 :: 		subFuncionRS485 = tramaCabeceraRS485[2];
0x00B8	0xF024C041  	MOVFF       _tramaCabeceraRS485+2, _subFuncionRS485
;PruebaNodo1.c,184 :: 		*(ptrNumDatosRS485) = tramaCabeceraRS485[3];
0x00BC	0xFFE1C02F  	MOVFF       _ptrNumDatosRS485, FSR1L
0x00C0	0xFFE2C030  	MOVFF       _ptrNumDatosRS485+1, FSR1H
0x00C4	0xFFE6C042  	MOVFF       _tramaCabeceraRS485+3, POSTINC1
;PruebaNodo1.c,185 :: 		*(ptrNumDatosRS485+1) = tramaCabeceraRS485[4];
0x00C8	0x0E01      	MOVLW       1
0x00CA	0x242F      	ADDWF       _ptrNumDatosRS485, 0 
0x00CC	0x6EE1      	MOVWF       FSR1L 
0x00CE	0x0E00      	MOVLW       0
0x00D0	0x2030      	ADDWFC      _ptrNumDatosRS485+1, 0 
0x00D2	0x6EE2      	MOVWF       FSR1H 
0x00D4	0xFFE6C043  	MOVFF       _tramaCabeceraRS485+4, POSTINC1
;PruebaNodo1.c,186 :: 		banRSI = 2;
0x00D8	0x0E02      	MOVLW       2
0x00DA	0x6E3D      	MOVWF       _banRSI 
;PruebaNodo1.c,187 :: 		i_rs485 = 0;
0x00DC	0x6A3B      	CLRF        _i_rs485 
0x00DE	0x6A3C      	CLRF        _i_rs485+1 
;PruebaNodo1.c,188 :: 		} else {
0x00E0	0xD004      	BRA         L_interrupt32
L_interrupt31:
;PruebaNodo1.c,189 :: 		banRSI = 0;
0x00E2	0x6A3D      	CLRF        _banRSI 
;PruebaNodo1.c,190 :: 		banRSC = 0;
0x00E4	0x6A3E      	CLRF        _banRSC 
;PruebaNodo1.c,191 :: 		i_rs485 = 0;
0x00E6	0x6A3B      	CLRF        _i_rs485 
0x00E8	0x6A3C      	CLRF        _i_rs485+1 
;PruebaNodo1.c,192 :: 		}
L_interrupt32:
;PruebaNodo1.c,193 :: 		}
L_interrupt30:
;PruebaNodo1.c,196 :: 		if (banRSC==1){
0x00EA	0x503E      	MOVF        _banRSC, 0 
0x00EC	0x0A01      	XORLW       1
0x00EE	0xA4D8      	BTFSS       STATUS, 2 
0x00F0	0xD074      	BRA         L_interrupt33
;PruebaNodo1.c,198 :: 		TEST = ~TEST;
0x00F2	0x788B      	BTG         LATC4_bit, BitPos(LATC4_bit+0) 
;PruebaNodo1.c,199 :: 		Delay_ms(250);
0x00F4	0x0E06      	MOVLW       6
0x00F6	0x6E0B      	MOVWF       R11, 0
0x00F8	0x0E13      	MOVLW       19
0x00FA	0x6E0C      	MOVWF       R12, 0
0x00FC	0x0EAD      	MOVLW       173
0x00FE	0x6E0D      	MOVWF       R13, 0
L_interrupt34:
0x0100	0x2E0D      	DECFSZ      R13, 1, 0
0x0102	0xD7FE      	BRA         L_interrupt34
0x0104	0x2E0C      	DECFSZ      R12, 1, 0
0x0106	0xD7FC      	BRA         L_interrupt34
0x0108	0x2E0B      	DECFSZ      R11, 1, 0
0x010A	0xD7FA      	BRA         L_interrupt34
0x010C	0x0000      	NOP
0x010E	0x0000      	NOP
;PruebaNodo1.c,202 :: 		if (funcionRS485==2){
0x0110	0x5031      	MOVF        _funcionRS485, 0 
0x0112	0x0A02      	XORLW       2
0x0114	0xE11E      	BNZ         L_interrupt35
;PruebaNodo1.c,205 :: 		numDatosRS485 = 5;
0x0116	0x0E05      	MOVLW       5
0x0118	0x6E25      	MOVWF       _numDatosRS485 
0x011A	0x0E00      	MOVLW       0
0x011C	0x6E26      	MOVWF       _numDatosRS485+1 
;PruebaNodo1.c,206 :: 		tramaCabeceraRS485[3] = *(ptrNumDatosRS485);
0x011E	0xFFE9C02F  	MOVFF       _ptrNumDatosRS485, FSR0L
0x0122	0xFFEAC030  	MOVFF       _ptrNumDatosRS485+1, FSR0H
0x0126	0xF042CFEE  	MOVFF       POSTINC0, _tramaCabeceraRS485+3
;PruebaNodo1.c,207 :: 		tramaCabeceraRS485[4] = *(ptrNumDatosRS485+1);
0x012A	0x0E01      	MOVLW       1
0x012C	0x242F      	ADDWF       _ptrNumDatosRS485, 0 
0x012E	0x6EE9      	MOVWF       FSR0L 
0x0130	0x0E00      	MOVLW       0
0x0132	0x2030      	ADDWFC      _ptrNumDatosRS485+1, 0 
0x0134	0x6EEA      	MOVWF       FSR0H 
0x0136	0xF043CFEE  	MOVFF       POSTINC0, _tramaCabeceraRS485+4
;PruebaNodo1.c,209 :: 		EnviarTramaRS485(1, tramaCabeceraRS485, inputPyloadRS485);
0x013A	0x0E01      	MOVLW       1
0x013C	0x0103      	MOVLB       3
0x013E	0x6F27      	MOVWF       FARG_EnviarTramaRS485_puertoUART, 1
0x0140	0x0E3F      	MOVLW       _tramaCabeceraRS485
0x0142	0x6F28      	MOVWF       FARG_EnviarTramaRS485_cabecera, 1
0x0144	0x0E00      	MOVLW       hi_addr(_tramaCabeceraRS485)
0x0146	0x6F29      	MOVWF       FARG_EnviarTramaRS485_cabecera+1, 1
0x0148	0x0E12      	MOVLW       _inputPyloadRS485
0x014A	0x6F2A      	MOVWF       FARG_EnviarTramaRS485_payload, 1
0x014C	0x0E03      	MOVLW       hi_addr(_inputPyloadRS485)
0x014E	0x6F2B      	MOVWF       FARG_EnviarTramaRS485_payload+1, 1
0x0150	0xD866      	RCALL       _EnviarTramaRS485
;PruebaNodo1.c,210 :: 		}
L_interrupt35:
;PruebaNodo1.c,211 :: 		if (funcionRS485==4){
0x0152	0x5031      	MOVF        _funcionRS485, 0 
0x0154	0x0A04      	XORLW       4
0x0156	0xE140      	BNZ         L_interrupt36
;PruebaNodo1.c,212 :: 		if (subFuncionRS485==2){
0x0158	0x5024      	MOVF        _subFuncionRS485, 0 
0x015A	0x0A02      	XORLW       2
0x015C	0xE11E      	BNZ         L_interrupt37
;PruebaNodo1.c,214 :: 		numDatosRS485 = 10;
0x015E	0x0E0A      	MOVLW       10
0x0160	0x6E25      	MOVWF       _numDatosRS485 
0x0162	0x0E00      	MOVLW       0
0x0164	0x6E26      	MOVWF       _numDatosRS485+1 
;PruebaNodo1.c,215 :: 		tramaCabeceraRS485[3] = *(ptrNumDatosRS485);
0x0166	0xFFE9C02F  	MOVFF       _ptrNumDatosRS485, FSR0L
0x016A	0xFFEAC030  	MOVFF       _ptrNumDatosRS485+1, FSR0H
0x016E	0xF042CFEE  	MOVFF       POSTINC0, _tramaCabeceraRS485+3
;PruebaNodo1.c,216 :: 		tramaCabeceraRS485[4] = *(ptrNumDatosRS485+1);
0x0172	0x0E01      	MOVLW       1
0x0174	0x242F      	ADDWF       _ptrNumDatosRS485, 0 
0x0176	0x6EE9      	MOVWF       FSR0L 
0x0178	0x0E00      	MOVLW       0
0x017A	0x2030      	ADDWFC      _ptrNumDatosRS485+1, 0 
0x017C	0x6EEA      	MOVWF       FSR0H 
0x017E	0xF043CFEE  	MOVFF       POSTINC0, _tramaCabeceraRS485+4
;PruebaNodo1.c,217 :: 		EnviarTramaRS485(1, tramaCabeceraRS485, tramaPruebaRS485);
0x0182	0x0E01      	MOVLW       1
0x0184	0x0103      	MOVLB       3
0x0186	0x6F27      	MOVWF       FARG_EnviarTramaRS485_puertoUART, 1
0x0188	0x0E3F      	MOVLW       _tramaCabeceraRS485
0x018A	0x6F28      	MOVWF       FARG_EnviarTramaRS485_cabecera, 1
0x018C	0x0E00      	MOVLW       hi_addr(_tramaCabeceraRS485)
0x018E	0x6F29      	MOVWF       FARG_EnviarTramaRS485_cabecera+1, 1
0x0190	0x0E1A      	MOVLW       _tramaPruebaRS485
0x0192	0x6F2A      	MOVWF       FARG_EnviarTramaRS485_payload, 1
0x0194	0x0E00      	MOVLW       hi_addr(_tramaPruebaRS485)
0x0196	0x6F2B      	MOVWF       FARG_EnviarTramaRS485_payload+1, 1
0x0198	0xD842      	RCALL       _EnviarTramaRS485
;PruebaNodo1.c,218 :: 		}
L_interrupt37:
;PruebaNodo1.c,219 :: 		if (subFuncionRS485==3){
0x019A	0x5024      	MOVF        _subFuncionRS485, 0 
0x019C	0x0A03      	XORLW       3
0x019E	0xE11C      	BNZ         L_interrupt38
;PruebaNodo1.c,221 :: 		numDatosRS485 = 700;
0x01A0	0x0EBC      	MOVLW       188
0x01A2	0x6E25      	MOVWF       _numDatosRS485 
0x01A4	0x0E02      	MOVLW       2
0x01A6	0x6E26      	MOVWF       _numDatosRS485+1 
;PruebaNodo1.c,222 :: 		tramaCabeceraRS485[3] = *(ptrNumDatosRS485);
0x01A8	0xFFE9C02F  	MOVFF       _ptrNumDatosRS485, FSR0L
0x01AC	0xFFEAC030  	MOVFF       _ptrNumDatosRS485+1, FSR0H
0x01B0	0xF042CFEE  	MOVFF       POSTINC0, _tramaCabeceraRS485+3
;PruebaNodo1.c,223 :: 		tramaCabeceraRS485[4] = *(ptrNumDatosRS485+1);
0x01B4	0x0E01      	MOVLW       1
0x01B6	0x242F      	ADDWF       _ptrNumDatosRS485, 0 
0x01B8	0x6EE9      	MOVWF       FSR0L 
0x01BA	0x0E00      	MOVLW       0
0x01BC	0x2030      	ADDWFC      _ptrNumDatosRS485+1, 0 
0x01BE	0x6EEA      	MOVWF       FSR0H 
0x01C0	0xF043CFEE  	MOVFF       POSTINC0, _tramaCabeceraRS485+4
;PruebaNodo1.c,224 :: 		GenerarTramaPrueba(numDatosRS485, tramaCabeceraRS485);
0x01C4	0x0EBC      	MOVLW       188
0x01C6	0x0103      	MOVLB       3
0x01C8	0x6F21      	MOVWF       FARG_GenerarTramaPrueba_numDatosResp, 1
0x01CA	0x0E02      	MOVLW       2
0x01CC	0x6F22      	MOVWF       FARG_GenerarTramaPrueba_numDatosResp+1, 1
0x01CE	0x0E3F      	MOVLW       _tramaCabeceraRS485
0x01D0	0x6F23      	MOVWF       FARG_GenerarTramaPrueba_cabeceraRespuesta, 1
0x01D2	0x0E00      	MOVLW       hi_addr(_tramaCabeceraRS485)
0x01D4	0x6F24      	MOVWF       FARG_GenerarTramaPrueba_cabeceraRespuesta+1, 1
0x01D6	0xD92F      	RCALL       _GenerarTramaPrueba
;PruebaNodo1.c,225 :: 		}
L_interrupt38:
;PruebaNodo1.c,226 :: 		}
L_interrupt36:
;PruebaNodo1.c,228 :: 		banRSC = 0;
0x01D8	0x6A3E      	CLRF        _banRSC 
;PruebaNodo1.c,230 :: 		}
L_interrupt33:
;PruebaNodo1.c,234 :: 		}
L_interrupt17:
;PruebaNodo1.c,237 :: 		}
L_end_interrupt:
L__interrupt51:
0x01DA	0xF000C019  	MOVFF       25, R0
0x01DE	0xF001C018  	MOVFF       24, R1
0x01E2	0xF00BC017  	MOVFF       23, R11
0x01E6	0xF00CC016  	MOVFF       22, R12
0x01EA	0xF00DC015  	MOVFF       21, R13
0x01EE	0x0011      	RETFIE      1
; end of _interrupt
_UART1_Tx_Idle:
;__Lib_UART_c67b67.c,57 :: 		
;__Lib_UART_c67b67.c,58 :: 		
0x01F0	0x0E00      	MOVLW       0
0x01F2	0xB2AC      	BTFSC       TXSTA, 1 
0x01F4	0x0E01      	MOVLW       1
0x01F6	0x6E00      	MOVWF       R0 
;__Lib_UART_c67b67.c,59 :: 		
L_end_UART1_Tx_Idle:
0x01F8	0x0012      	RETURN      0
; end of _UART1_Tx_Idle
_UART1_Write:
;__Lib_UART_c67b67.c,63 :: 		
;__Lib_UART_c67b67.c,64 :: 		
L_UART1_Write3:
0x01FA	0xB2AC      	BTFSC       TXSTA, 1 
0x01FC	0xD002      	BRA         L_UART1_Write4
;__Lib_UART_c67b67.c,65 :: 		
0x01FE	0x0000      	NOP
0x0200	0xD7FC      	BRA         L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67b67.c,66 :: 		
0x0202	0xFFADC337  	MOVFF       FARG_UART1_Write_data_, TXREG
;__Lib_UART_c67b67.c,67 :: 		
L_end_UART1_Write:
0x0206	0x0012      	RETURN      0
; end of _UART1_Write
_UART2_Tx_Idle:
;__Lib_UART_c67b67.c,154 :: 		
;__Lib_UART_c67b67.c,155 :: 		
0x0208	0x0E00      	MOVLW       0
0x020A	0xB272      	BTFSC       TXSTA2, 1 
0x020C	0x0E01      	MOVLW       1
0x020E	0x6E00      	MOVWF       R0 
;__Lib_UART_c67b67.c,156 :: 		
L_end_UART2_Tx_Idle:
0x0210	0x0012      	RETURN      0
; end of _UART2_Tx_Idle
_UART2_Write:
;__Lib_UART_c67b67.c,160 :: 		
;__Lib_UART_c67b67.c,161 :: 		
L_UART2_Write19:
0x0212	0xB272      	BTFSC       TXSTA2, 1 
0x0214	0xD001      	BRA         L_UART2_Write20
;__Lib_UART_c67b67.c,162 :: 		
0x0216	0xD7FD      	BRA         L_UART2_Write19
L_UART2_Write20:
;__Lib_UART_c67b67.c,163 :: 		
0x0218	0xFF73C337  	MOVFF       FARG_UART2_Write_data_, TXREG2
;__Lib_UART_c67b67.c,164 :: 		
L_end_UART2_Write:
0x021C	0x0012      	RETURN      0
; end of _UART2_Write
_EnviarTramaRS485:
;rs485.c,20 :: 		void EnviarTramaRS485(unsigned char puertoUART, unsigned char *cabecera, unsigned char *payload){
;rs485.c,32 :: 		ptrnumDatos = (unsigned char *) & numDatos;
0x021E	0x0E33      	MOVLW       EnviarTramaRS485_numDatos_L0
0x0220	0x0103      	MOVLB       3
0x0222	0x6F35      	MOVWF       EnviarTramaRS485_ptrnumDatos_L0, 1
0x0224	0x0E03      	MOVLW       hi_addr(EnviarTramaRS485_numDatos_L0)
0x0226	0x6F36      	MOVWF       EnviarTramaRS485_ptrnumDatos_L0+1, 1
;rs485.c,35 :: 		direccion = cabecera[0];
0x0228	0xFFE9C328  	MOVFF       FARG_EnviarTramaRS485_cabecera, FSR0L
0x022C	0xFFEAC329  	MOVFF       FARG_EnviarTramaRS485_cabecera+1, FSR0H
0x0230	0xF32CCFEE  	MOVFF       POSTINC0, EnviarTramaRS485_direccion_L0
;rs485.c,36 :: 		funcion = cabecera[1];
0x0234	0x0E01      	MOVLW       1
0x0236	0x2528      	ADDWF       FARG_EnviarTramaRS485_cabecera, 0, 1
0x0238	0x6EE9      	MOVWF       FSR0L 
0x023A	0x0E00      	MOVLW       0
0x023C	0x2129      	ADDWFC      FARG_EnviarTramaRS485_cabecera+1, 0, 1
0x023E	0x6EEA      	MOVWF       FSR0H 
0x0240	0xF32DCFEE  	MOVFF       POSTINC0, EnviarTramaRS485_funcion_L0
;rs485.c,37 :: 		subfuncion = cabecera[2];
0x0244	0x0E02      	MOVLW       2
0x0246	0x2528      	ADDWF       FARG_EnviarTramaRS485_cabecera, 0, 1
0x0248	0x6EE9      	MOVWF       FSR0L 
0x024A	0x0E00      	MOVLW       0
0x024C	0x2129      	ADDWFC      FARG_EnviarTramaRS485_cabecera+1, 0, 1
0x024E	0x6EEA      	MOVWF       FSR0H 
0x0250	0xF32ECFEE  	MOVFF       POSTINC0, EnviarTramaRS485_subfuncion_L0
;rs485.c,38 :: 		lsbNumDatos = cabecera[3];
0x0254	0x0E03      	MOVLW       3
0x0256	0x2528      	ADDWF       FARG_EnviarTramaRS485_cabecera, 0, 1
0x0258	0x6EE9      	MOVWF       FSR0L 
0x025A	0x0E00      	MOVLW       0
0x025C	0x2129      	ADDWFC      FARG_EnviarTramaRS485_cabecera+1, 0, 1
0x025E	0x6EEA      	MOVWF       FSR0H 
0x0260	0xF000CFEE  	MOVFF       POSTINC0, R0
0x0264	0xF32FC000  	MOVFF       R0, EnviarTramaRS485_lsbNumDatos_L0
;rs485.c,39 :: 		msbNumDatos = cabecera[4];
0x0268	0x0E04      	MOVLW       4
0x026A	0x2528      	ADDWF       FARG_EnviarTramaRS485_cabecera, 0, 1
0x026C	0x6EE9      	MOVWF       FSR0L 
0x026E	0x0E00      	MOVLW       0
0x0270	0x2129      	ADDWFC      FARG_EnviarTramaRS485_cabecera+1, 0, 1
0x0272	0x6EEA      	MOVWF       FSR0H 
0x0274	0xF330CFEE  	MOVFF       POSTINC0, EnviarTramaRS485_msbNumDatos_L0
;rs485.c,42 :: 		*(ptrnumDatos) = lsbNumDatos;
0x0278	0xFFE1C335  	MOVFF       EnviarTramaRS485_ptrnumDatos_L0, FSR1L
0x027C	0xFFE2C336  	MOVFF       EnviarTramaRS485_ptrnumDatos_L0+1, FSR1H
0x0280	0xFFE6C000  	MOVFF       R0, POSTINC1
;rs485.c,43 :: 		*(ptrnumDatos+1) = msbNumDatos;
0x0284	0x0E01      	MOVLW       1
0x0286	0x2535      	ADDWF       EnviarTramaRS485_ptrnumDatos_L0, 0, 1
0x0288	0x6EE1      	MOVWF       FSR1L 
0x028A	0x0E00      	MOVLW       0
0x028C	0x2136      	ADDWFC      EnviarTramaRS485_ptrnumDatos_L0+1, 0, 1
0x028E	0x6EE2      	MOVWF       FSR1H 
0x0290	0xFFE6C330  	MOVFF       EnviarTramaRS485_msbNumDatos_L0, POSTINC1
;rs485.c,45 :: 		if (puertoUART == 1){
0x0294	0x5127      	MOVF        FARG_EnviarTramaRS485_puertoUART, 0, 1
0x0296	0x0A01      	XORLW       1
0x0298	0xE139      	BNZ         L_EnviarTramaRS4850
;rs485.c,46 :: 		MS1RS485 = 1;                                                            //Establece el Max485 en modo escritura
0x029A	0x8A8B      	BSF         MS1RS485, BitPos(MS1RS485+0) 
;rs485.c,47 :: 		UART1_Write(0x3A);                                                      //Envia la cabecera de la trama
0x029C	0x0E3A      	MOVLW       58
0x029E	0x6F37      	MOVWF       FARG_UART1_Write_data_, 1
0x02A0	0xDFAC      	RCALL       _UART1_Write
;rs485.c,48 :: 		UART1_Write(direccion);                                                 //Envia la direccion del destinatario
0x02A2	0xF337C32C  	MOVFF       EnviarTramaRS485_direccion_L0, FARG_UART1_Write_data_
0x02A6	0xDFA9      	RCALL       _UART1_Write
;rs485.c,49 :: 		UART1_Write(funcion);                                                   //Envia el codigo de la funcion
0x02A8	0xF337C32D  	MOVFF       EnviarTramaRS485_funcion_L0, FARG_UART1_Write_data_
0x02AC	0xDFA6      	RCALL       _UART1_Write
;rs485.c,50 :: 		UART1_Write(subfuncion);                                                //Envia el codigo de la subfuncion
0x02AE	0xF337C32E  	MOVFF       EnviarTramaRS485_subfuncion_L0, FARG_UART1_Write_data_
0x02B2	0xDFA3      	RCALL       _UART1_Write
;rs485.c,51 :: 		UART1_Write(lsbNumDatos);                                               //Envia el LSB del numero de datos
0x02B4	0xF337C32F  	MOVFF       EnviarTramaRS485_lsbNumDatos_L0, FARG_UART1_Write_data_
0x02B8	0xDFA0      	RCALL       _UART1_Write
;rs485.c,52 :: 		UART1_Write(msbNumDatos);                                               //Envia el MSB del numero de datos
0x02BA	0xF337C330  	MOVFF       EnviarTramaRS485_msbNumDatos_L0, FARG_UART1_Write_data_
0x02BE	0xDF9D      	RCALL       _UART1_Write
;rs485.c,53 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x02C0	0x0103      	MOVLB       3
0x02C2	0x6B31      	CLRF        EnviarTramaRS485_iDatos_L0, 1
0x02C4	0x6B32      	CLRF        EnviarTramaRS485_iDatos_L0+1, 1
L_EnviarTramaRS4851:
0x02C6	0x5134      	MOVF        EnviarTramaRS485_numDatos_L0+1, 0, 1
0x02C8	0x5D32      	SUBWF       EnviarTramaRS485_iDatos_L0+1, 0, 1
0x02CA	0xE102      	BNZ         L__EnviarTramaRS48543
0x02CC	0x5133      	MOVF        EnviarTramaRS485_numDatos_L0, 0, 1
0x02CE	0x5D31      	SUBWF       EnviarTramaRS485_iDatos_L0, 0, 1
L__EnviarTramaRS48543:
0x02D0	0xE20D      	BC          L_EnviarTramaRS4852
;rs485.c,54 :: 		UART1_Write(payload[iDatos]);
0x02D2	0x5131      	MOVF        EnviarTramaRS485_iDatos_L0, 0, 1
0x02D4	0x252A      	ADDWF       FARG_EnviarTramaRS485_payload, 0, 1
0x02D6	0x6EE9      	MOVWF       FSR0L 
0x02D8	0x5132      	MOVF        EnviarTramaRS485_iDatos_L0+1, 0, 1
0x02DA	0x212B      	ADDWFC      FARG_EnviarTramaRS485_payload+1, 0, 1
0x02DC	0x6EEA      	MOVWF       FSR0H 
0x02DE	0xF337CFEE  	MOVFF       POSTINC0, FARG_UART1_Write_data_
0x02E2	0xDF8B      	RCALL       _UART1_Write
;rs485.c,53 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x02E4	0x0103      	MOVLB       3
0x02E6	0x4B31      	INFSNZ      EnviarTramaRS485_iDatos_L0, 1, 1
0x02E8	0x2B32      	INCF        EnviarTramaRS485_iDatos_L0+1, 1, 1
;rs485.c,55 :: 		}
0x02EA	0xD7ED      	BRA         L_EnviarTramaRS4851
L_EnviarTramaRS4852:
;rs485.c,56 :: 		UART1_Write(0x0D);                                                      //Envia el primer delimitador de final de la trama
0x02EC	0x0E0D      	MOVLW       13
0x02EE	0x6F37      	MOVWF       FARG_UART1_Write_data_, 1
0x02F0	0xDF84      	RCALL       _UART1_Write
;rs485.c,57 :: 		UART1_Write(0x0A);                                                      //Envia el segundo delimitador de final de la trama
0x02F2	0x0E0A      	MOVLW       10
0x02F4	0x0103      	MOVLB       3
0x02F6	0x6F37      	MOVWF       FARG_UART1_Write_data_, 1
0x02F8	0xDF80      	RCALL       _UART1_Write
;rs485.c,58 :: 		UART1_Write(0x00);                                                      //Envia un byte adicional
0x02FA	0x0103      	MOVLB       3
0x02FC	0x6B37      	CLRF        FARG_UART1_Write_data_, 1
0x02FE	0xDF7D      	RCALL       _UART1_Write
;rs485.c,59 :: 		while(UART1_Tx_Idle()==0);                                              //Espera hasta que se haya terminado de enviar todo el dato por UART antes de continuar
L_EnviarTramaRS4854:
0x0300	0xDF77      	RCALL       _UART1_Tx_Idle
0x0302	0x5000      	MOVF        R0, 0 
0x0304	0x0A00      	XORLW       0
0x0306	0xE101      	BNZ         L_EnviarTramaRS4855
0x0308	0xD7FB      	BRA         L_EnviarTramaRS4854
L_EnviarTramaRS4855:
;rs485.c,60 :: 		MS1RS485 = 0;                                                           //Establece el Max485 en modo lectura
0x030A	0x9A8B      	BCF         MS1RS485, BitPos(MS1RS485+0) 
;rs485.c,61 :: 		}
L_EnviarTramaRS4850:
;rs485.c,63 :: 		if (puertoUART == 2){
0x030C	0x0103      	MOVLB       3
0x030E	0x5127      	MOVF        FARG_EnviarTramaRS485_puertoUART, 0, 1
0x0310	0x0A02      	XORLW       2
0x0312	0xE139      	BNZ         L_EnviarTramaRS4856
;rs485.c,64 :: 		MS2RS485 = 1;                                                            //Establece el Max485 en modo escritura
0x0314	0x8A8B      	BSF         MS2RS485, BitPos(MS2RS485+0) 
;rs485.c,65 :: 		UART2_Write(0x3A);                                                      //Envia la cabecera de la trama
0x0316	0x0E3A      	MOVLW       58
0x0318	0x6F37      	MOVWF       FARG_UART2_Write_data_, 1
0x031A	0xDF7B      	RCALL       _UART2_Write
;rs485.c,66 :: 		UART2_Write(direccion);                                                 //Envia la direccion del destinatario
0x031C	0xF337C32C  	MOVFF       EnviarTramaRS485_direccion_L0, FARG_UART2_Write_data_
0x0320	0xDF78      	RCALL       _UART2_Write
;rs485.c,67 :: 		UART2_Write(funcion);                                                   //Envia el codigo de la funcion
0x0322	0xF337C32D  	MOVFF       EnviarTramaRS485_funcion_L0, FARG_UART2_Write_data_
0x0326	0xDF75      	RCALL       _UART2_Write
;rs485.c,68 :: 		UART2_Write(subfuncion);                                                //Envia el codigo de la subfuncion
0x0328	0xF337C32E  	MOVFF       EnviarTramaRS485_subfuncion_L0, FARG_UART2_Write_data_
0x032C	0xDF72      	RCALL       _UART2_Write
;rs485.c,69 :: 		UART2_Write(lsbNumDatos);                                               //Envia el LSB del numero de datos
0x032E	0xF337C32F  	MOVFF       EnviarTramaRS485_lsbNumDatos_L0, FARG_UART2_Write_data_
0x0332	0xDF6F      	RCALL       _UART2_Write
;rs485.c,70 :: 		UART2_Write(msbNumDatos);                                               //Envia el MSB del numero de datos
0x0334	0xF337C330  	MOVFF       EnviarTramaRS485_msbNumDatos_L0, FARG_UART2_Write_data_
0x0338	0xDF6C      	RCALL       _UART2_Write
;rs485.c,71 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x033A	0x0103      	MOVLB       3
0x033C	0x6B31      	CLRF        EnviarTramaRS485_iDatos_L0, 1
0x033E	0x6B32      	CLRF        EnviarTramaRS485_iDatos_L0+1, 1
L_EnviarTramaRS4857:
0x0340	0x5134      	MOVF        EnviarTramaRS485_numDatos_L0+1, 0, 1
0x0342	0x5D32      	SUBWF       EnviarTramaRS485_iDatos_L0+1, 0, 1
0x0344	0xE102      	BNZ         L__EnviarTramaRS48544
0x0346	0x5133      	MOVF        EnviarTramaRS485_numDatos_L0, 0, 1
0x0348	0x5D31      	SUBWF       EnviarTramaRS485_iDatos_L0, 0, 1
L__EnviarTramaRS48544:
0x034A	0xE20D      	BC          L_EnviarTramaRS4858
;rs485.c,72 :: 		UART2_Write(payload[iDatos]);
0x034C	0x5131      	MOVF        EnviarTramaRS485_iDatos_L0, 0, 1
0x034E	0x252A      	ADDWF       FARG_EnviarTramaRS485_payload, 0, 1
0x0350	0x6EE9      	MOVWF       FSR0L 
0x0352	0x5132      	MOVF        EnviarTramaRS485_iDatos_L0+1, 0, 1
0x0354	0x212B      	ADDWFC      FARG_EnviarTramaRS485_payload+1, 0, 1
0x0356	0x6EEA      	MOVWF       FSR0H 
0x0358	0xF337CFEE  	MOVFF       POSTINC0, FARG_UART2_Write_data_
0x035C	0xDF5A      	RCALL       _UART2_Write
;rs485.c,71 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x035E	0x0103      	MOVLB       3
0x0360	0x4B31      	INFSNZ      EnviarTramaRS485_iDatos_L0, 1, 1
0x0362	0x2B32      	INCF        EnviarTramaRS485_iDatos_L0+1, 1, 1
;rs485.c,73 :: 		}
0x0364	0xD7ED      	BRA         L_EnviarTramaRS4857
L_EnviarTramaRS4858:
;rs485.c,74 :: 		UART2_Write(0x0D);                                                      //Envia el primer delimitador de final de la trama
0x0366	0x0E0D      	MOVLW       13
0x0368	0x6F37      	MOVWF       FARG_UART2_Write_data_, 1
0x036A	0xDF53      	RCALL       _UART2_Write
;rs485.c,75 :: 		UART2_Write(0x0A);                                                      //Envia el segundo delimitador de final de la trama
0x036C	0x0E0A      	MOVLW       10
0x036E	0x0103      	MOVLB       3
0x0370	0x6F37      	MOVWF       FARG_UART2_Write_data_, 1
0x0372	0xDF4F      	RCALL       _UART2_Write
;rs485.c,76 :: 		UART2_Write(0x00);                                                      //Envia un byte adicional
0x0374	0x0103      	MOVLB       3
0x0376	0x6B37      	CLRF        FARG_UART2_Write_data_, 1
0x0378	0xDF4C      	RCALL       _UART2_Write
;rs485.c,77 :: 		while(UART2_Tx_Idle()==0);                                              //Espera hasta que se haya terminado de enviar todo el dato por UART antes de continuar
L_EnviarTramaRS48510:
0x037A	0xDF46      	RCALL       _UART2_Tx_Idle
0x037C	0x5000      	MOVF        R0, 0 
0x037E	0x0A00      	XORLW       0
0x0380	0xE101      	BNZ         L_EnviarTramaRS48511
0x0382	0xD7FB      	BRA         L_EnviarTramaRS48510
L_EnviarTramaRS48511:
;rs485.c,78 :: 		MS2RS485 = 0;                                                            //Establece el Max485 en modo lectura
0x0384	0x9A8B      	BCF         MS2RS485, BitPos(MS2RS485+0) 
;rs485.c,79 :: 		}
L_EnviarTramaRS4856:
;rs485.c,81 :: 		}
L_end_EnviarTramaRS485:
0x0386	0x0012      	RETURN      0
; end of _EnviarTramaRS485
_UART1_Init:
;__Lib_UART_c67b67.c,20 :: 		
;__Lib_UART_c67b67.c,23 :: 		
0x0388	0x0EFA      	MOVLW       _UART1_Write
0x038A	0x6E27      	MOVWF       _UART_Wr_Ptr 
0x038C	0x0E01      	MOVLW       hi_addr(_UART1_Write)
0x038E	0x6E28      	MOVWF       _UART_Wr_Ptr+1 
0x0390	0x0E37      	MOVLW       FARG_UART1_Write_data_
0x0392	0x6E29      	MOVWF       _UART_Wr_Ptr+2 
0x0394	0x0E03      	MOVLW       hi_addr(FARG_UART1_Write_data_)
0x0396	0x6E2A      	MOVWF       _UART_Wr_Ptr+3 
;__Lib_UART_c67b67.c,24 :: 		
0x0398	0x0E92      	MOVLW       _UART1_Read
0x039A	0x6E2B      	MOVWF       _UART_Rd_Ptr 
0x039C	0x0E04      	MOVLW       hi_addr(_UART1_Read)
0x039E	0x6E2C      	MOVWF       _UART_Rd_Ptr+1 
0x03A0	0x0E00      	MOVLW       0
0x03A2	0x6E2D      	MOVWF       _UART_Rd_Ptr+2 
0x03A4	0x0E00      	MOVLW       0
0x03A6	0x6E2E      	MOVWF       _UART_Rd_Ptr+3 
;__Lib_UART_c67b67.c,25 :: 		
0x03A8	0x0EFF      	MOVLW       _UART1_Data_Ready
0x03AA	0x0103      	MOVLB       3
0x03AC	0x6F0A      	MOVWF       _UART_Rdy_Ptr, 1
0x03AE	0x0EFF      	MOVLW       hi_addr(_UART1_Data_Ready)
0x03B0	0x6F0B      	MOVWF       _UART_Rdy_Ptr+1, 1
0x03B2	0x0E00      	MOVLW       0
0x03B4	0x6F0C      	MOVWF       _UART_Rdy_Ptr+2, 1
0x03B6	0x0E00      	MOVLW       0
0x03B8	0x6F0D      	MOVWF       _UART_Rdy_Ptr+3, 1
;__Lib_UART_c67b67.c,26 :: 		
0x03BA	0x0EF0      	MOVLW       _UART1_Tx_Idle
0x03BC	0x6F0E      	MOVWF       _UART_Tx_Idle_Ptr, 1
0x03BE	0x0E01      	MOVLW       hi_addr(_UART1_Tx_Idle)
0x03C0	0x6F0F      	MOVWF       _UART_Tx_Idle_Ptr+1, 1
0x03C2	0x0E00      	MOVLW       0
0x03C4	0x6F10      	MOVWF       _UART_Tx_Idle_Ptr+2, 1
0x03C6	0x0E00      	MOVLW       0
0x03C8	0x6F11      	MOVWF       _UART_Tx_Idle_Ptr+3, 1
;__Lib_UART_c67b67.c,28 :: 		
0x03CA	0x8AAC      	BSF         TXSTA, 5 
;__Lib_UART_c67b67.c,29 :: 		
0x03CC	0x0E90      	MOVLW       144
0x03CE	0x6EAB      	MOVWF       RCSTA 
;__Lib_UART_c67b67.c,30 :: 		
0x03D0	0x8E94      	BSF         TRISC7_bit, BitPos(TRISC7_bit+0) 
;__Lib_UART_c67b67.c,31 :: 		
0x03D2	0x9C94      	BCF         TRISC6_bit, BitPos(TRISC6_bit+0) 
;__Lib_UART_c67b67.c,33 :: 		
L_UART1_Init0:
0x03D4	0xAA9E      	BTFSS       PIR1, 5 
0x03D6	0xD003      	BRA         L_UART1_Init1
;__Lib_UART_c67b67.c,34 :: 		
0x03D8	0xF000CFAE  	MOVFF       RCREG, R0
0x03DC	0xD7FB      	BRA         L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67b67.c,35 :: 		
L_end_UART1_Init:
0x03DE	0x0012      	RETURN      0
; end of _UART1_Init
_ConfiguracionPrincipal:
;PruebaNodo1.c,90 :: 		void ConfiguracionPrincipal(){
;PruebaNodo1.c,93 :: 		OSCCON.IDLEN=1;                                    //Entra en modo IDLE durante la instruccion SLEEP
0x03E0	0x8ED3      	BSF         OSCCON, 7 
;PruebaNodo1.c,94 :: 		OSCCON.IRCF2=1;                                    //HFINTOSC=16MHz  IRFC=111
0x03E2	0x8CD3      	BSF         OSCCON, 6 
;PruebaNodo1.c,95 :: 		OSCCON.IRCF1=1;
0x03E4	0x8AD3      	BSF         OSCCON, 5 
;PruebaNodo1.c,96 :: 		OSCCON.IRCF0=1;
0x03E6	0x88D3      	BSF         OSCCON, 4 
;PruebaNodo1.c,97 :: 		OSCCON.SCS1=1;                                     //System Clock Select bit:  1x=Internal oscillator block
0x03E8	0x82D3      	BSF         OSCCON, 1 
;PruebaNodo1.c,98 :: 		OSCCON.SCS0=1;
0x03EA	0x80D3      	BSF         OSCCON, 0 
;PruebaNodo1.c,101 :: 		ANSELA = 0;                                        //Configura PORTA como digital
0x03EC	0x010F      	MOVLB       15
0x03EE	0x6B38      	CLRF        ANSELA, 1
;PruebaNodo1.c,102 :: 		ANSELB = 0;                                        //Configura PORTB como digital
0x03F0	0x6B39      	CLRF        ANSELB, 1
;PruebaNodo1.c,103 :: 		ANSELC = 0;                                        //Configura PORTC como digital
0x03F2	0x6B3A      	CLRF        ANSELC, 1
;PruebaNodo1.c,105 :: 		TEST_Direction = 0;                                //Configura el pin TEST como salida
0x03F4	0x9894      	BCF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;PruebaNodo1.c,106 :: 		MS1RS485_Direction = 0;                            //Configura el pin MS1RS485 como salida
0x03F6	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;PruebaNodo1.c,108 :: 		INTCON.GIE = 1;                                    //Habilita las interrupciones globales
0x03F8	0x8EF2      	BSF         INTCON, 7 
;PruebaNodo1.c,109 :: 		INTCON.PEIE = 1;                                   //Habilita las interrupciones perifericas
0x03FA	0x8CF2      	BSF         INTCON, 6 
;PruebaNodo1.c,112 :: 		PIE1.RC1IE = 1;                                   //Habilita la interrupcion en UART1 receive
0x03FC	0x8A9D      	BSF         PIE1, 5 
;PruebaNodo1.c,113 :: 		PIR1.RC1IF = 0;                                   //Limpia la bandera de interrupcion UART1
0x03FE	0x9A9E      	BCF         PIR1, 5 
;PruebaNodo1.c,114 :: 		UART1_Init(19200);                                //Inicializa el UART1 a 19200 bps
0x0400	0x86B8      	BSF         BAUDCON, 3, 0
0x0402	0x6AB0      	CLRF        SPBRGH 
0x0404	0x0ECF      	MOVLW       207
0x0406	0x6EAF      	MOVWF       SPBRG 
0x0408	0x84AC      	BSF         TXSTA, 2, 0
0x040A	0xDFBE      	RCALL       _UART1_Init
;PruebaNodo1.c,116 :: 		Delay_ms(100);                                     //Espera hasta que se estabilicen los cambios
0x040C	0x0E03      	MOVLW       3
0x040E	0x6E0B      	MOVWF       R11, 0
0x0410	0x0E08      	MOVLW       8
0x0412	0x6E0C      	MOVWF       R12, 0
0x0414	0x0E77      	MOVLW       119
0x0416	0x6E0D      	MOVWF       R13, 0
L_ConfiguracionPrincipal12:
0x0418	0x2E0D      	DECFSZ      R13, 1, 0
0x041A	0xD7FE      	BRA         L_ConfiguracionPrincipal12
0x041C	0x2E0C      	DECFSZ      R12, 1, 0
0x041E	0xD7FC      	BRA         L_ConfiguracionPrincipal12
0x0420	0x2E0B      	DECFSZ      R11, 1, 0
0x0422	0xD7FA      	BRA         L_ConfiguracionPrincipal12
;PruebaNodo1.c,118 :: 		}
L_end_ConfiguracionPrincipal:
0x0424	0x0012      	RETURN      0
; end of _ConfiguracionPrincipal
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0426	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0428	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x042C	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x042E	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0430	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0432	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0434	0x0012      	RETURN      0
; end of ___CC2DW
_GenerarTramaPrueba:
;PruebaNodo1.c,122 :: 		void GenerarTramaPrueba(unsigned int numDatosResp, unsigned char *cabeceraRespuesta){
;PruebaNodo1.c,124 :: 		unsigned int contadorMuestras = 0;
0x0436	0x0103      	MOVLB       3
0x0438	0x6B25      	CLRF        GenerarTramaPrueba_contadorMuestras_L0, 1
0x043A	0x6B26      	CLRF        GenerarTramaPrueba_contadorMuestras_L0+1, 1
;PruebaNodo1.c,127 :: 		for (j=0;j<numDatosResp;j++){
0x043C	0x6A32      	CLRF        _j 
0x043E	0x6A33      	CLRF        _j+1 
L_GenerarTramaPrueba13:
0x0440	0x5122      	MOVF        FARG_GenerarTramaPrueba_numDatosResp+1, 0, 1
0x0442	0x5C33      	SUBWF       _j+1, 0 
0x0444	0xE102      	BNZ         L__GenerarTramaPrueba48
0x0446	0x5121      	MOVF        FARG_GenerarTramaPrueba_numDatosResp, 0, 1
0x0448	0x5C32      	SUBWF       _j, 0 
L__GenerarTramaPrueba48:
0x044A	0xE217      	BC          L_GenerarTramaPrueba14
;PruebaNodo1.c,128 :: 		outputPyloadRS485[j] = contadorMuestras;
0x044C	0x0E44      	MOVLW       _outputPyloadRS485
0x044E	0x2432      	ADDWF       _j, 0 
0x0450	0x6EE1      	MOVWF       FSR1L 
0x0452	0x0E00      	MOVLW       hi_addr(_outputPyloadRS485)
0x0454	0x2033      	ADDWFC      _j+1, 0 
0x0456	0x6EE2      	MOVWF       FSR1H 
0x0458	0xFFE6C325  	MOVFF       GenerarTramaPrueba_contadorMuestras_L0, POSTINC1
;PruebaNodo1.c,129 :: 		contadorMuestras++;
0x045C	0x4B25      	INFSNZ      GenerarTramaPrueba_contadorMuestras_L0, 1, 1
0x045E	0x2B26      	INCF        GenerarTramaPrueba_contadorMuestras_L0+1, 1, 1
;PruebaNodo1.c,130 :: 		if (contadorMuestras>255) {
0x0460	0x0E00      	MOVLW       0
0x0462	0x6E00      	MOVWF       R0 
0x0464	0x5126      	MOVF        GenerarTramaPrueba_contadorMuestras_L0+1, 0, 1
0x0466	0x5C00      	SUBWF       R0, 0 
0x0468	0xE102      	BNZ         L__GenerarTramaPrueba49
0x046A	0x5125      	MOVF        GenerarTramaPrueba_contadorMuestras_L0, 0, 1
0x046C	0x08FF      	SUBLW       255
L__GenerarTramaPrueba49:
0x046E	0xE202      	BC          L_GenerarTramaPrueba16
;PruebaNodo1.c,131 :: 		contadorMuestras = 0;
0x0470	0x6B25      	CLRF        GenerarTramaPrueba_contadorMuestras_L0, 1
0x0472	0x6B26      	CLRF        GenerarTramaPrueba_contadorMuestras_L0+1, 1
;PruebaNodo1.c,132 :: 		}
L_GenerarTramaPrueba16:
;PruebaNodo1.c,127 :: 		for (j=0;j<numDatosResp;j++){
0x0474	0x4A32      	INFSNZ      _j, 1 
0x0476	0x2A33      	INCF        _j+1, 1 
;PruebaNodo1.c,133 :: 		}
0x0478	0xD7E3      	BRA         L_GenerarTramaPrueba13
L_GenerarTramaPrueba14:
;PruebaNodo1.c,135 :: 		EnviarTramaRS485(1, cabeceraRespuesta, outputPyloadRS485);
0x047A	0x0E01      	MOVLW       1
0x047C	0x6F27      	MOVWF       FARG_EnviarTramaRS485_puertoUART, 1
0x047E	0xF328C323  	MOVFF       FARG_GenerarTramaPrueba_cabeceraRespuesta, FARG_EnviarTramaRS485_cabecera
0x0482	0xF329C324  	MOVFF       FARG_GenerarTramaPrueba_cabeceraRespuesta+1, FARG_EnviarTramaRS485_cabecera+1
0x0486	0x0E44      	MOVLW       _outputPyloadRS485
0x0488	0x6F2A      	MOVWF       FARG_EnviarTramaRS485_payload, 1
0x048A	0x0E00      	MOVLW       hi_addr(_outputPyloadRS485)
0x048C	0x6F2B      	MOVWF       FARG_EnviarTramaRS485_payload+1, 1
0x048E	0xDEC7      	RCALL       _EnviarTramaRS485
;PruebaNodo1.c,138 :: 		}
L_end_GenerarTramaPrueba:
0x0490	0x0012      	RETURN      0
; end of _GenerarTramaPrueba
_UART1_Read:
;__Lib_UART_c67b67.c,44 :: 		
;__Lib_UART_c67b67.c,47 :: 		
0x0492	0xF001CFAE  	MOVFF       RCREG, R1
;__Lib_UART_c67b67.c,48 :: 		
0x0496	0xA2AB      	BTFSS       RCSTA, 1 
0x0498	0xD002      	BRA         L_UART1_Read2
;__Lib_UART_c67b67.c,49 :: 		
0x049A	0x98AB      	BCF         RCSTA, 4 
;__Lib_UART_c67b67.c,50 :: 		
0x049C	0x88AB      	BSF         RCSTA, 4 
;__Lib_UART_c67b67.c,51 :: 		
L_UART1_Read2:
;__Lib_UART_c67b67.c,52 :: 		
0x049E	0xF000C001  	MOVFF       R1, R0
;__Lib_UART_c67b67.c,53 :: 		
L_end_UART1_Read:
0x04A2	0x0012      	RETURN      0
; end of _UART1_Read
_main:
0x04A4	0x0E0B      	MOVLW       11
0x04A6	0x6E1A      	MOVWF       _tramaPruebaRS485 
0x04A8	0x0E0B      	MOVLW       11
0x04AA	0x6E1B      	MOVWF       27 
0x04AC	0x0E0B      	MOVLW       11
0x04AE	0x6E1C      	MOVWF       28 
0x04B0	0x0E0B      	MOVLW       11
0x04B2	0x6E1D      	MOVWF       29 
0x04B4	0x0E0B      	MOVLW       11
0x04B6	0x6E1E      	MOVWF       30 
0x04B8	0x0E0B      	MOVLW       11
0x04BA	0x6E1F      	MOVWF       31 
0x04BC	0x0E0B      	MOVLW       11
0x04BE	0x6E20      	MOVWF       32 
0x04C0	0x0E0B      	MOVLW       11
0x04C2	0x6E21      	MOVWF       33 
0x04C4	0x0E0B      	MOVLW       11
0x04C6	0x6E22      	MOVWF       34 
0x04C8	0x0E05      	MOVLW       5
0x04CA	0x6E23      	MOVWF       35 
;PruebaNodo1.c,49 :: 		void main() {
;PruebaNodo1.c,51 :: 		ConfiguracionPrincipal();
0x04CC	0xDF89      	RCALL       _ConfiguracionPrincipal
;PruebaNodo1.c,55 :: 		i = 0;
0x04CE	0x6A34      	CLRF        _i 
0x04D0	0x6A35      	CLRF        _i+1 
;PruebaNodo1.c,56 :: 		j = 0;
0x04D2	0x6A32      	CLRF        _j 
0x04D4	0x6A33      	CLRF        _j+1 
;PruebaNodo1.c,57 :: 		x = 0;
0x04D6	0x6A38      	CLRF        _x 
0x04D8	0x6A39      	CLRF        _x+1 
;PruebaNodo1.c,58 :: 		y = 0;
0x04DA	0x6A36      	CLRF        _y 
0x04DC	0x6A37      	CLRF        _y+1 
;PruebaNodo1.c,61 :: 		banRSI = 0;
0x04DE	0x6A3D      	CLRF        _banRSI 
;PruebaNodo1.c,62 :: 		banRSC = 0;
0x04E0	0x6A3E      	CLRF        _banRSC 
;PruebaNodo1.c,63 :: 		byteRS485 = 0;
0x04E2	0x6A3A      	CLRF        _byteRS485 
;PruebaNodo1.c,64 :: 		i_rs485 = 0;
0x04E4	0x6A3B      	CLRF        _i_rs485 
0x04E6	0x6A3C      	CLRF        _i_rs485+1 
;PruebaNodo1.c,65 :: 		funcionRS485 = 0;
0x04E8	0x6A31      	CLRF        _funcionRS485 
;PruebaNodo1.c,66 :: 		subFuncionRS485 = 0;
0x04EA	0x6A24      	CLRF        _subFuncionRS485 
;PruebaNodo1.c,67 :: 		numDatosRS485 = 0;
0x04EC	0x6A25      	CLRF        _numDatosRS485 
0x04EE	0x6A26      	CLRF        _numDatosRS485+1 
;PruebaNodo1.c,68 :: 		ptrNumDatosRS485 = (unsigned char *) & numDatosRS485;
0x04F0	0x0E25      	MOVLW       _numDatosRS485
0x04F2	0x6E2F      	MOVWF       _ptrNumDatosRS485 
0x04F4	0x0E00      	MOVLW       hi_addr(_numDatosRS485)
0x04F6	0x6E30      	MOVWF       _ptrNumDatosRS485+1 
;PruebaNodo1.c,69 :: 		MS1RS485 = 0;
0x04F8	0x9A8B      	BCF         LATC5_bit, BitPos(LATC5_bit+0) 
;PruebaNodo1.c,73 :: 		TEST = 1;
0x04FA	0x888B      	BSF         LATC4_bit, BitPos(LATC4_bit+0) 
;PruebaNodo1.c,82 :: 		}
L_end_main:
0x04FC	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [488]    _interrupt
0x01F0      [10]    _UART1_Tx_Idle
0x01FA      [14]    _UART1_Write
0x0208      [10]    _UART2_Tx_Idle
0x0212      [12]    _UART2_Write
0x021E     [362]    _EnviarTramaRS485
0x0388      [88]    _UART1_Init
0x03E0      [70]    _ConfiguracionPrincipal
0x0426      [16]    ___CC2DW
0x0436      [92]    _GenerarTramaPrueba
0x0492      [18]    _UART1_Read
0x04A4      [90]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    UART2_Init_tmp_L0
0x0000       [1]    R0
0x0000       [1]    UART1_Init_tmp_L0
0x0001       [1]    R1
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    UART2_Read___tmp_UART2_Read_L0
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x001A      [10]    _tramaPruebaRS485
0x0024       [1]    _subFuncionRS485
0x0025       [2]    _numDatosRS485
0x0027       [4]    _UART_Wr_Ptr
0x002B       [4]    _UART_Rd_Ptr
0x002F       [2]    _ptrNumDatosRS485
0x0031       [1]    _funcionRS485
0x0032       [2]    _j
0x0034       [2]    _i
0x0036       [2]    _y
0x0038       [2]    _x
0x003A       [1]    _byteRS485
0x003B       [2]    _i_rs485
0x003D       [1]    _banRSI
0x003E       [1]    _banRSC
0x003F       [5]    _tramaCabeceraRS485
0x0044     [710]    _outputPyloadRS485
0x030A       [4]    _UART_Rdy_Ptr
0x030E       [4]    _UART_Tx_Idle_Ptr
0x0312      [15]    _inputPyloadRS485
0x0321       [2]    FARG_GenerarTramaPrueba_numDatosResp
0x0323       [2]    FARG_GenerarTramaPrueba_cabeceraRespuesta
0x0325       [2]    GenerarTramaPrueba_contadorMuestras_L0
0x0327       [1]    FARG_EnviarTramaRS485_puertoUART
0x0328       [2]    FARG_EnviarTramaRS485_cabecera
0x032A       [2]    FARG_EnviarTramaRS485_payload
0x032C       [1]    EnviarTramaRS485_direccion_L0
0x032D       [1]    EnviarTramaRS485_funcion_L0
0x032E       [1]    EnviarTramaRS485_subfuncion_L0
0x032F       [1]    EnviarTramaRS485_lsbNumDatos_L0
0x0330       [1]    EnviarTramaRS485_msbNumDatos_L0
0x0331       [2]    EnviarTramaRS485_iDatos_L0
0x0333       [2]    EnviarTramaRS485_numDatos_L0
0x0335       [2]    EnviarTramaRS485_ptrnumDatos_L0
0x0337       [1]    FARG_UART2_Write_data_
0x0337       [1]    FARG_UART1_Write_data_
0x0F38       [1]    ANSELA
0x0F39       [1]    ANSELB
0x0F3A       [1]    ANSELC
0x0F72       [1]    TXSTA2
0x0F73       [1]    TXREG2
0x0F8B       [0]    TEST
0x0F8B       [0]    MS1RS485
0x0F8B       [0]    MS2RS485
0x0F8B       [0]    LATC4_bit
0x0F8B       [0]    LATC5_bit
0x0F94       [0]    TRISC5_bit
0x0F94       [0]    TRISC7_bit
0x0F94       [0]    TRISC6_bit
0x0F94       [0]    TRISC4_bit
0x0F94       [0]    MS1RS485_Direction
0x0F94       [0]    TEST_Direction
0x0F9D       [1]    PIE1
0x0F9E       [1]    PIR1
0x0F9E       [0]    RC1IF_bit
0x0FAB       [1]    RCSTA
0x0FAC       [1]    TXSTA
0x0FAD       [1]    TXREG
0x0FAE       [1]    RCREG
0x0FAF       [1]    SPBRG
0x0FB0       [1]    SPBRGH
0x0FB8       [1]    BAUDCON
0x0FD3       [1]    OSCCON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
