;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 1/9/2021 22:44:57
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF001EFA5  	GOTO        842
_interrupt:
;PruebaNodo1.c,121 :: 		void interrupt(void){
0x0008	0xF019C000  	MOVFF       R0, 25
0x000C	0xF018C001  	MOVFF       R1, 24
0x0010	0xF017C00B  	MOVFF       R11, 23
0x0014	0xF016C00C  	MOVFF       R12, 22
0x0018	0xF015C00D  	MOVFF       R13, 21
;PruebaNodo1.c,125 :: 		if (RC1IF_bit==1){
0x001C	0xAA9E      	BTFSS       RC1IF_bit, BitPos(RC1IF_bit+0) 
0x001E	0xD08B      	BRA         L_interrupt13
;PruebaNodo1.c,127 :: 		RC1IF_bit = 0;                                                           //Limpia la bandera de interrupcion
0x0020	0x9A9E      	BCF         RC1IF_bit, BitPos(RC1IF_bit+0) 
;PruebaNodo1.c,128 :: 		byteRS485 = UART1_Read();
0x0022	0xD98A      	RCALL       _UART1_Read
0x0024	0xF03AC000  	MOVFF       R0, _byteRS485
;PruebaNodo1.c,131 :: 		if (banRSI==2){
0x0028	0x5037      	MOVF        _banRSI, 0 
0x002A	0x0A02      	XORLW       2
0x002C	0xE114      	BNZ         L_interrupt14
;PruebaNodo1.c,133 :: 		if (i_rs485<(numDatosRS485)){
0x002E	0x0E00      	MOVLW       0
0x0030	0x5C3C      	SUBWF       _i_rs485+1, 0 
0x0032	0xE102      	BNZ         L__interrupt42
0x0034	0x5025      	MOVF        _numDatosRS485, 0 
0x0036	0x5C3B      	SUBWF       _i_rs485, 0 
L__interrupt42:
0x0038	0xE20B      	BC          L_interrupt15
;PruebaNodo1.c,134 :: 		inputPyloadRS485[i_rs485] = byteRS485;
0x003A	0x0E49      	MOVLW       _inputPyloadRS485
0x003C	0x243B      	ADDWF       _i_rs485, 0 
0x003E	0x6EE1      	MOVWF       FSR1L 
0x0040	0x0E00      	MOVLW       hi_addr(_inputPyloadRS485)
0x0042	0x203C      	ADDWFC      _i_rs485+1, 0 
0x0044	0x6EE2      	MOVWF       FSR1H 
0x0046	0xFFE6C03A  	MOVFF       _byteRS485, POSTINC1
;PruebaNodo1.c,135 :: 		i_rs485++;
0x004A	0x4A3B      	INFSNZ      _i_rs485, 1 
0x004C	0x2A3C      	INCF        _i_rs485+1, 1 
;PruebaNodo1.c,136 :: 		} else {
0x004E	0xD003      	BRA         L_interrupt16
L_interrupt15:
;PruebaNodo1.c,137 :: 		banRSI = 0;                                                        //Limpia la bandera de inicio de trama
0x0050	0x6A37      	CLRF        _banRSI 
;PruebaNodo1.c,138 :: 		banRSC = 1;                                                        //Activa la bandera de trama completa
0x0052	0x0E01      	MOVLW       1
0x0054	0x6E3F      	MOVWF       _banRSC 
;PruebaNodo1.c,139 :: 		}
L_interrupt16:
;PruebaNodo1.c,140 :: 		}
L_interrupt14:
;PruebaNodo1.c,143 :: 		if ((banRSI==0)&&(banRSC==0)){
0x0056	0x5037      	MOVF        _banRSI, 0 
0x0058	0x0A00      	XORLW       0
0x005A	0xE10A      	BNZ         L_interrupt19
0x005C	0x503F      	MOVF        _banRSC, 0 
0x005E	0x0A00      	XORLW       0
0x0060	0xE107      	BNZ         L_interrupt19
L__interrupt36:
;PruebaNodo1.c,144 :: 		if (byteRS485==0x3A){                                                 //Verifica si el primer byte recibido sea el byte de inicio de trama
0x0062	0x503A      	MOVF        _byteRS485, 0 
0x0064	0x0A3A      	XORLW       58
0x0066	0xE104      	BNZ         L_interrupt20
;PruebaNodo1.c,145 :: 		banRSI = 1;
0x0068	0x0E01      	MOVLW       1
0x006A	0x6E37      	MOVWF       _banRSI 
;PruebaNodo1.c,146 :: 		i_rs485 = 0;
0x006C	0x6A3B      	CLRF        _i_rs485 
0x006E	0x6A3C      	CLRF        _i_rs485+1 
;PruebaNodo1.c,147 :: 		}
L_interrupt20:
;PruebaNodo1.c,148 :: 		}
L_interrupt19:
;PruebaNodo1.c,149 :: 		if ((banRSI==1)&&(byteRS485!=0x3A)&&(i_rs485<4)){
0x0070	0x5037      	MOVF        _banRSI, 0 
0x0072	0x0A01      	XORLW       1
0x0074	0xE113      	BNZ         L_interrupt23
0x0076	0x503A      	MOVF        _byteRS485, 0 
0x0078	0x0A3A      	XORLW       58
0x007A	0xE010      	BZ          L_interrupt23
0x007C	0x0E00      	MOVLW       0
0x007E	0x5C3C      	SUBWF       _i_rs485+1, 0 
0x0080	0xE102      	BNZ         L__interrupt43
0x0082	0x0E04      	MOVLW       4
0x0084	0x5C3B      	SUBWF       _i_rs485, 0 
L__interrupt43:
0x0086	0xE20A      	BC          L_interrupt23
L__interrupt35:
;PruebaNodo1.c,150 :: 		tramaCabeceraRS485[i_rs485] = byteRS485;                              //Recupera los datos de cabecera de la trama UART: [Direccion, Funcion, Subfuncion, NumeroDatos]
0x0088	0x0E40      	MOVLW       _tramaCabeceraRS485
0x008A	0x243B      	ADDWF       _i_rs485, 0 
0x008C	0x6EE1      	MOVWF       FSR1L 
0x008E	0x0E00      	MOVLW       hi_addr(_tramaCabeceraRS485)
0x0090	0x203C      	ADDWFC      _i_rs485+1, 0 
0x0092	0x6EE2      	MOVWF       FSR1H 
0x0094	0xFFE6C03A  	MOVFF       _byteRS485, POSTINC1
;PruebaNodo1.c,151 :: 		i_rs485++;
0x0098	0x4A3B      	INFSNZ      _i_rs485, 1 
0x009A	0x2A3C      	INCF        _i_rs485+1, 1 
;PruebaNodo1.c,152 :: 		}
L_interrupt23:
;PruebaNodo1.c,153 :: 		if ((banRSI==1)&&(i_rs485==4)){
0x009C	0x5037      	MOVF        _banRSI, 0 
0x009E	0x0A01      	XORLW       1
0x00A0	0xE118      	BNZ         L_interrupt26
0x00A2	0x0E00      	MOVLW       0
0x00A4	0x183C      	XORWF       _i_rs485+1, 0 
0x00A6	0xE102      	BNZ         L__interrupt44
0x00A8	0x0E04      	MOVLW       4
0x00AA	0x183B      	XORWF       _i_rs485, 0 
L__interrupt44:
0x00AC	0xE112      	BNZ         L_interrupt26
L__interrupt34:
;PruebaNodo1.c,155 :: 		if (tramaCabeceraRS485[0]==IDNODO){
0x00AE	0x5040      	MOVF        _tramaCabeceraRS485, 0 
0x00B0	0x0A05      	XORLW       5
0x00B2	0xE10B      	BNZ         L_interrupt27
;PruebaNodo1.c,157 :: 		funcionRS485 = tramaCabeceraRS485[1];
0x00B4	0xF032C041  	MOVFF       _tramaCabeceraRS485+1, _funcionRS485
;PruebaNodo1.c,158 :: 		subFuncionRS485 = tramaCabeceraRS485[2];
0x00B8	0xF024C042  	MOVFF       _tramaCabeceraRS485+2, _subFuncionRS485
;PruebaNodo1.c,159 :: 		numDatosRS485 = tramaCabeceraRS485[3];
0x00BC	0xF025C043  	MOVFF       _tramaCabeceraRS485+3, _numDatosRS485
;PruebaNodo1.c,160 :: 		banRSI = 2;
0x00C0	0x0E02      	MOVLW       2
0x00C2	0x6E37      	MOVWF       _banRSI 
;PruebaNodo1.c,161 :: 		i_rs485 = 0;
0x00C4	0x6A3B      	CLRF        _i_rs485 
0x00C6	0x6A3C      	CLRF        _i_rs485+1 
;PruebaNodo1.c,162 :: 		} else {
0x00C8	0xD004      	BRA         L_interrupt28
L_interrupt27:
;PruebaNodo1.c,163 :: 		banRSI = 0;
0x00CA	0x6A37      	CLRF        _banRSI 
;PruebaNodo1.c,164 :: 		banRSC = 0;
0x00CC	0x6A3F      	CLRF        _banRSC 
;PruebaNodo1.c,165 :: 		i_rs485 = 0;
0x00CE	0x6A3B      	CLRF        _i_rs485 
0x00D0	0x6A3C      	CLRF        _i_rs485+1 
;PruebaNodo1.c,166 :: 		}
L_interrupt28:
;PruebaNodo1.c,167 :: 		}
L_interrupt26:
;PruebaNodo1.c,170 :: 		if (banRSC==1){
0x00D2	0x503F      	MOVF        _banRSC, 0 
0x00D4	0x0A01      	XORLW       1
0x00D6	0xE12F      	BNZ         L_interrupt29
;PruebaNodo1.c,172 :: 		TEST = ~TEST;
0x00D8	0x788B      	BTG         LATC4_bit, BitPos(LATC4_bit+0) 
;PruebaNodo1.c,173 :: 		Delay_ms(250);
0x00DA	0x0E06      	MOVLW       6
0x00DC	0x6E0B      	MOVWF       R11, 0
0x00DE	0x0E13      	MOVLW       19
0x00E0	0x6E0C      	MOVWF       R12, 0
0x00E2	0x0EAD      	MOVLW       173
0x00E4	0x6E0D      	MOVWF       R13, 0
L_interrupt30:
0x00E6	0x2E0D      	DECFSZ      R13, 1, 0
0x00E8	0xD7FE      	BRA         L_interrupt30
0x00EA	0x2E0C      	DECFSZ      R12, 1, 0
0x00EC	0xD7FC      	BRA         L_interrupt30
0x00EE	0x2E0B      	DECFSZ      R11, 1, 0
0x00F0	0xD7FA      	BRA         L_interrupt30
0x00F2	0x0000      	NOP
0x00F4	0x0000      	NOP
;PruebaNodo1.c,176 :: 		if (funcionRS485!=4){
0x00F6	0x5032      	MOVF        _funcionRS485, 0 
0x00F8	0x0A04      	XORLW       4
0x00FA	0xE00C      	BZ          L_interrupt31
;PruebaNodo1.c,178 :: 		EnviarTramaRS485(1, tramaCabeceraRS485, inputPyloadRS485);
0x00FC	0x0E01      	MOVLW       1
0x00FE	0x6E58      	MOVWF       FARG_EnviarTramaRS485_puertoUART 
0x0100	0x0E40      	MOVLW       _tramaCabeceraRS485
0x0102	0x6E59      	MOVWF       FARG_EnviarTramaRS485_cabecera 
0x0104	0x0E00      	MOVLW       hi_addr(_tramaCabeceraRS485)
0x0106	0x6E5A      	MOVWF       FARG_EnviarTramaRS485_cabecera+1 
0x0108	0x0E49      	MOVLW       _inputPyloadRS485
0x010A	0x6E5B      	MOVWF       FARG_EnviarTramaRS485_payload 
0x010C	0x0E00      	MOVLW       hi_addr(_inputPyloadRS485)
0x010E	0x6E5C      	MOVWF       FARG_EnviarTramaRS485_payload+1 
0x0110	0xD85F      	RCALL       _EnviarTramaRS485
;PruebaNodo1.c,179 :: 		} else {
0x0112	0xD010      	BRA         L_interrupt32
L_interrupt31:
;PruebaNodo1.c,180 :: 		if (subFuncionRS485==2){
0x0114	0x5024      	MOVF        _subFuncionRS485, 0 
0x0116	0x0A02      	XORLW       2
0x0118	0xE10D      	BNZ         L_interrupt33
;PruebaNodo1.c,182 :: 		tramaCabeceraRS485[3] = 10;                                     //Actualiza el numero de datos para hacer el test
0x011A	0x0E0A      	MOVLW       10
0x011C	0x6E43      	MOVWF       _tramaCabeceraRS485+3 
;PruebaNodo1.c,183 :: 		EnviarTramaRS485(1, tramaCabeceraRS485, tramaPruebaRS485);
0x011E	0x0E01      	MOVLW       1
0x0120	0x6E58      	MOVWF       FARG_EnviarTramaRS485_puertoUART 
0x0122	0x0E40      	MOVLW       _tramaCabeceraRS485
0x0124	0x6E59      	MOVWF       FARG_EnviarTramaRS485_cabecera 
0x0126	0x0E00      	MOVLW       hi_addr(_tramaCabeceraRS485)
0x0128	0x6E5A      	MOVWF       FARG_EnviarTramaRS485_cabecera+1 
0x012A	0x0E1A      	MOVLW       _tramaPruebaRS485
0x012C	0x6E5B      	MOVWF       FARG_EnviarTramaRS485_payload 
0x012E	0x0E00      	MOVLW       hi_addr(_tramaPruebaRS485)
0x0130	0x6E5C      	MOVWF       FARG_EnviarTramaRS485_payload+1 
0x0132	0xD84E      	RCALL       _EnviarTramaRS485
;PruebaNodo1.c,184 :: 		}
L_interrupt33:
;PruebaNodo1.c,185 :: 		}
L_interrupt32:
;PruebaNodo1.c,187 :: 		banRSC = 0;
0x0134	0x6A3F      	CLRF        _banRSC 
;PruebaNodo1.c,189 :: 		}
L_interrupt29:
;PruebaNodo1.c,193 :: 		}
L_interrupt13:
;PruebaNodo1.c,196 :: 		}
L_end_interrupt:
L__interrupt41:
0x0136	0xF000C019  	MOVFF       25, R0
0x013A	0xF001C018  	MOVFF       24, R1
0x013E	0xF00BC017  	MOVFF       23, R11
0x0142	0xF00CC016  	MOVFF       22, R12
0x0146	0xF00DC015  	MOVFF       21, R13
0x014A	0x0011      	RETFIE      1
; end of _interrupt
_UART1_Init:
;__Lib_UART_c67b67.c,20 :: 		
;__Lib_UART_c67b67.c,23 :: 		
0x014C	0x0EA2      	MOVLW       _UART1_Write
0x014E	0x6E2E      	MOVWF       _UART_Wr_Ptr 
0x0150	0x0E01      	MOVLW       hi_addr(_UART1_Write)
0x0152	0x6E2F      	MOVWF       _UART_Wr_Ptr+1 
0x0154	0x0E62      	MOVLW       FARG_UART1_Write_data_
0x0156	0x6E30      	MOVWF       _UART_Wr_Ptr+2 
0x0158	0x0E00      	MOVLW       hi_addr(FARG_UART1_Write_data_)
0x015A	0x6E31      	MOVWF       _UART_Wr_Ptr+3 
;__Lib_UART_c67b67.c,24 :: 		
0x015C	0x0E38      	MOVLW       _UART1_Read
0x015E	0x6E26      	MOVWF       _UART_Rd_Ptr 
0x0160	0x0E03      	MOVLW       hi_addr(_UART1_Read)
0x0162	0x6E27      	MOVWF       _UART_Rd_Ptr+1 
0x0164	0x0E00      	MOVLW       0
0x0166	0x6E28      	MOVWF       _UART_Rd_Ptr+2 
0x0168	0x0E00      	MOVLW       0
0x016A	0x6E29      	MOVWF       _UART_Rd_Ptr+3 
;__Lib_UART_c67b67.c,25 :: 		
0x016C	0x0EFF      	MOVLW       _UART1_Data_Ready
0x016E	0x6E2A      	MOVWF       _UART_Rdy_Ptr 
0x0170	0x0EFF      	MOVLW       hi_addr(_UART1_Data_Ready)
0x0172	0x6E2B      	MOVWF       _UART_Rdy_Ptr+1 
0x0174	0x0E00      	MOVLW       0
0x0176	0x6E2C      	MOVWF       _UART_Rdy_Ptr+2 
0x0178	0x0E00      	MOVLW       0
0x017A	0x6E2D      	MOVWF       _UART_Rdy_Ptr+3 
;__Lib_UART_c67b67.c,26 :: 		
0x017C	0x0EB0      	MOVLW       _UART1_Tx_Idle
0x017E	0x6E45      	MOVWF       _UART_Tx_Idle_Ptr 
0x0180	0x0E01      	MOVLW       hi_addr(_UART1_Tx_Idle)
0x0182	0x6E46      	MOVWF       _UART_Tx_Idle_Ptr+1 
0x0184	0x0E00      	MOVLW       0
0x0186	0x6E47      	MOVWF       _UART_Tx_Idle_Ptr+2 
0x0188	0x0E00      	MOVLW       0
0x018A	0x6E48      	MOVWF       _UART_Tx_Idle_Ptr+3 
;__Lib_UART_c67b67.c,28 :: 		
0x018C	0x8AAC      	BSF         TXSTA, 5 
;__Lib_UART_c67b67.c,29 :: 		
0x018E	0x0E90      	MOVLW       144
0x0190	0x6EAB      	MOVWF       RCSTA 
;__Lib_UART_c67b67.c,30 :: 		
0x0192	0x8E94      	BSF         TRISC7_bit, BitPos(TRISC7_bit+0) 
;__Lib_UART_c67b67.c,31 :: 		
0x0194	0x9C94      	BCF         TRISC6_bit, BitPos(TRISC6_bit+0) 
;__Lib_UART_c67b67.c,33 :: 		
L_UART1_Init0:
0x0196	0xAA9E      	BTFSS       PIR1, 5 
0x0198	0xD003      	BRA         L_UART1_Init1
;__Lib_UART_c67b67.c,34 :: 		
0x019A	0xF000CFAE  	MOVFF       RCREG, R0
0x019E	0xD7FB      	BRA         L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67b67.c,35 :: 		
L_end_UART1_Init:
0x01A0	0x0012      	RETURN      0
; end of _UART1_Init
_UART1_Write:
;__Lib_UART_c67b67.c,63 :: 		
;__Lib_UART_c67b67.c,64 :: 		
L_UART1_Write3:
0x01A2	0xB2AC      	BTFSC       TXSTA, 1 
0x01A4	0xD002      	BRA         L_UART1_Write4
;__Lib_UART_c67b67.c,65 :: 		
0x01A6	0x0000      	NOP
0x01A8	0xD7FC      	BRA         L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67b67.c,66 :: 		
0x01AA	0xFFADC062  	MOVFF       FARG_UART1_Write_data_, TXREG
;__Lib_UART_c67b67.c,67 :: 		
L_end_UART1_Write:
0x01AE	0x0012      	RETURN      0
; end of _UART1_Write
_UART1_Tx_Idle:
;__Lib_UART_c67b67.c,57 :: 		
;__Lib_UART_c67b67.c,58 :: 		
0x01B0	0x0E00      	MOVLW       0
0x01B2	0xB2AC      	BTFSC       TXSTA, 1 
0x01B4	0x0E01      	MOVLW       1
0x01B6	0x6E00      	MOVWF       R0 
;__Lib_UART_c67b67.c,59 :: 		
L_end_UART1_Tx_Idle:
0x01B8	0x0012      	RETURN      0
; end of _UART1_Tx_Idle
_UART2_Tx_Idle:
;__Lib_UART_c67b67.c,154 :: 		
;__Lib_UART_c67b67.c,155 :: 		
0x01BA	0x0E00      	MOVLW       0
0x01BC	0xB272      	BTFSC       TXSTA2, 1 
0x01BE	0x0E01      	MOVLW       1
0x01C0	0x6E00      	MOVWF       R0 
;__Lib_UART_c67b67.c,156 :: 		
L_end_UART2_Tx_Idle:
0x01C2	0x0012      	RETURN      0
; end of _UART2_Tx_Idle
_UART2_Write:
;__Lib_UART_c67b67.c,160 :: 		
;__Lib_UART_c67b67.c,161 :: 		
L_UART2_Write19:
0x01C4	0xB272      	BTFSC       TXSTA2, 1 
0x01C6	0xD001      	BRA         L_UART2_Write20
;__Lib_UART_c67b67.c,162 :: 		
0x01C8	0xD7FD      	BRA         L_UART2_Write19
L_UART2_Write20:
;__Lib_UART_c67b67.c,163 :: 		
0x01CA	0xFF73C062  	MOVFF       FARG_UART2_Write_data_, TXREG2
;__Lib_UART_c67b67.c,164 :: 		
L_end_UART2_Write:
0x01CE	0x0012      	RETURN      0
; end of _UART2_Write
_EnviarTramaRS485:
;rs485.c,20 :: 		void EnviarTramaRS485(unsigned short puertoUART, unsigned char *cabecera, unsigned char *payload){
;rs485.c,28 :: 		direccion = cabecera[0];
0x01D0	0xFFE9C059  	MOVFF       FARG_EnviarTramaRS485_cabecera, FSR0L
0x01D4	0xFFEAC05A  	MOVFF       FARG_EnviarTramaRS485_cabecera+1, FSR0H
0x01D8	0xF05DCFEE  	MOVFF       POSTINC0, EnviarTramaRS485_direccion_L0
;rs485.c,29 :: 		funcion = cabecera[1];
0x01DC	0x0E01      	MOVLW       1
0x01DE	0x2459      	ADDWF       FARG_EnviarTramaRS485_cabecera, 0 
0x01E0	0x6EE9      	MOVWF       FSR0L 
0x01E2	0x0E00      	MOVLW       0
0x01E4	0x205A      	ADDWFC      FARG_EnviarTramaRS485_cabecera+1, 0 
0x01E6	0x6EEA      	MOVWF       FSR0H 
0x01E8	0xF05ECFEE  	MOVFF       POSTINC0, EnviarTramaRS485_funcion_L0
;rs485.c,30 :: 		subfuncion = cabecera[2];
0x01EC	0x0E02      	MOVLW       2
0x01EE	0x2459      	ADDWF       FARG_EnviarTramaRS485_cabecera, 0 
0x01F0	0x6EE9      	MOVWF       FSR0L 
0x01F2	0x0E00      	MOVLW       0
0x01F4	0x205A      	ADDWFC      FARG_EnviarTramaRS485_cabecera+1, 0 
0x01F6	0x6EEA      	MOVWF       FSR0H 
0x01F8	0xF05FCFEE  	MOVFF       POSTINC0, EnviarTramaRS485_subfuncion_L0
;rs485.c,31 :: 		numDatos = cabecera[3];
0x01FC	0x0E03      	MOVLW       3
0x01FE	0x2459      	ADDWF       FARG_EnviarTramaRS485_cabecera, 0 
0x0200	0x6EE9      	MOVWF       FSR0L 
0x0202	0x0E00      	MOVLW       0
0x0204	0x205A      	ADDWFC      FARG_EnviarTramaRS485_cabecera+1, 0 
0x0206	0x6EEA      	MOVWF       FSR0H 
0x0208	0xF060CFEE  	MOVFF       POSTINC0, EnviarTramaRS485_numDatos_L0
;rs485.c,33 :: 		if (puertoUART == 1){
0x020C	0x5058      	MOVF        FARG_EnviarTramaRS485_puertoUART, 0 
0x020E	0x0A01      	XORLW       1
0x0210	0xE132      	BNZ         L_EnviarTramaRS4850
;rs485.c,34 :: 		MS1RS485 = 1;                                                            //Establece el Max485 en modo escritura
0x0212	0x8A8B      	BSF         MS1RS485, BitPos(MS1RS485+0) 
;rs485.c,35 :: 		UART1_Write(0x3A);                                                      //Envia la cabecera de la trama
0x0214	0x0E3A      	MOVLW       58
0x0216	0x0100      	MOVLB       0
0x0218	0x6F62      	MOVWF       FARG_UART1_Write_data_, 1
0x021A	0xDFC3      	RCALL       _UART1_Write
;rs485.c,36 :: 		UART1_Write(direccion);                                                 //Envia la direccion del destinatario
0x021C	0xF062C05D  	MOVFF       EnviarTramaRS485_direccion_L0, FARG_UART1_Write_data_
0x0220	0xDFC0      	RCALL       _UART1_Write
;rs485.c,37 :: 		UART1_Write(funcion);                                                   //Envia el codigo de la funcion
0x0222	0xF062C05E  	MOVFF       EnviarTramaRS485_funcion_L0, FARG_UART1_Write_data_
0x0226	0xDFBD      	RCALL       _UART1_Write
;rs485.c,38 :: 		UART1_Write(subfuncion);                                                //Envia el codigo de la subfuncion
0x0228	0xF062C05F  	MOVFF       EnviarTramaRS485_subfuncion_L0, FARG_UART1_Write_data_
0x022C	0xDFBA      	RCALL       _UART1_Write
;rs485.c,39 :: 		UART1_Write(numDatos);                                                  //Envia el numero de datos
0x022E	0xF062C060  	MOVFF       EnviarTramaRS485_numDatos_L0, FARG_UART1_Write_data_
0x0232	0xDFB7      	RCALL       _UART1_Write
;rs485.c,40 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x0234	0x0100      	MOVLB       0
0x0236	0x6B61      	CLRF        EnviarTramaRS485_iDatos_L0, 1
L_EnviarTramaRS4851:
0x0238	0x5160      	MOVF        EnviarTramaRS485_numDatos_L0, 0, 1
0x023A	0x5D61      	SUBWF       EnviarTramaRS485_iDatos_L0, 0, 1
0x023C	0xE20C      	BC          L_EnviarTramaRS4852
;rs485.c,41 :: 		UART1_Write(payload[iDatos]);
0x023E	0x5161      	MOVF        EnviarTramaRS485_iDatos_L0, 0, 1
0x0240	0x245B      	ADDWF       FARG_EnviarTramaRS485_payload, 0 
0x0242	0x6EE9      	MOVWF       FSR0L 
0x0244	0x0E00      	MOVLW       0
0x0246	0x205C      	ADDWFC      FARG_EnviarTramaRS485_payload+1, 0 
0x0248	0x6EEA      	MOVWF       FSR0H 
0x024A	0xF062CFEE  	MOVFF       POSTINC0, FARG_UART1_Write_data_
0x024E	0xDFA9      	RCALL       _UART1_Write
;rs485.c,40 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x0250	0x0100      	MOVLB       0
0x0252	0x2B61      	INCF        EnviarTramaRS485_iDatos_L0, 1, 1
;rs485.c,42 :: 		}
0x0254	0xD7F1      	BRA         L_EnviarTramaRS4851
L_EnviarTramaRS4852:
;rs485.c,43 :: 		UART1_Write(0x0D);                                                      //Envia el primer delimitador de final de la trama
0x0256	0x0E0D      	MOVLW       13
0x0258	0x6F62      	MOVWF       FARG_UART1_Write_data_, 1
0x025A	0xDFA3      	RCALL       _UART1_Write
;rs485.c,44 :: 		UART1_Write(0x0A);                                                      //Envia el segundo delimitador de final de la trama
0x025C	0x0E0A      	MOVLW       10
0x025E	0x0100      	MOVLB       0
0x0260	0x6F62      	MOVWF       FARG_UART1_Write_data_, 1
0x0262	0xDF9F      	RCALL       _UART1_Write
;rs485.c,45 :: 		UART1_Write(0x00);                                                      //Envia un byte adicional
0x0264	0x0100      	MOVLB       0
0x0266	0x6B62      	CLRF        FARG_UART1_Write_data_, 1
0x0268	0xDF9C      	RCALL       _UART1_Write
;rs485.c,46 :: 		while(UART1_Tx_Idle()==0);                                              //Espera hasta que se haya terminado de enviar todo el dato por UART antes de continuar
L_EnviarTramaRS4854:
0x026A	0xDFA2      	RCALL       _UART1_Tx_Idle
0x026C	0x5000      	MOVF        R0, 0 
0x026E	0x0A00      	XORLW       0
0x0270	0xE101      	BNZ         L_EnviarTramaRS4855
0x0272	0xD7FB      	BRA         L_EnviarTramaRS4854
L_EnviarTramaRS4855:
;rs485.c,47 :: 		MS1RS485 = 0;                                                            //Establece el Max485 en modo lectura
0x0274	0x9A8B      	BCF         MS1RS485, BitPos(MS1RS485+0) 
;rs485.c,48 :: 		}
L_EnviarTramaRS4850:
;rs485.c,50 :: 		if (puertoUART == 2){
0x0276	0x5058      	MOVF        FARG_EnviarTramaRS485_puertoUART, 0 
0x0278	0x0A02      	XORLW       2
0x027A	0xE132      	BNZ         L_EnviarTramaRS4856
;rs485.c,51 :: 		MS2RS485 = 1;                                                            //Establece el Max485 en modo escritura
0x027C	0x8A8B      	BSF         MS2RS485, BitPos(MS2RS485+0) 
;rs485.c,52 :: 		UART2_Write(0x3A);                                                      //Envia la cabecera de la trama
0x027E	0x0E3A      	MOVLW       58
0x0280	0x0100      	MOVLB       0
0x0282	0x6F62      	MOVWF       FARG_UART2_Write_data_, 1
0x0284	0xDF9F      	RCALL       _UART2_Write
;rs485.c,53 :: 		UART2_Write(direccion);                                                 //Envia la direccion del destinatario
0x0286	0xF062C05D  	MOVFF       EnviarTramaRS485_direccion_L0, FARG_UART2_Write_data_
0x028A	0xDF9C      	RCALL       _UART2_Write
;rs485.c,54 :: 		UART2_Write(funcion);                                                   //Envia el codigo de la funcion
0x028C	0xF062C05E  	MOVFF       EnviarTramaRS485_funcion_L0, FARG_UART2_Write_data_
0x0290	0xDF99      	RCALL       _UART2_Write
;rs485.c,55 :: 		UART1_Write(subfuncion);                                                //Envia el codigo de la subfuncion
0x0292	0xF062C05F  	MOVFF       EnviarTramaRS485_subfuncion_L0, FARG_UART1_Write_data_
0x0296	0xDF85      	RCALL       _UART1_Write
;rs485.c,56 :: 		UART1_Write(numDatos);                                                  //Envia el numero de datos
0x0298	0xF062C060  	MOVFF       EnviarTramaRS485_numDatos_L0, FARG_UART1_Write_data_
0x029C	0xDF82      	RCALL       _UART1_Write
;rs485.c,57 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x029E	0x0100      	MOVLB       0
0x02A0	0x6B61      	CLRF        EnviarTramaRS485_iDatos_L0, 1
L_EnviarTramaRS4857:
0x02A2	0x5160      	MOVF        EnviarTramaRS485_numDatos_L0, 0, 1
0x02A4	0x5D61      	SUBWF       EnviarTramaRS485_iDatos_L0, 0, 1
0x02A6	0xE20C      	BC          L_EnviarTramaRS4858
;rs485.c,58 :: 		UART2_Write(payload[iDatos]);
0x02A8	0x5161      	MOVF        EnviarTramaRS485_iDatos_L0, 0, 1
0x02AA	0x245B      	ADDWF       FARG_EnviarTramaRS485_payload, 0 
0x02AC	0x6EE9      	MOVWF       FSR0L 
0x02AE	0x0E00      	MOVLW       0
0x02B0	0x205C      	ADDWFC      FARG_EnviarTramaRS485_payload+1, 0 
0x02B2	0x6EEA      	MOVWF       FSR0H 
0x02B4	0xF062CFEE  	MOVFF       POSTINC0, FARG_UART2_Write_data_
0x02B8	0xDF85      	RCALL       _UART2_Write
;rs485.c,57 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x02BA	0x0100      	MOVLB       0
0x02BC	0x2B61      	INCF        EnviarTramaRS485_iDatos_L0, 1, 1
;rs485.c,59 :: 		}
0x02BE	0xD7F1      	BRA         L_EnviarTramaRS4857
L_EnviarTramaRS4858:
;rs485.c,60 :: 		UART2_Write(0x0D);                                                      //Envia el primer delimitador de final de la trama
0x02C0	0x0E0D      	MOVLW       13
0x02C2	0x6F62      	MOVWF       FARG_UART2_Write_data_, 1
0x02C4	0xDF7F      	RCALL       _UART2_Write
;rs485.c,61 :: 		UART2_Write(0x0A);                                                      //Envia el segundo delimitador de final de la trama
0x02C6	0x0E0A      	MOVLW       10
0x02C8	0x0100      	MOVLB       0
0x02CA	0x6F62      	MOVWF       FARG_UART2_Write_data_, 1
0x02CC	0xDF7B      	RCALL       _UART2_Write
;rs485.c,62 :: 		UART2_Write(0x00);                                                      //Envia un byte adicional
0x02CE	0x0100      	MOVLB       0
0x02D0	0x6B62      	CLRF        FARG_UART2_Write_data_, 1
0x02D2	0xDF78      	RCALL       _UART2_Write
;rs485.c,63 :: 		while(UART2_Tx_Idle()==0);                                              //Espera hasta que se haya terminado de enviar todo el dato por UART antes de continuar
L_EnviarTramaRS48510:
0x02D4	0xDF72      	RCALL       _UART2_Tx_Idle
0x02D6	0x5000      	MOVF        R0, 0 
0x02D8	0x0A00      	XORLW       0
0x02DA	0xE101      	BNZ         L_EnviarTramaRS48511
0x02DC	0xD7FB      	BRA         L_EnviarTramaRS48510
L_EnviarTramaRS48511:
;rs485.c,64 :: 		MS2RS485 = 0;                                                            //Establece el Max485 en modo lectura
0x02DE	0x9A8B      	BCF         MS2RS485, BitPos(MS2RS485+0) 
;rs485.c,65 :: 		}
L_EnviarTramaRS4856:
;rs485.c,67 :: 		}
L_end_EnviarTramaRS485:
0x02E0	0x0012      	RETURN      0
; end of _EnviarTramaRS485
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x02E2	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x02E4	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x02E8	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x02EA	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x02EC	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x02EE	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x02F0	0x0012      	RETURN      0
; end of ___CC2DW
_ConfiguracionPrincipal:
;PruebaNodo1.c,86 :: 		void ConfiguracionPrincipal(){
;PruebaNodo1.c,89 :: 		OSCCON.IDLEN=1;                                    //Entra en modo IDLE durante la instruccion SLEEP
0x02F2	0x8ED3      	BSF         OSCCON, 7 
;PruebaNodo1.c,90 :: 		OSCCON.IRCF2=1;                                    //HFINTOSC=16MHz  IRFC=111
0x02F4	0x8CD3      	BSF         OSCCON, 6 
;PruebaNodo1.c,91 :: 		OSCCON.IRCF1=1;
0x02F6	0x8AD3      	BSF         OSCCON, 5 
;PruebaNodo1.c,92 :: 		OSCCON.IRCF0=1;
0x02F8	0x88D3      	BSF         OSCCON, 4 
;PruebaNodo1.c,93 :: 		OSCCON.SCS1=1;                                     //System Clock Select bit:  1x=Internal oscillator block
0x02FA	0x82D3      	BSF         OSCCON, 1 
;PruebaNodo1.c,94 :: 		OSCCON.SCS0=1;
0x02FC	0x80D3      	BSF         OSCCON, 0 
;PruebaNodo1.c,97 :: 		ANSELA = 0;                                        //Configura PORTA como digital
0x02FE	0x010F      	MOVLB       15
0x0300	0x6B38      	CLRF        ANSELA, 1
;PruebaNodo1.c,98 :: 		ANSELB = 0;                                        //Configura PORTB como digital
0x0302	0x6B39      	CLRF        ANSELB, 1
;PruebaNodo1.c,99 :: 		ANSELC = 0;                                        //Configura PORTC como digital
0x0304	0x6B3A      	CLRF        ANSELC, 1
;PruebaNodo1.c,101 :: 		TEST_Direction = 0;                                //Configura el pin TEST como salida
0x0306	0x9894      	BCF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;PruebaNodo1.c,102 :: 		MS1RS485_Direction = 0;                            //Configura el pin MS1RS485 como salida
0x0308	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;PruebaNodo1.c,104 :: 		INTCON.GIE = 1;                                    //Habilita las interrupciones globales
0x030A	0x8EF2      	BSF         INTCON, 7 
;PruebaNodo1.c,105 :: 		INTCON.PEIE = 1;                                   //Habilita las interrupciones perifericas
0x030C	0x8CF2      	BSF         INTCON, 6 
;PruebaNodo1.c,108 :: 		PIE1.RC1IE = 1;                                   //Habilita la interrupcion en UART1 receive
0x030E	0x8A9D      	BSF         PIE1, 5 
;PruebaNodo1.c,109 :: 		PIR1.RC1IF = 0;                                   //Limpia la bandera de interrupcion UART1
0x0310	0x9A9E      	BCF         PIR1, 5 
;PruebaNodo1.c,110 :: 		UART1_Init(19200);                                //Inicializa el UART1 a 19200 bps
0x0312	0x86B8      	BSF         BAUDCON, 3, 0
0x0314	0x6AB0      	CLRF        SPBRGH 
0x0316	0x0ECF      	MOVLW       207
0x0318	0x6EAF      	MOVWF       SPBRG 
0x031A	0x84AC      	BSF         TXSTA, 2, 0
0x031C	0xDF17      	RCALL       _UART1_Init
;PruebaNodo1.c,112 :: 		Delay_ms(100);                                     //Espera hasta que se estabilicen los cambios
0x031E	0x0E03      	MOVLW       3
0x0320	0x6E0B      	MOVWF       R11, 0
0x0322	0x0E08      	MOVLW       8
0x0324	0x6E0C      	MOVWF       R12, 0
0x0326	0x0E77      	MOVLW       119
0x0328	0x6E0D      	MOVWF       R13, 0
L_ConfiguracionPrincipal12:
0x032A	0x2E0D      	DECFSZ      R13, 1, 0
0x032C	0xD7FE      	BRA         L_ConfiguracionPrincipal12
0x032E	0x2E0C      	DECFSZ      R12, 1, 0
0x0330	0xD7FC      	BRA         L_ConfiguracionPrincipal12
0x0332	0x2E0B      	DECFSZ      R11, 1, 0
0x0334	0xD7FA      	BRA         L_ConfiguracionPrincipal12
;PruebaNodo1.c,114 :: 		}
L_end_ConfiguracionPrincipal:
0x0336	0x0012      	RETURN      0
; end of _ConfiguracionPrincipal
_UART1_Read:
;__Lib_UART_c67b67.c,44 :: 		
;__Lib_UART_c67b67.c,47 :: 		
0x0338	0xF001CFAE  	MOVFF       RCREG, R1
;__Lib_UART_c67b67.c,48 :: 		
0x033C	0xA2AB      	BTFSS       RCSTA, 1 
0x033E	0xD002      	BRA         L_UART1_Read2
;__Lib_UART_c67b67.c,49 :: 		
0x0340	0x98AB      	BCF         RCSTA, 4 
;__Lib_UART_c67b67.c,50 :: 		
0x0342	0x88AB      	BSF         RCSTA, 4 
;__Lib_UART_c67b67.c,51 :: 		
L_UART1_Read2:
;__Lib_UART_c67b67.c,52 :: 		
0x0344	0xF000C001  	MOVFF       R1, R0
;__Lib_UART_c67b67.c,53 :: 		
L_end_UART1_Read:
0x0348	0x0012      	RETURN      0
; end of _UART1_Read
_main:
0x034A	0x0EB0      	MOVLW       176
0x034C	0x6E1A      	MOVWF       _tramaPruebaRS485 
0x034E	0x0EB1      	MOVLW       177
0x0350	0x6E1B      	MOVWF       27 
0x0352	0x0EB2      	MOVLW       178
0x0354	0x6E1C      	MOVWF       28 
0x0356	0x0EB3      	MOVLW       179
0x0358	0x6E1D      	MOVWF       29 
0x035A	0x0EB4      	MOVLW       180
0x035C	0x6E1E      	MOVWF       30 
0x035E	0x0EB5      	MOVLW       181
0x0360	0x6E1F      	MOVWF       31 
0x0362	0x0EB6      	MOVLW       182
0x0364	0x6E20      	MOVWF       32 
0x0366	0x0EB7      	MOVLW       183
0x0368	0x6E21      	MOVWF       33 
0x036A	0x0EB8      	MOVLW       184
0x036C	0x6E22      	MOVWF       34 
0x036E	0x0EB9      	MOVLW       185
0x0370	0x6E23      	MOVWF       35 
;PruebaNodo1.c,46 :: 		void main() {
;PruebaNodo1.c,48 :: 		ConfiguracionPrincipal();
0x0372	0xDFBF      	RCALL       _ConfiguracionPrincipal
;PruebaNodo1.c,52 :: 		i = 0;
0x0374	0x6A3D      	CLRF        _i 
0x0376	0x6A3E      	CLRF        _i+1 
;PruebaNodo1.c,53 :: 		j = 0;
0x0378	0x6A35      	CLRF        _j 
0x037A	0x6A36      	CLRF        _j+1 
;PruebaNodo1.c,54 :: 		x = 0;
0x037C	0x6A33      	CLRF        _x 
0x037E	0x6A34      	CLRF        _x+1 
;PruebaNodo1.c,55 :: 		y = 0;
0x0380	0x6A38      	CLRF        _y 
0x0382	0x6A39      	CLRF        _y+1 
;PruebaNodo1.c,58 :: 		banRSI = 0;
0x0384	0x6A37      	CLRF        _banRSI 
;PruebaNodo1.c,59 :: 		banRSC = 0;
0x0386	0x6A3F      	CLRF        _banRSC 
;PruebaNodo1.c,60 :: 		byteRS485 = 0;
0x0388	0x6A3A      	CLRF        _byteRS485 
;PruebaNodo1.c,61 :: 		i_rs485 = 0;
0x038A	0x6A3B      	CLRF        _i_rs485 
0x038C	0x6A3C      	CLRF        _i_rs485+1 
;PruebaNodo1.c,62 :: 		funcionRS485 = 0;
0x038E	0x6A32      	CLRF        _funcionRS485 
;PruebaNodo1.c,63 :: 		subFuncionRS485 = 0;
0x0390	0x6A24      	CLRF        _subFuncionRS485 
;PruebaNodo1.c,64 :: 		numDatosRS485 = 0;
0x0392	0x6A25      	CLRF        _numDatosRS485 
;PruebaNodo1.c,65 :: 		MS1RS485 = 0;
0x0394	0x9A8B      	BCF         LATC5_bit, BitPos(LATC5_bit+0) 
;PruebaNodo1.c,69 :: 		TEST = 1;
0x0396	0x888B      	BSF         LATC4_bit, BitPos(LATC4_bit+0) 
;PruebaNodo1.c,78 :: 		}
L_end_main:
0x0398	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [324]    _interrupt
0x014C      [86]    _UART1_Init
0x01A2      [14]    _UART1_Write
0x01B0      [10]    _UART1_Tx_Idle
0x01BA      [10]    _UART2_Tx_Idle
0x01C4      [12]    _UART2_Write
0x01D0     [274]    _EnviarTramaRS485
0x02E2      [16]    ___CC2DW
0x02F2      [70]    _ConfiguracionPrincipal
0x0338      [18]    _UART1_Read
0x034A      [80]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    R0
0x0000       [1]    UART2_Init_tmp_L0
0x0001       [1]    R1
0x0001       [1]    UART2_Read___tmp_UART2_Read_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x001A      [10]    _tramaPruebaRS485
0x0024       [1]    _subFuncionRS485
0x0025       [1]    _numDatosRS485
0x0026       [4]    _UART_Rd_Ptr
0x002A       [4]    _UART_Rdy_Ptr
0x002E       [4]    _UART_Wr_Ptr
0x0032       [1]    _funcionRS485
0x0033       [2]    _x
0x0035       [2]    _j
0x0037       [1]    _banRSI
0x0038       [2]    _y
0x003A       [1]    _byteRS485
0x003B       [2]    _i_rs485
0x003D       [2]    _i
0x003F       [1]    _banRSC
0x0040       [5]    _tramaCabeceraRS485
0x0045       [4]    _UART_Tx_Idle_Ptr
0x0049      [15]    _inputPyloadRS485
0x0058       [1]    FARG_EnviarTramaRS485_puertoUART
0x0059       [2]    FARG_EnviarTramaRS485_cabecera
0x005B       [2]    FARG_EnviarTramaRS485_payload
0x005D       [1]    EnviarTramaRS485_direccion_L0
0x005E       [1]    EnviarTramaRS485_funcion_L0
0x005F       [1]    EnviarTramaRS485_subfuncion_L0
0x0060       [1]    EnviarTramaRS485_numDatos_L0
0x0061       [1]    EnviarTramaRS485_iDatos_L0
0x0062       [1]    FARG_UART1_Write_data_
0x0062       [1]    FARG_UART2_Write_data_
0x0F38       [1]    ANSELA
0x0F39       [1]    ANSELB
0x0F3A       [1]    ANSELC
0x0F72       [1]    TXSTA2
0x0F73       [1]    TXREG2
0x0F8B       [0]    MS2RS485
0x0F8B       [0]    TEST
0x0F8B       [0]    MS1RS485
0x0F8B       [0]    LATC5_bit
0x0F8B       [0]    LATC4_bit
0x0F94       [0]    TEST_Direction
0x0F94       [0]    TRISC6_bit
0x0F94       [0]    TRISC7_bit
0x0F94       [0]    TRISC5_bit
0x0F94       [0]    TRISC4_bit
0x0F94       [0]    MS1RS485_Direction
0x0F9D       [1]    PIE1
0x0F9E       [1]    PIR1
0x0F9E       [0]    RC1IF_bit
0x0FAB       [1]    RCSTA
0x0FAC       [1]    TXSTA
0x0FAD       [1]    TXREG
0x0FAE       [1]    RCREG
0x0FAF       [1]    SPBRG
0x0FB0       [1]    SPBRGH
0x0FB8       [1]    BAUDCON
0x0FD3       [1]    OSCCON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
